/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./grammars/out/ECMAScriptLexer.js":
/*!*****************************************!*\
  !*** ./grammars/out/ECMAScriptLexer.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ECMAScriptLexer)\n/* harmony export */ });\n/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/dist/antlr4.web.mjs\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// Generated from ./ECMAScript.g4 by ANTLR 4.13.1\n// jshint ignore: start\n\nvar serializedATN = [4, 0, 103, 926, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7, 108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2, 113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7, 117, 2, 118, 7, 118, 2, 119, 7, 119, 2, 120, 7, 120, 2, 121, 7, 121, 2, 122, 7, 122, 2, 123, 7, 123, 2, 124, 7, 124, 2, 125, 7, 125, 2, 126, 7, 126, 2, 127, 7, 127, 2, 128, 7, 128, 2, 129, 7, 129, 2, 130, 7, 130, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 415, 8, 51, 1, 52, 1, 52, 1, 52, 5, 52, 420, 8, 52, 10, 52, 12, 52, 423, 9, 52, 1, 52, 3, 52, 426, 8, 52, 1, 52, 1, 52, 4, 52, 430, 8, 52, 11, 52, 12, 52, 431, 1, 52, 3, 52, 435, 8, 52, 1, 52, 1, 52, 3, 52, 439, 8, 52, 3, 52, 441, 8, 52, 1, 53, 1, 53, 1, 53, 4, 53, 446, 8, 53, 11, 53, 12, 53, 447, 1, 54, 1, 54, 1, 54, 4, 54, 453, 8, 54, 11, 54, 12, 54, 454, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 65, 1, 66, 1, 66, 1, 66, 1, 66, 1, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 70, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 1, 73, 1, 73, 1, 74, 1, 74, 1, 74, 1, 74, 1, 74, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 75, 1, 76, 1, 76, 1, 76, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 77, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 78, 1, 79, 1, 79, 1, 79, 1, 80, 1, 80, 1, 80, 1, 80, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 81, 1, 82, 1, 82, 1, 82, 1, 82, 1, 82, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 83, 1, 84, 1, 84, 1, 84, 1, 84, 1, 84, 1, 84, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 85, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 86, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 87, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1, 89, 1, 89, 1, 89, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 91, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 93, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 94, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 95, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 96, 1, 97, 1, 97, 5, 97, 740, 8, 97, 10, 97, 12, 97, 743, 9, 97, 1, 98, 1, 98, 5, 98, 747, 8, 98, 10, 98, 12, 98, 750, 9, 98, 1, 98, 1, 98, 1, 98, 5, 98, 755, 8, 98, 10, 98, 12, 98, 758, 9, 98, 1, 98, 3, 98, 761, 8, 98, 1, 99, 4, 99, 764, 8, 99, 11, 99, 12, 99, 765, 1, 99, 1, 99, 1, 100, 1, 100, 1, 100, 1, 100, 5, 100, 774, 8, 100, 10, 100, 12, 100, 777, 9, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 100, 1, 101, 1, 101, 1, 101, 1, 101, 5, 101, 788, 8, 101, 10, 101, 12, 101, 791, 9, 101, 1, 101, 1, 101, 1, 102, 1, 102, 1, 103, 1, 103, 1, 103, 1, 103, 3, 103, 801, 8, 103, 1, 104, 1, 104, 1, 104, 1, 104, 3, 104, 807, 8, 104, 1, 105, 1, 105, 1, 105, 1, 105, 3, 105, 813, 8, 105, 1, 106, 1, 106, 3, 106, 817, 8, 106, 1, 107, 1, 107, 1, 107, 1, 107, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 108, 1, 109, 1, 109, 1, 110, 1, 110, 1, 111, 1, 111, 1, 111, 3, 111, 836, 8, 111, 1, 112, 1, 112, 1, 112, 1, 113, 1, 113, 1, 113, 3, 113, 844, 8, 113, 1, 114, 1, 114, 1, 115, 1, 115, 1, 116, 1, 116, 1, 117, 1, 117, 1, 117, 5, 117, 855, 8, 117, 10, 117, 12, 117, 858, 9, 117, 3, 117, 860, 8, 117, 1, 118, 1, 118, 3, 118, 864, 8, 118, 1, 118, 4, 118, 867, 8, 118, 11, 118, 12, 118, 868, 1, 119, 1, 119, 1, 119, 3, 119, 874, 8, 119, 1, 120, 1, 120, 1, 120, 1, 120, 3, 120, 880, 8, 120, 1, 121, 1, 121, 1, 122, 1, 122, 1, 123, 1, 123, 5, 123, 888, 8, 123, 10, 123, 12, 123, 891, 9, 123, 1, 124, 5, 124, 894, 8, 124, 10, 124, 12, 124, 897, 9, 124, 1, 125, 1, 125, 1, 125, 3, 125, 902, 8, 125, 1, 126, 1, 126, 1, 126, 3, 126, 907, 8, 126, 1, 127, 1, 127, 1, 128, 1, 128, 1, 128, 1, 129, 1, 129, 5, 129, 916, 8, 129, 10, 129, 12, 129, 919, 9, 129, 1, 129, 1, 129, 1, 130, 1, 130, 3, 130, 925, 8, 130, 1, 775, 0, 131, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47, 95, 48, 97, 49, 99, 50, 101, 51, 103, 52, 105, 53, 107, 54, 109, 55, 111, 56, 113, 57, 115, 58, 117, 59, 119, 60, 121, 61, 123, 62, 125, 63, 127, 64, 129, 65, 131, 66, 133, 67, 135, 68, 137, 69, 139, 70, 141, 71, 143, 72, 145, 73, 147, 74, 149, 75, 151, 76, 153, 77, 155, 78, 157, 79, 159, 80, 161, 81, 163, 82, 165, 83, 167, 84, 169, 85, 171, 86, 173, 87, 175, 88, 177, 89, 179, 90, 181, 91, 183, 92, 185, 93, 187, 94, 189, 95, 191, 96, 193, 97, 195, 98, 197, 99, 199, 100, 201, 101, 203, 102, 205, 103, 207, 0, 209, 0, 211, 0, 213, 0, 215, 0, 217, 0, 219, 0, 221, 0, 223, 0, 225, 0, 227, 0, 229, 0, 231, 0, 233, 0, 235, 0, 237, 0, 239, 0, 241, 0, 243, 0, 245, 0, 247, 0, 249, 0, 251, 0, 253, 0, 255, 0, 257, 0, 259, 0, 261, 0, 1, 0, 19, 3, 0, 10, 10, 13, 13, 8232, 8233, 2, 0, 88, 88, 120, 120, 4, 0, 9, 9, 11, 12, 32, 32, 160, 160, 4, 0, 10, 10, 13, 13, 34, 34, 92, 92, 4, 0, 10, 10, 13, 13, 39, 39, 92, 92, 9, 0, 34, 34, 39, 39, 92, 92, 98, 98, 102, 102, 110, 110, 114, 114, 116, 116, 118, 118, 12, 0, 10, 10, 13, 13, 34, 34, 39, 39, 48, 57, 92, 92, 98, 98, 102, 102, 110, 110, 114, 114, 116, 118, 120, 120, 2, 0, 117, 117, 120, 120, 1, 0, 48, 57, 3, 0, 48, 57, 65, 70, 97, 102, 1, 0, 48, 55, 1, 0, 49, 57, 2, 0, 69, 69, 101, 101, 2, 0, 43, 43, 45, 45, 661, 0, 36, 36, 65, 90, 95, 95, 97, 122, 170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 895, 895, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1327, 1329, 1366, 1369, 1369, 1376, 1416, 1488, 1514, 1519, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2144, 2154, 2160, 2183, 2185, 2190, 2208, 2249, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2432, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2556, 2556, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2809, 2809, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3129, 3133, 3133, 3160, 3162, 3165, 3165, 3168, 3169, 3200, 3200, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3293, 3294, 3296, 3297, 3313, 3314, 3332, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3412, 3414, 3423, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3718, 3722, 3724, 3747, 3749, 3749, 3751, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5109, 5112, 5117, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5873, 5880, 5888, 5905, 5919, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6264, 6272, 6276, 6279, 6312, 6314, 6314, 6320, 6389, 6400, 6430, 6480, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6988, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7296, 7304, 7312, 7354, 7357, 7359, 7401, 7404, 7406, 7411, 7413, 7414, 7418, 7418, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8579, 8580, 11264, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12294, 12337, 12341, 12347, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12591, 12593, 12686, 12704, 12735, 12784, 12799, 13312, 19903, 19968, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42653, 42656, 42725, 42775, 42783, 42786, 42888, 42891, 42954, 42960, 42961, 42963, 42963, 42965, 42969, 42994, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43261, 43262, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43488, 43492, 43494, 43503, 43514, 43518, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43646, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43824, 43866, 43868, 43881, 43888, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594, 65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786, 66176, 66204, 66208, 66256, 66304, 66335, 66349, 66368, 66370, 66377, 66384, 66421, 66432, 66461, 66464, 66499, 66504, 66511, 66560, 66717, 66736, 66771, 66776, 66811, 66816, 66855, 66864, 66915, 66928, 66938, 66940, 66954, 66956, 66962, 66964, 66965, 66967, 66977, 66979, 66993, 66995, 67001, 67003, 67004, 67072, 67382, 67392, 67413, 67424, 67431, 67456, 67461, 67463, 67504, 67506, 67514, 67584, 67589, 67592, 67592, 67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669, 67680, 67702, 67712, 67742, 67808, 67826, 67828, 67829, 67840, 67861, 67872, 67897, 67968, 68023, 68030, 68031, 68096, 68096, 68112, 68115, 68117, 68119, 68121, 68149, 68192, 68220, 68224, 68252, 68288, 68295, 68297, 68324, 68352, 68405, 68416, 68437, 68448, 68466, 68480, 68497, 68608, 68680, 68736, 68786, 68800, 68850, 68864, 68899, 69248, 69289, 69296, 69297, 69376, 69404, 69415, 69415, 69424, 69445, 69488, 69505, 69552, 69572, 69600, 69622, 69635, 69687, 69745, 69746, 69749, 69749, 69763, 69807, 69840, 69864, 69891, 69926, 69956, 69956, 69959, 69959, 69968, 70002, 70006, 70006, 70019, 70066, 70081, 70084, 70106, 70106, 70108, 70108, 70144, 70161, 70163, 70187, 70207, 70208, 70272, 70278, 70280, 70280, 70282, 70285, 70287, 70301, 70303, 70312, 70320, 70366, 70405, 70412, 70415, 70416, 70419, 70440, 70442, 70448, 70450, 70451, 70453, 70457, 70461, 70461, 70480, 70480, 70493, 70497, 70656, 70708, 70727, 70730, 70751, 70753, 70784, 70831, 70852, 70853, 70855, 70855, 71040, 71086, 71128, 71131, 71168, 71215, 71236, 71236, 71296, 71338, 71352, 71352, 71424, 71450, 71488, 71494, 71680, 71723, 71840, 71903, 71935, 71942, 71945, 71945, 71948, 71955, 71957, 71958, 71960, 71983, 71999, 71999, 72001, 72001, 72096, 72103, 72106, 72144, 72161, 72161, 72163, 72163, 72192, 72192, 72203, 72242, 72250, 72250, 72272, 72272, 72284, 72329, 72349, 72349, 72368, 72440, 72704, 72712, 72714, 72750, 72768, 72768, 72818, 72847, 72960, 72966, 72968, 72969, 72971, 73008, 73030, 73030, 73056, 73061, 73063, 73064, 73066, 73097, 73112, 73112, 73440, 73458, 73474, 73474, 73476, 73488, 73490, 73523, 73648, 73648, 73728, 74649, 74880, 75075, 77712, 77808, 77824, 78895, 78913, 78918, 82944, 83526, 92160, 92728, 92736, 92766, 92784, 92862, 92880, 92909, 92928, 92975, 92992, 92995, 93027, 93047, 93053, 93071, 93760, 93823, 93952, 94026, 94032, 94032, 94099, 94111, 94176, 94177, 94179, 94179, 94208, 100343, 100352, 101589, 101632, 101640, 110576, 110579, 110581, 110587, 110589, 110590, 110592, 110882, 110898, 110898, 110928, 110930, 110933, 110933, 110948, 110951, 110960, 111355, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 119808, 119892, 119894, 119964, 119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980, 119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069, 120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121, 120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144, 120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570, 120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686, 120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779, 122624, 122654, 122661, 122666, 122928, 122989, 123136, 123180, 123191, 123197, 123214, 123214, 123536, 123565, 123584, 123627, 124112, 124139, 124896, 124902, 124904, 124907, 124909, 124910, 124912, 124926, 124928, 125124, 125184, 125251, 125259, 125259, 126464, 126467, 126469, 126495, 126497, 126498, 126500, 126500, 126503, 126503, 126505, 126514, 126516, 126519, 126521, 126521, 126523, 126523, 126530, 126530, 126535, 126535, 126537, 126537, 126539, 126539, 126541, 126543, 126545, 126546, 126548, 126548, 126551, 126551, 126553, 126553, 126555, 126555, 126557, 126557, 126559, 126559, 126561, 126562, 126564, 126564, 126567, 126570, 126572, 126578, 126580, 126583, 126585, 126588, 126590, 126590, 126592, 126601, 126603, 126619, 126625, 126627, 126629, 126633, 126635, 126651, 131072, 173791, 173824, 177977, 177984, 178205, 178208, 183969, 183984, 191456, 194560, 195101, 196608, 201546, 201552, 205743, 407, 0, 48, 57, 95, 95, 768, 879, 1155, 1159, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1552, 1562, 1611, 1641, 1648, 1648, 1750, 1756, 1759, 1764, 1767, 1768, 1770, 1773, 1776, 1785, 1809, 1809, 1840, 1866, 1958, 1968, 1984, 1993, 2027, 2035, 2045, 2045, 2070, 2073, 2075, 2083, 2085, 2087, 2089, 2093, 2137, 2139, 2200, 2207, 2250, 2273, 2275, 2306, 2362, 2362, 2364, 2364, 2369, 2376, 2381, 2381, 2385, 2391, 2402, 2403, 2406, 2415, 2433, 2433, 2492, 2492, 2497, 2500, 2509, 2509, 2530, 2531, 2534, 2543, 2558, 2558, 2561, 2562, 2620, 2620, 2625, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2662, 2673, 2677, 2677, 2689, 2690, 2748, 2748, 2753, 2757, 2759, 2760, 2765, 2765, 2786, 2787, 2790, 2799, 2810, 2815, 2817, 2817, 2876, 2876, 2879, 2879, 2881, 2884, 2893, 2893, 2901, 2902, 2914, 2915, 2918, 2927, 2946, 2946, 3008, 3008, 3021, 3021, 3046, 3055, 3072, 3072, 3076, 3076, 3132, 3132, 3134, 3136, 3142, 3144, 3146, 3149, 3157, 3158, 3170, 3171, 3174, 3183, 3201, 3201, 3260, 3260, 3263, 3263, 3270, 3270, 3276, 3277, 3298, 3299, 3302, 3311, 3328, 3329, 3387, 3388, 3393, 3396, 3405, 3405, 3426, 3427, 3430, 3439, 3457, 3457, 3530, 3530, 3538, 3540, 3542, 3542, 3558, 3567, 3633, 3633, 3636, 3642, 3655, 3662, 3664, 3673, 3761, 3761, 3764, 3772, 3784, 3790, 3792, 3801, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3953, 3966, 3968, 3972, 3974, 3975, 3981, 3991, 3993, 4028, 4038, 4038, 4141, 4144, 4146, 4151, 4153, 4154, 4157, 4158, 4160, 4169, 4184, 4185, 4190, 4192, 4209, 4212, 4226, 4226, 4229, 4230, 4237, 4237, 4240, 4249, 4253, 4253, 4957, 4959, 5906, 5908, 5938, 5939, 5970, 5971, 6002, 6003, 6068, 6069, 6071, 6077, 6086, 6086, 6089, 6099, 6109, 6109, 6112, 6121, 6155, 6157, 6159, 6169, 6277, 6278, 6313, 6313, 6432, 6434, 6439, 6440, 6450, 6450, 6457, 6459, 6470, 6479, 6608, 6617, 6679, 6680, 6683, 6683, 6742, 6742, 6744, 6750, 6752, 6752, 6754, 6754, 6757, 6764, 6771, 6780, 6783, 6793, 6800, 6809, 6832, 6845, 6847, 6862, 6912, 6915, 6964, 6964, 6966, 6970, 6972, 6972, 6978, 6978, 6992, 7001, 7019, 7027, 7040, 7041, 7074, 7077, 7080, 7081, 7083, 7085, 7088, 7097, 7142, 7142, 7144, 7145, 7149, 7149, 7151, 7153, 7212, 7219, 7222, 7223, 7232, 7241, 7248, 7257, 7376, 7378, 7380, 7392, 7394, 7400, 7405, 7405, 7412, 7412, 7416, 7417, 7616, 7679, 8255, 8256, 8276, 8276, 8400, 8412, 8417, 8417, 8421, 8432, 11503, 11505, 11647, 11647, 11744, 11775, 12330, 12333, 12441, 12442, 42528, 42537, 42607, 42607, 42612, 42621, 42654, 42655, 42736, 42737, 43010, 43010, 43014, 43014, 43019, 43019, 43045, 43046, 43052, 43052, 43204, 43205, 43216, 43225, 43232, 43249, 43263, 43273, 43302, 43309, 43335, 43345, 43392, 43394, 43443, 43443, 43446, 43449, 43452, 43453, 43472, 43481, 43493, 43493, 43504, 43513, 43561, 43566, 43569, 43570, 43573, 43574, 43587, 43587, 43596, 43596, 43600, 43609, 43644, 43644, 43696, 43696, 43698, 43700, 43703, 43704, 43710, 43711, 43713, 43713, 43756, 43757, 43766, 43766, 44005, 44005, 44008, 44008, 44013, 44013, 44016, 44025, 64286, 64286, 65024, 65039, 65056, 65071, 65075, 65076, 65101, 65103, 65296, 65305, 65343, 65343, 66045, 66045, 66272, 66272, 66422, 66426, 66720, 66729, 68097, 68099, 68101, 68102, 68108, 68111, 68152, 68154, 68159, 68159, 68325, 68326, 68900, 68903, 68912, 68921, 69291, 69292, 69373, 69375, 69446, 69456, 69506, 69509, 69633, 69633, 69688, 69702, 69734, 69744, 69747, 69748, 69759, 69761, 69811, 69814, 69817, 69818, 69826, 69826, 69872, 69881, 69888, 69890, 69927, 69931, 69933, 69940, 69942, 69951, 70003, 70003, 70016, 70017, 70070, 70078, 70089, 70092, 70095, 70105, 70191, 70193, 70196, 70196, 70198, 70199, 70206, 70206, 70209, 70209, 70367, 70367, 70371, 70378, 70384, 70393, 70400, 70401, 70459, 70460, 70464, 70464, 70502, 70508, 70512, 70516, 70712, 70719, 70722, 70724, 70726, 70726, 70736, 70745, 70750, 70750, 70835, 70840, 70842, 70842, 70847, 70848, 70850, 70851, 70864, 70873, 71090, 71093, 71100, 71101, 71103, 71104, 71132, 71133, 71219, 71226, 71229, 71229, 71231, 71232, 71248, 71257, 71339, 71339, 71341, 71341, 71344, 71349, 71351, 71351, 71360, 71369, 71453, 71455, 71458, 71461, 71463, 71467, 71472, 71481, 71727, 71735, 71737, 71738, 71904, 71913, 71995, 71996, 71998, 71998, 72003, 72003, 72016, 72025, 72148, 72151, 72154, 72155, 72160, 72160, 72193, 72202, 72243, 72248, 72251, 72254, 72263, 72263, 72273, 72278, 72281, 72283, 72330, 72342, 72344, 72345, 72752, 72758, 72760, 72765, 72767, 72767, 72784, 72793, 72850, 72871, 72874, 72880, 72882, 72883, 72885, 72886, 73009, 73014, 73018, 73018, 73020, 73021, 73023, 73029, 73031, 73031, 73040, 73049, 73104, 73105, 73109, 73109, 73111, 73111, 73120, 73129, 73459, 73460, 73472, 73473, 73526, 73530, 73536, 73536, 73538, 73538, 73552, 73561, 78912, 78912, 78919, 78933, 92768, 92777, 92864, 92873, 92912, 92916, 92976, 92982, 93008, 93017, 94031, 94031, 94095, 94098, 94180, 94180, 113821, 113822, 118528, 118573, 118576, 118598, 119143, 119145, 119163, 119170, 119173, 119179, 119210, 119213, 119362, 119364, 120782, 120831, 121344, 121398, 121403, 121452, 121461, 121461, 121476, 121476, 121499, 121503, 121505, 121519, 122880, 122886, 122888, 122904, 122907, 122913, 122915, 122916, 122918, 122922, 123023, 123023, 123184, 123190, 123200, 123209, 123566, 123566, 123628, 123641, 124140, 124153, 125136, 125142, 125252, 125258, 125264, 125273, 130032, 130041, 917760, 917999, 6, 0, 10, 10, 13, 13, 42, 42, 47, 47, 91, 92, 8232, 8233, 5, 0, 10, 10, 13, 13, 47, 47, 91, 92, 8232, 8233, 4, 0, 10, 10, 13, 13, 92, 93, 8232, 8233, 941, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93, 1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 0, 97, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 0, 119, 1, 0, 0, 0, 0, 121, 1, 0, 0, 0, 0, 123, 1, 0, 0, 0, 0, 125, 1, 0, 0, 0, 0, 127, 1, 0, 0, 0, 0, 129, 1, 0, 0, 0, 0, 131, 1, 0, 0, 0, 0, 133, 1, 0, 0, 0, 0, 135, 1, 0, 0, 0, 0, 137, 1, 0, 0, 0, 0, 139, 1, 0, 0, 0, 0, 141, 1, 0, 0, 0, 0, 143, 1, 0, 0, 0, 0, 145, 1, 0, 0, 0, 0, 147, 1, 0, 0, 0, 0, 149, 1, 0, 0, 0, 0, 151, 1, 0, 0, 0, 0, 153, 1, 0, 0, 0, 0, 155, 1, 0, 0, 0, 0, 157, 1, 0, 0, 0, 0, 159, 1, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 163, 1, 0, 0, 0, 0, 165, 1, 0, 0, 0, 0, 167, 1, 0, 0, 0, 0, 169, 1, 0, 0, 0, 0, 171, 1, 0, 0, 0, 0, 173, 1, 0, 0, 0, 0, 175, 1, 0, 0, 0, 0, 177, 1, 0, 0, 0, 0, 179, 1, 0, 0, 0, 0, 181, 1, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 185, 1, 0, 0, 0, 0, 187, 1, 0, 0, 0, 0, 189, 1, 0, 0, 0, 0, 191, 1, 0, 0, 0, 0, 193, 1, 0, 0, 0, 0, 195, 1, 0, 0, 0, 0, 197, 1, 0, 0, 0, 0, 199, 1, 0, 0, 0, 0, 201, 1, 0, 0, 0, 0, 203, 1, 0, 0, 0, 0, 205, 1, 0, 0, 0, 1, 263, 1, 0, 0, 0, 3, 269, 1, 0, 0, 0, 5, 273, 1, 0, 0, 0, 7, 275, 1, 0, 0, 0, 9, 277, 1, 0, 0, 0, 11, 279, 1, 0, 0, 0, 13, 281, 1, 0, 0, 0, 15, 283, 1, 0, 0, 0, 17, 285, 1, 0, 0, 0, 19, 287, 1, 0, 0, 0, 21, 289, 1, 0, 0, 0, 23, 291, 1, 0, 0, 0, 25, 293, 1, 0, 0, 0, 27, 295, 1, 0, 0, 0, 29, 297, 1, 0, 0, 0, 31, 300, 1, 0, 0, 0, 33, 303, 1, 0, 0, 0, 35, 305, 1, 0, 0, 0, 37, 307, 1, 0, 0, 0, 39, 309, 1, 0, 0, 0, 41, 311, 1, 0, 0, 0, 43, 313, 1, 0, 0, 0, 45, 315, 1, 0, 0, 0, 47, 317, 1, 0, 0, 0, 49, 320, 1, 0, 0, 0, 51, 323, 1, 0, 0, 0, 53, 327, 1, 0, 0, 0, 55, 329, 1, 0, 0, 0, 57, 331, 1, 0, 0, 0, 59, 334, 1, 0, 0, 0, 61, 337, 1, 0, 0, 0, 63, 340, 1, 0, 0, 0, 65, 343, 1, 0, 0, 0, 67, 347, 1, 0, 0, 0, 69, 351, 1, 0, 0, 0, 71, 353, 1, 0, 0, 0, 73, 355, 1, 0, 0, 0, 75, 357, 1, 0, 0, 0, 77, 360, 1, 0, 0, 0, 79, 363, 1, 0, 0, 0, 81, 366, 1, 0, 0, 0, 83, 369, 1, 0, 0, 0, 85, 372, 1, 0, 0, 0, 87, 375, 1, 0, 0, 0, 89, 378, 1, 0, 0, 0, 91, 382, 1, 0, 0, 0, 93, 386, 1, 0, 0, 0, 95, 391, 1, 0, 0, 0, 97, 394, 1, 0, 0, 0, 99, 397, 1, 0, 0, 0, 101, 400, 1, 0, 0, 0, 103, 414, 1, 0, 0, 0, 105, 440, 1, 0, 0, 0, 107, 442, 1, 0, 0, 0, 109, 449, 1, 0, 0, 0, 111, 456, 1, 0, 0, 0, 113, 462, 1, 0, 0, 0, 115, 465, 1, 0, 0, 0, 117, 476, 1, 0, 0, 0, 119, 483, 1, 0, 0, 0, 121, 488, 1, 0, 0, 0, 123, 493, 1, 0, 0, 0, 125, 497, 1, 0, 0, 0, 127, 501, 1, 0, 0, 0, 129, 507, 1, 0, 0, 0, 131, 515, 1, 0, 0, 0, 133, 522, 1, 0, 0, 0, 135, 527, 1, 0, 0, 0, 137, 536, 1, 0, 0, 0, 139, 540, 1, 0, 0, 0, 141, 547, 1, 0, 0, 0, 143, 553, 1, 0, 0, 0, 145, 562, 1, 0, 0, 0, 147, 571, 1, 0, 0, 0, 149, 576, 1, 0, 0, 0, 151, 581, 1, 0, 0, 0, 153, 589, 1, 0, 0, 0, 155, 592, 1, 0, 0, 0, 157, 598, 1, 0, 0, 0, 159, 605, 1, 0, 0, 0, 161, 608, 1, 0, 0, 0, 163, 612, 1, 0, 0, 0, 165, 618, 1, 0, 0, 0, 167, 623, 1, 0, 0, 0, 169, 631, 1, 0, 0, 0, 171, 637, 1, 0, 0, 0, 173, 643, 1, 0, 0, 0, 175, 650, 1, 0, 0, 0, 177, 657, 1, 0, 0, 0, 179, 669, 1, 0, 0, 0, 181, 674, 1, 0, 0, 0, 183, 683, 1, 0, 0, 0, 185, 691, 1, 0, 0, 0, 187, 702, 1, 0, 0, 0, 189, 711, 1, 0, 0, 0, 191, 722, 1, 0, 0, 0, 193, 730, 1, 0, 0, 0, 195, 737, 1, 0, 0, 0, 197, 760, 1, 0, 0, 0, 199, 763, 1, 0, 0, 0, 201, 769, 1, 0, 0, 0, 203, 783, 1, 0, 0, 0, 205, 794, 1, 0, 0, 0, 207, 800, 1, 0, 0, 0, 209, 806, 1, 0, 0, 0, 211, 812, 1, 0, 0, 0, 213, 816, 1, 0, 0, 0, 215, 818, 1, 0, 0, 0, 217, 822, 1, 0, 0, 0, 219, 828, 1, 0, 0, 0, 221, 830, 1, 0, 0, 0, 223, 835, 1, 0, 0, 0, 225, 837, 1, 0, 0, 0, 227, 843, 1, 0, 0, 0, 229, 845, 1, 0, 0, 0, 231, 847, 1, 0, 0, 0, 233, 849, 1, 0, 0, 0, 235, 859, 1, 0, 0, 0, 237, 861, 1, 0, 0, 0, 239, 873, 1, 0, 0, 0, 241, 879, 1, 0, 0, 0, 243, 881, 1, 0, 0, 0, 245, 883, 1, 0, 0, 0, 247, 885, 1, 0, 0, 0, 249, 895, 1, 0, 0, 0, 251, 901, 1, 0, 0, 0, 253, 906, 1, 0, 0, 0, 255, 908, 1, 0, 0, 0, 257, 910, 1, 0, 0, 0, 259, 913, 1, 0, 0, 0, 261, 924, 1, 0, 0, 0, 263, 264, 4, 0, 0, 0, 264, 265, 5, 47, 0, 0, 265, 266, 3, 247, 123, 0, 266, 267, 5, 47, 0, 0, 267, 268, 3, 249, 124, 0, 268, 2, 1, 0, 0, 0, 269, 270, 7, 0, 0, 0, 270, 271, 1, 0, 0, 0, 271, 272, 6, 1, 0, 0, 272, 4, 1, 0, 0, 0, 273, 274, 5, 91, 0, 0, 274, 6, 1, 0, 0, 0, 275, 276, 5, 93, 0, 0, 276, 8, 1, 0, 0, 0, 277, 278, 5, 40, 0, 0, 278, 10, 1, 0, 0, 0, 279, 280, 5, 41, 0, 0, 280, 12, 1, 0, 0, 0, 281, 282, 5, 123, 0, 0, 282, 14, 1, 0, 0, 0, 283, 284, 5, 125, 0, 0, 284, 16, 1, 0, 0, 0, 285, 286, 5, 59, 0, 0, 286, 18, 1, 0, 0, 0, 287, 288, 5, 44, 0, 0, 288, 20, 1, 0, 0, 0, 289, 290, 5, 61, 0, 0, 290, 22, 1, 0, 0, 0, 291, 292, 5, 63, 0, 0, 292, 24, 1, 0, 0, 0, 293, 294, 5, 58, 0, 0, 294, 26, 1, 0, 0, 0, 295, 296, 5, 46, 0, 0, 296, 28, 1, 0, 0, 0, 297, 298, 5, 43, 0, 0, 298, 299, 5, 43, 0, 0, 299, 30, 1, 0, 0, 0, 300, 301, 5, 45, 0, 0, 301, 302, 5, 45, 0, 0, 302, 32, 1, 0, 0, 0, 303, 304, 5, 43, 0, 0, 304, 34, 1, 0, 0, 0, 305, 306, 5, 45, 0, 0, 306, 36, 1, 0, 0, 0, 307, 308, 5, 126, 0, 0, 308, 38, 1, 0, 0, 0, 309, 310, 5, 33, 0, 0, 310, 40, 1, 0, 0, 0, 311, 312, 5, 42, 0, 0, 312, 42, 1, 0, 0, 0, 313, 314, 5, 47, 0, 0, 314, 44, 1, 0, 0, 0, 315, 316, 5, 37, 0, 0, 316, 46, 1, 0, 0, 0, 317, 318, 5, 62, 0, 0, 318, 319, 5, 62, 0, 0, 319, 48, 1, 0, 0, 0, 320, 321, 5, 60, 0, 0, 321, 322, 5, 60, 0, 0, 322, 50, 1, 0, 0, 0, 323, 324, 5, 62, 0, 0, 324, 325, 5, 62, 0, 0, 325, 326, 5, 62, 0, 0, 326, 52, 1, 0, 0, 0, 327, 328, 5, 60, 0, 0, 328, 54, 1, 0, 0, 0, 329, 330, 5, 62, 0, 0, 330, 56, 1, 0, 0, 0, 331, 332, 5, 60, 0, 0, 332, 333, 5, 61, 0, 0, 333, 58, 1, 0, 0, 0, 334, 335, 5, 62, 0, 0, 335, 336, 5, 61, 0, 0, 336, 60, 1, 0, 0, 0, 337, 338, 5, 61, 0, 0, 338, 339, 5, 61, 0, 0, 339, 62, 1, 0, 0, 0, 340, 341, 5, 33, 0, 0, 341, 342, 5, 61, 0, 0, 342, 64, 1, 0, 0, 0, 343, 344, 5, 61, 0, 0, 344, 345, 5, 61, 0, 0, 345, 346, 5, 61, 0, 0, 346, 66, 1, 0, 0, 0, 347, 348, 5, 33, 0, 0, 348, 349, 5, 61, 0, 0, 349, 350, 5, 61, 0, 0, 350, 68, 1, 0, 0, 0, 351, 352, 5, 38, 0, 0, 352, 70, 1, 0, 0, 0, 353, 354, 5, 94, 0, 0, 354, 72, 1, 0, 0, 0, 355, 356, 5, 124, 0, 0, 356, 74, 1, 0, 0, 0, 357, 358, 5, 38, 0, 0, 358, 359, 5, 38, 0, 0, 359, 76, 1, 0, 0, 0, 360, 361, 5, 124, 0, 0, 361, 362, 5, 124, 0, 0, 362, 78, 1, 0, 0, 0, 363, 364, 5, 42, 0, 0, 364, 365, 5, 61, 0, 0, 365, 80, 1, 0, 0, 0, 366, 367, 5, 47, 0, 0, 367, 368, 5, 61, 0, 0, 368, 82, 1, 0, 0, 0, 369, 370, 5, 37, 0, 0, 370, 371, 5, 61, 0, 0, 371, 84, 1, 0, 0, 0, 372, 373, 5, 43, 0, 0, 373, 374, 5, 61, 0, 0, 374, 86, 1, 0, 0, 0, 375, 376, 5, 45, 0, 0, 376, 377, 5, 61, 0, 0, 377, 88, 1, 0, 0, 0, 378, 379, 5, 60, 0, 0, 379, 380, 5, 60, 0, 0, 380, 381, 5, 61, 0, 0, 381, 90, 1, 0, 0, 0, 382, 383, 5, 62, 0, 0, 383, 384, 5, 62, 0, 0, 384, 385, 5, 61, 0, 0, 385, 92, 1, 0, 0, 0, 386, 387, 5, 62, 0, 0, 387, 388, 5, 62, 0, 0, 388, 389, 5, 62, 0, 0, 389, 390, 5, 61, 0, 0, 390, 94, 1, 0, 0, 0, 391, 392, 5, 38, 0, 0, 392, 393, 5, 61, 0, 0, 393, 96, 1, 0, 0, 0, 394, 395, 5, 94, 0, 0, 395, 396, 5, 61, 0, 0, 396, 98, 1, 0, 0, 0, 397, 398, 5, 124, 0, 0, 398, 399, 5, 61, 0, 0, 399, 100, 1, 0, 0, 0, 400, 401, 5, 110, 0, 0, 401, 402, 5, 117, 0, 0, 402, 403, 5, 108, 0, 0, 403, 404, 5, 108, 0, 0, 404, 102, 1, 0, 0, 0, 405, 406, 5, 116, 0, 0, 406, 407, 5, 114, 0, 0, 407, 408, 5, 117, 0, 0, 408, 415, 5, 101, 0, 0, 409, 410, 5, 102, 0, 0, 410, 411, 5, 97, 0, 0, 411, 412, 5, 108, 0, 0, 412, 413, 5, 115, 0, 0, 413, 415, 5, 101, 0, 0, 414, 405, 1, 0, 0, 0, 414, 409, 1, 0, 0, 0, 415, 104, 1, 0, 0, 0, 416, 417, 3, 235, 117, 0, 417, 421, 5, 46, 0, 0, 418, 420, 3, 229, 114, 0, 419, 418, 1, 0, 0, 0, 420, 423, 1, 0, 0, 0, 421, 419, 1, 0, 0, 0, 421, 422, 1, 0, 0, 0, 422, 425, 1, 0, 0, 0, 423, 421, 1, 0, 0, 0, 424, 426, 3, 237, 118, 0, 425, 424, 1, 0, 0, 0, 425, 426, 1, 0, 0, 0, 426, 441, 1, 0, 0, 0, 427, 429, 5, 46, 0, 0, 428, 430, 3, 229, 114, 0, 429, 428, 1, 0, 0, 0, 430, 431, 1, 0, 0, 0, 431, 429, 1, 0, 0, 0, 431, 432, 1, 0, 0, 0, 432, 434, 1, 0, 0, 0, 433, 435, 3, 237, 118, 0, 434, 433, 1, 0, 0, 0, 434, 435, 1, 0, 0, 0, 435, 441, 1, 0, 0, 0, 436, 438, 3, 235, 117, 0, 437, 439, 3, 237, 118, 0, 438, 437, 1, 0, 0, 0, 438, 439, 1, 0, 0, 0, 439, 441, 1, 0, 0, 0, 440, 416, 1, 0, 0, 0, 440, 427, 1, 0, 0, 0, 440, 436, 1, 0, 0, 0, 441, 106, 1, 0, 0, 0, 442, 443, 5, 48, 0, 0, 443, 445, 7, 1, 0, 0, 444, 446, 3, 231, 115, 0, 445, 444, 1, 0, 0, 0, 446, 447, 1, 0, 0, 0, 447, 445, 1, 0, 0, 0, 447, 448, 1, 0, 0, 0, 448, 108, 1, 0, 0, 0, 449, 450, 4, 54, 1, 0, 450, 452, 5, 48, 0, 0, 451, 453, 3, 233, 116, 0, 452, 451, 1, 0, 0, 0, 453, 454, 1, 0, 0, 0, 454, 452, 1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 110, 1, 0, 0, 0, 456, 457, 5, 98, 0, 0, 457, 458, 5, 114, 0, 0, 458, 459, 5, 101, 0, 0, 459, 460, 5, 97, 0, 0, 460, 461, 5, 107, 0, 0, 461, 112, 1, 0, 0, 0, 462, 463, 5, 100, 0, 0, 463, 464, 5, 111, 0, 0, 464, 114, 1, 0, 0, 0, 465, 466, 5, 105, 0, 0, 466, 467, 5, 110, 0, 0, 467, 468, 5, 115, 0, 0, 468, 469, 5, 116, 0, 0, 469, 470, 5, 97, 0, 0, 470, 471, 5, 110, 0, 0, 471, 472, 5, 99, 0, 0, 472, 473, 5, 101, 0, 0, 473, 474, 5, 111, 0, 0, 474, 475, 5, 102, 0, 0, 475, 116, 1, 0, 0, 0, 476, 477, 5, 116, 0, 0, 477, 478, 5, 121, 0, 0, 478, 479, 5, 112, 0, 0, 479, 480, 5, 101, 0, 0, 480, 481, 5, 111, 0, 0, 481, 482, 5, 102, 0, 0, 482, 118, 1, 0, 0, 0, 483, 484, 5, 99, 0, 0, 484, 485, 5, 97, 0, 0, 485, 486, 5, 115, 0, 0, 486, 487, 5, 101, 0, 0, 487, 120, 1, 0, 0, 0, 488, 489, 5, 101, 0, 0, 489, 490, 5, 108, 0, 0, 490, 491, 5, 115, 0, 0, 491, 492, 5, 101, 0, 0, 492, 122, 1, 0, 0, 0, 493, 494, 5, 110, 0, 0, 494, 495, 5, 101, 0, 0, 495, 496, 5, 119, 0, 0, 496, 124, 1, 0, 0, 0, 497, 498, 5, 118, 0, 0, 498, 499, 5, 97, 0, 0, 499, 500, 5, 114, 0, 0, 500, 126, 1, 0, 0, 0, 501, 502, 5, 99, 0, 0, 502, 503, 5, 97, 0, 0, 503, 504, 5, 116, 0, 0, 504, 505, 5, 99, 0, 0, 505, 506, 5, 104, 0, 0, 506, 128, 1, 0, 0, 0, 507, 508, 5, 102, 0, 0, 508, 509, 5, 105, 0, 0, 509, 510, 5, 110, 0, 0, 510, 511, 5, 97, 0, 0, 511, 512, 5, 108, 0, 0, 512, 513, 5, 108, 0, 0, 513, 514, 5, 121, 0, 0, 514, 130, 1, 0, 0, 0, 515, 516, 5, 114, 0, 0, 516, 517, 5, 101, 0, 0, 517, 518, 5, 116, 0, 0, 518, 519, 5, 117, 0, 0, 519, 520, 5, 114, 0, 0, 520, 521, 5, 110, 0, 0, 521, 132, 1, 0, 0, 0, 522, 523, 5, 118, 0, 0, 523, 524, 5, 111, 0, 0, 524, 525, 5, 105, 0, 0, 525, 526, 5, 100, 0, 0, 526, 134, 1, 0, 0, 0, 527, 528, 5, 99, 0, 0, 528, 529, 5, 111, 0, 0, 529, 530, 5, 110, 0, 0, 530, 531, 5, 116, 0, 0, 531, 532, 5, 105, 0, 0, 532, 533, 5, 110, 0, 0, 533, 534, 5, 117, 0, 0, 534, 535, 5, 101, 0, 0, 535, 136, 1, 0, 0, 0, 536, 537, 5, 102, 0, 0, 537, 538, 5, 111, 0, 0, 538, 539, 5, 114, 0, 0, 539, 138, 1, 0, 0, 0, 540, 541, 5, 115, 0, 0, 541, 542, 5, 119, 0, 0, 542, 543, 5, 105, 0, 0, 543, 544, 5, 116, 0, 0, 544, 545, 5, 99, 0, 0, 545, 546, 5, 104, 0, 0, 546, 140, 1, 0, 0, 0, 547, 548, 5, 119, 0, 0, 548, 549, 5, 104, 0, 0, 549, 550, 5, 105, 0, 0, 550, 551, 5, 108, 0, 0, 551, 552, 5, 101, 0, 0, 552, 142, 1, 0, 0, 0, 553, 554, 5, 100, 0, 0, 554, 555, 5, 101, 0, 0, 555, 556, 5, 98, 0, 0, 556, 557, 5, 117, 0, 0, 557, 558, 5, 103, 0, 0, 558, 559, 5, 103, 0, 0, 559, 560, 5, 101, 0, 0, 560, 561, 5, 114, 0, 0, 561, 144, 1, 0, 0, 0, 562, 563, 5, 102, 0, 0, 563, 564, 5, 117, 0, 0, 564, 565, 5, 110, 0, 0, 565, 566, 5, 99, 0, 0, 566, 567, 5, 116, 0, 0, 567, 568, 5, 105, 0, 0, 568, 569, 5, 111, 0, 0, 569, 570, 5, 110, 0, 0, 570, 146, 1, 0, 0, 0, 571, 572, 5, 116, 0, 0, 572, 573, 5, 104, 0, 0, 573, 574, 5, 105, 0, 0, 574, 575, 5, 115, 0, 0, 575, 148, 1, 0, 0, 0, 576, 577, 5, 119, 0, 0, 577, 578, 5, 105, 0, 0, 578, 579, 5, 116, 0, 0, 579, 580, 5, 104, 0, 0, 580, 150, 1, 0, 0, 0, 581, 582, 5, 100, 0, 0, 582, 583, 5, 101, 0, 0, 583, 584, 5, 102, 0, 0, 584, 585, 5, 97, 0, 0, 585, 586, 5, 117, 0, 0, 586, 587, 5, 108, 0, 0, 587, 588, 5, 116, 0, 0, 588, 152, 1, 0, 0, 0, 589, 590, 5, 105, 0, 0, 590, 591, 5, 102, 0, 0, 591, 154, 1, 0, 0, 0, 592, 593, 5, 116, 0, 0, 593, 594, 5, 104, 0, 0, 594, 595, 5, 114, 0, 0, 595, 596, 5, 111, 0, 0, 596, 597, 5, 119, 0, 0, 597, 156, 1, 0, 0, 0, 598, 599, 5, 100, 0, 0, 599, 600, 5, 101, 0, 0, 600, 601, 5, 108, 0, 0, 601, 602, 5, 101, 0, 0, 602, 603, 5, 116, 0, 0, 603, 604, 5, 101, 0, 0, 604, 158, 1, 0, 0, 0, 605, 606, 5, 105, 0, 0, 606, 607, 5, 110, 0, 0, 607, 160, 1, 0, 0, 0, 608, 609, 5, 116, 0, 0, 609, 610, 5, 114, 0, 0, 610, 611, 5, 121, 0, 0, 611, 162, 1, 0, 0, 0, 612, 613, 5, 99, 0, 0, 613, 614, 5, 108, 0, 0, 614, 615, 5, 97, 0, 0, 615, 616, 5, 115, 0, 0, 616, 617, 5, 115, 0, 0, 617, 164, 1, 0, 0, 0, 618, 619, 5, 101, 0, 0, 619, 620, 5, 110, 0, 0, 620, 621, 5, 117, 0, 0, 621, 622, 5, 109, 0, 0, 622, 166, 1, 0, 0, 0, 623, 624, 5, 101, 0, 0, 624, 625, 5, 120, 0, 0, 625, 626, 5, 116, 0, 0, 626, 627, 5, 101, 0, 0, 627, 628, 5, 110, 0, 0, 628, 629, 5, 100, 0, 0, 629, 630, 5, 115, 0, 0, 630, 168, 1, 0, 0, 0, 631, 632, 5, 115, 0, 0, 632, 633, 5, 117, 0, 0, 633, 634, 5, 112, 0, 0, 634, 635, 5, 101, 0, 0, 635, 636, 5, 114, 0, 0, 636, 170, 1, 0, 0, 0, 637, 638, 5, 99, 0, 0, 638, 639, 5, 111, 0, 0, 639, 640, 5, 110, 0, 0, 640, 641, 5, 115, 0, 0, 641, 642, 5, 116, 0, 0, 642, 172, 1, 0, 0, 0, 643, 644, 5, 101, 0, 0, 644, 645, 5, 120, 0, 0, 645, 646, 5, 112, 0, 0, 646, 647, 5, 111, 0, 0, 647, 648, 5, 114, 0, 0, 648, 649, 5, 116, 0, 0, 649, 174, 1, 0, 0, 0, 650, 651, 5, 105, 0, 0, 651, 652, 5, 109, 0, 0, 652, 653, 5, 112, 0, 0, 653, 654, 5, 111, 0, 0, 654, 655, 5, 114, 0, 0, 655, 656, 5, 116, 0, 0, 656, 176, 1, 0, 0, 0, 657, 658, 4, 88, 2, 0, 658, 659, 5, 105, 0, 0, 659, 660, 5, 109, 0, 0, 660, 661, 5, 112, 0, 0, 661, 662, 5, 108, 0, 0, 662, 663, 5, 101, 0, 0, 663, 664, 5, 109, 0, 0, 664, 665, 5, 101, 0, 0, 665, 666, 5, 110, 0, 0, 666, 667, 5, 116, 0, 0, 667, 668, 5, 115, 0, 0, 668, 178, 1, 0, 0, 0, 669, 670, 4, 89, 3, 0, 670, 671, 5, 108, 0, 0, 671, 672, 5, 101, 0, 0, 672, 673, 5, 116, 0, 0, 673, 180, 1, 0, 0, 0, 674, 675, 4, 90, 4, 0, 675, 676, 5, 112, 0, 0, 676, 677, 5, 114, 0, 0, 677, 678, 5, 105, 0, 0, 678, 679, 5, 118, 0, 0, 679, 680, 5, 97, 0, 0, 680, 681, 5, 116, 0, 0, 681, 682, 5, 101, 0, 0, 682, 182, 1, 0, 0, 0, 683, 684, 4, 91, 5, 0, 684, 685, 5, 112, 0, 0, 685, 686, 5, 117, 0, 0, 686, 687, 5, 98, 0, 0, 687, 688, 5, 108, 0, 0, 688, 689, 5, 105, 0, 0, 689, 690, 5, 99, 0, 0, 690, 184, 1, 0, 0, 0, 691, 692, 4, 92, 6, 0, 692, 693, 5, 105, 0, 0, 693, 694, 5, 110, 0, 0, 694, 695, 5, 116, 0, 0, 695, 696, 5, 101, 0, 0, 696, 697, 5, 114, 0, 0, 697, 698, 5, 102, 0, 0, 698, 699, 5, 97, 0, 0, 699, 700, 5, 99, 0, 0, 700, 701, 5, 101, 0, 0, 701, 186, 1, 0, 0, 0, 702, 703, 4, 93, 7, 0, 703, 704, 5, 112, 0, 0, 704, 705, 5, 97, 0, 0, 705, 706, 5, 99, 0, 0, 706, 707, 5, 107, 0, 0, 707, 708, 5, 97, 0, 0, 708, 709, 5, 103, 0, 0, 709, 710, 5, 101, 0, 0, 710, 188, 1, 0, 0, 0, 711, 712, 4, 94, 8, 0, 712, 713, 5, 112, 0, 0, 713, 714, 5, 114, 0, 0, 714, 715, 5, 111, 0, 0, 715, 716, 5, 116, 0, 0, 716, 717, 5, 101, 0, 0, 717, 718, 5, 99, 0, 0, 718, 719, 5, 116, 0, 0, 719, 720, 5, 101, 0, 0, 720, 721, 5, 100, 0, 0, 721, 190, 1, 0, 0, 0, 722, 723, 4, 95, 9, 0, 723, 724, 5, 115, 0, 0, 724, 725, 5, 116, 0, 0, 725, 726, 5, 97, 0, 0, 726, 727, 5, 116, 0, 0, 727, 728, 5, 105, 0, 0, 728, 729, 5, 99, 0, 0, 729, 192, 1, 0, 0, 0, 730, 731, 4, 96, 10, 0, 731, 732, 5, 121, 0, 0, 732, 733, 5, 105, 0, 0, 733, 734, 5, 101, 0, 0, 734, 735, 5, 108, 0, 0, 735, 736, 5, 100, 0, 0, 736, 194, 1, 0, 0, 0, 737, 741, 3, 239, 119, 0, 738, 740, 3, 241, 120, 0, 739, 738, 1, 0, 0, 0, 740, 743, 1, 0, 0, 0, 741, 739, 1, 0, 0, 0, 741, 742, 1, 0, 0, 0, 742, 196, 1, 0, 0, 0, 743, 741, 1, 0, 0, 0, 744, 748, 5, 34, 0, 0, 745, 747, 3, 207, 103, 0, 746, 745, 1, 0, 0, 0, 747, 750, 1, 0, 0, 0, 748, 746, 1, 0, 0, 0, 748, 749, 1, 0, 0, 0, 749, 751, 1, 0, 0, 0, 750, 748, 1, 0, 0, 0, 751, 761, 5, 34, 0, 0, 752, 756, 5, 39, 0, 0, 753, 755, 3, 209, 104, 0, 754, 753, 1, 0, 0, 0, 755, 758, 1, 0, 0, 0, 756, 754, 1, 0, 0, 0, 756, 757, 1, 0, 0, 0, 757, 759, 1, 0, 0, 0, 758, 756, 1, 0, 0, 0, 759, 761, 5, 39, 0, 0, 760, 744, 1, 0, 0, 0, 760, 752, 1, 0, 0, 0, 761, 198, 1, 0, 0, 0, 762, 764, 7, 2, 0, 0, 763, 762, 1, 0, 0, 0, 764, 765, 1, 0, 0, 0, 765, 763, 1, 0, 0, 0, 765, 766, 1, 0, 0, 0, 766, 767, 1, 0, 0, 0, 767, 768, 6, 99, 0, 0, 768, 200, 1, 0, 0, 0, 769, 770, 5, 47, 0, 0, 770, 771, 5, 42, 0, 0, 771, 775, 1, 0, 0, 0, 772, 774, 9, 0, 0, 0, 773, 772, 1, 0, 0, 0, 774, 777, 1, 0, 0, 0, 775, 776, 1, 0, 0, 0, 775, 773, 1, 0, 0, 0, 776, 778, 1, 0, 0, 0, 777, 775, 1, 0, 0, 0, 778, 779, 5, 42, 0, 0, 779, 780, 5, 47, 0, 0, 780, 781, 1, 0, 0, 0, 781, 782, 6, 100, 0, 0, 782, 202, 1, 0, 0, 0, 783, 784, 5, 47, 0, 0, 784, 785, 5, 47, 0, 0, 785, 789, 1, 0, 0, 0, 786, 788, 8, 0, 0, 0, 787, 786, 1, 0, 0, 0, 788, 791, 1, 0, 0, 0, 789, 787, 1, 0, 0, 0, 789, 790, 1, 0, 0, 0, 790, 792, 1, 0, 0, 0, 791, 789, 1, 0, 0, 0, 792, 793, 6, 101, 0, 0, 793, 204, 1, 0, 0, 0, 794, 795, 9, 0, 0, 0, 795, 206, 1, 0, 0, 0, 796, 801, 8, 3, 0, 0, 797, 798, 5, 92, 0, 0, 798, 801, 3, 211, 105, 0, 799, 801, 3, 225, 112, 0, 800, 796, 1, 0, 0, 0, 800, 797, 1, 0, 0, 0, 800, 799, 1, 0, 0, 0, 801, 208, 1, 0, 0, 0, 802, 807, 8, 4, 0, 0, 803, 804, 5, 92, 0, 0, 804, 807, 3, 211, 105, 0, 805, 807, 3, 225, 112, 0, 806, 802, 1, 0, 0, 0, 806, 803, 1, 0, 0, 0, 806, 805, 1, 0, 0, 0, 807, 210, 1, 0, 0, 0, 808, 813, 3, 213, 106, 0, 809, 813, 5, 48, 0, 0, 810, 813, 3, 215, 107, 0, 811, 813, 3, 217, 108, 0, 812, 808, 1, 0, 0, 0, 812, 809, 1, 0, 0, 0, 812, 810, 1, 0, 0, 0, 812, 811, 1, 0, 0, 0, 813, 212, 1, 0, 0, 0, 814, 817, 3, 219, 109, 0, 815, 817, 3, 221, 110, 0, 816, 814, 1, 0, 0, 0, 816, 815, 1, 0, 0, 0, 817, 214, 1, 0, 0, 0, 818, 819, 5, 120, 0, 0, 819, 820, 3, 231, 115, 0, 820, 821, 3, 231, 115, 0, 821, 216, 1, 0, 0, 0, 822, 823, 5, 117, 0, 0, 823, 824, 3, 231, 115, 0, 824, 825, 3, 231, 115, 0, 825, 826, 3, 231, 115, 0, 826, 827, 3, 231, 115, 0, 827, 218, 1, 0, 0, 0, 828, 829, 7, 5, 0, 0, 829, 220, 1, 0, 0, 0, 830, 831, 8, 6, 0, 0, 831, 222, 1, 0, 0, 0, 832, 836, 3, 219, 109, 0, 833, 836, 3, 229, 114, 0, 834, 836, 7, 7, 0, 0, 835, 832, 1, 0, 0, 0, 835, 833, 1, 0, 0, 0, 835, 834, 1, 0, 0, 0, 836, 224, 1, 0, 0, 0, 837, 838, 5, 92, 0, 0, 838, 839, 3, 227, 113, 0, 839, 226, 1, 0, 0, 0, 840, 841, 5, 13, 0, 0, 841, 844, 5, 10, 0, 0, 842, 844, 3, 3, 1, 0, 843, 840, 1, 0, 0, 0, 843, 842, 1, 0, 0, 0, 844, 228, 1, 0, 0, 0, 845, 846, 7, 8, 0, 0, 846, 230, 1, 0, 0, 0, 847, 848, 7, 9, 0, 0, 848, 232, 1, 0, 0, 0, 849, 850, 7, 10, 0, 0, 850, 234, 1, 0, 0, 0, 851, 860, 5, 48, 0, 0, 852, 856, 7, 11, 0, 0, 853, 855, 3, 229, 114, 0, 854, 853, 1, 0, 0, 0, 855, 858, 1, 0, 0, 0, 856, 854, 1, 0, 0, 0, 856, 857, 1, 0, 0, 0, 857, 860, 1, 0, 0, 0, 858, 856, 1, 0, 0, 0, 859, 851, 1, 0, 0, 0, 859, 852, 1, 0, 0, 0, 860, 236, 1, 0, 0, 0, 861, 863, 7, 12, 0, 0, 862, 864, 7, 13, 0, 0, 863, 862, 1, 0, 0, 0, 863, 864, 1, 0, 0, 0, 864, 866, 1, 0, 0, 0, 865, 867, 3, 229, 114, 0, 866, 865, 1, 0, 0, 0, 867, 868, 1, 0, 0, 0, 868, 866, 1, 0, 0, 0, 868, 869, 1, 0, 0, 0, 869, 238, 1, 0, 0, 0, 870, 874, 7, 14, 0, 0, 871, 872, 5, 92, 0, 0, 872, 874, 3, 217, 108, 0, 873, 870, 1, 0, 0, 0, 873, 871, 1, 0, 0, 0, 874, 240, 1, 0, 0, 0, 875, 880, 3, 239, 119, 0, 876, 880, 7, 15, 0, 0, 877, 880, 3, 243, 121, 0, 878, 880, 3, 245, 122, 0, 879, 875, 1, 0, 0, 0, 879, 876, 1, 0, 0, 0, 879, 877, 1, 0, 0, 0, 879, 878, 1, 0, 0, 0, 880, 242, 1, 0, 0, 0, 881, 882, 5, 8204, 0, 0, 882, 244, 1, 0, 0, 0, 883, 884, 5, 8205, 0, 0, 884, 246, 1, 0, 0, 0, 885, 889, 3, 251, 125, 0, 886, 888, 3, 253, 126, 0, 887, 886, 1, 0, 0, 0, 888, 891, 1, 0, 0, 0, 889, 887, 1, 0, 0, 0, 889, 890, 1, 0, 0, 0, 890, 248, 1, 0, 0, 0, 891, 889, 1, 0, 0, 0, 892, 894, 3, 241, 120, 0, 893, 892, 1, 0, 0, 0, 894, 897, 1, 0, 0, 0, 895, 893, 1, 0, 0, 0, 895, 896, 1, 0, 0, 0, 896, 250, 1, 0, 0, 0, 897, 895, 1, 0, 0, 0, 898, 902, 8, 16, 0, 0, 899, 902, 3, 257, 128, 0, 900, 902, 3, 259, 129, 0, 901, 898, 1, 0, 0, 0, 901, 899, 1, 0, 0, 0, 901, 900, 1, 0, 0, 0, 902, 252, 1, 0, 0, 0, 903, 907, 8, 17, 0, 0, 904, 907, 3, 257, 128, 0, 905, 907, 3, 259, 129, 0, 906, 903, 1, 0, 0, 0, 906, 904, 1, 0, 0, 0, 906, 905, 1, 0, 0, 0, 907, 254, 1, 0, 0, 0, 908, 909, 8, 0, 0, 0, 909, 256, 1, 0, 0, 0, 910, 911, 5, 92, 0, 0, 911, 912, 3, 255, 127, 0, 912, 258, 1, 0, 0, 0, 913, 917, 5, 91, 0, 0, 914, 916, 3, 261, 130, 0, 915, 914, 1, 0, 0, 0, 916, 919, 1, 0, 0, 0, 917, 915, 1, 0, 0, 0, 917, 918, 1, 0, 0, 0, 918, 920, 1, 0, 0, 0, 919, 917, 1, 0, 0, 0, 920, 921, 5, 93, 0, 0, 921, 260, 1, 0, 0, 0, 922, 925, 8, 18, 0, 0, 923, 925, 3, 257, 128, 0, 924, 922, 1, 0, 0, 0, 924, 923, 1, 0, 0, 0, 925, 262, 1, 0, 0, 0, 35, 0, 414, 421, 425, 431, 434, 438, 440, 447, 454, 741, 748, 756, 760, 765, 775, 789, 800, 806, 812, 816, 835, 843, 856, 859, 863, 868, 873, 879, 889, 895, 901, 906, 917, 924, 1, 0, 1, 0];\nvar atn = new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.ATNDeserializer().deserialize(serializedATN);\nvar decisionsToDFA = atn.decisionToState.map(function (ds, index) {\n  return new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dfa.DFA(ds, index);\n});\nvar ECMAScriptLexer = /*#__PURE__*/function (_antlr4$Lexer) {\n  function ECMAScriptLexer(input) {\n    var _this;\n    _classCallCheck(this, ECMAScriptLexer);\n    _this = _callSuper(this, ECMAScriptLexer, [input]);\n    // A flag indicating if the lexer should operate in strict mode.\n    // When set to true, FutureReservedWords are tokenized, when false,\n    // an octal literal can be tokenized.\n    _defineProperty(_this, \"strictMode\", true);\n    // The most recently produced token.\n    _defineProperty(_this, \"lastToken\", null);\n    _this._interp = new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.LexerATNSimulator(_this, atn, decisionsToDFA, new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.PredictionContextCache());\n    return _this;\n  }\n  _inherits(ECMAScriptLexer, _antlr4$Lexer);\n  return _createClass(ECMAScriptLexer, [{\n    key: \"getStrictMode\",\n    value:\n    /**\r\n     * Returns {@code true} iff the lexer operates in strict mode.\r\n     *\r\n     * @return {@code true} iff the lexer operates in strict mode.\r\n     */\n    function getStrictMode() {\n      return this.strictMode;\n    }\n\n    /**\r\n     * Sets whether the lexer operates in strict mode or not.\r\n     *\r\n     * @param strictMode\r\n     *         the flag indicating the lexer operates in strict mode or not.\r\n     */\n  }, {\n    key: \"setStrictMode\",\n    value: function setStrictMode(strictMode) {\n      this.strictMode = strictMode;\n    }\n\n    /**\r\n     * Return the next token from the character stream and records this last\r\n     * token in case it resides on the default channel. This recorded token\r\n     * is used to determine when the lexer could possibly match a regex\r\n     * literal.\r\n     *\r\n     * @return the next token from the character stream.\r\n     */\n  }, {\n    key: \"nextToken\",\n    value: function nextToken() {\n      // Get the next token.\n      next = _get(_getPrototypeOf(ECMAScriptLexer.prototype), \"nextToken\", this).call(this);\n      if (next.getChannel() == Token.DEFAULT_CHANNEL) {\n        // Keep track of the last token on the default channel.\n        this.lastToken = next;\n      }\n      return next;\n    }\n\n    /**\r\n     * Returns {@code true} iff the lexer can match a regex literal.\r\n     *\r\n     * @return {@code true} iff the lexer can match a regex literal.\r\n     */\n  }, {\n    key: \"isRegexPossible\",\n    value: function isRegexPossible() {\n      if (this.lastToken == null) {\n        // No token has been produced yet: at the start of the input,\n        // no division is possible, so a regex literal _is_ possible.\n        return true;\n      }\n      switch (this.lastToken.getType()) {\n        case Identifier:\n        case NullLiteral:\n        case BooleanLiteral:\n        case This:\n        case CloseBracket:\n        case CloseParen:\n        case OctalIntegerLiteral:\n        case DecimalLiteral:\n        case HexIntegerLiteral:\n        case StringLiteral:\n        case PlusPlus:\n        case MinusMinus:\n          // After any of the tokens above, no regex literal can follow.\n          return false;\n        default:\n          // In all other cases, a regex literal _is_ possible.\n          return true;\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Lexer);\n_defineProperty(ECMAScriptLexer, \"grammarFileName\", \"ECMAScript.g4\");\n_defineProperty(ECMAScriptLexer, \"channelNames\", [\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\"]);\n_defineProperty(ECMAScriptLexer, \"modeNames\", [\"DEFAULT_MODE\"]);\n_defineProperty(ECMAScriptLexer, \"literalNames\", [null, null, null, \"'['\", \"']'\", \"'('\", \"')'\", \"'{'\", \"'}'\", \"';'\", \"','\", \"'='\", \"'?'\", \"':'\", \"'.'\", \"'++'\", \"'--'\", \"'+'\", \"'-'\", \"'~'\", \"'!'\", \"'*'\", \"'/'\", \"'%'\", \"'>>'\", \"'<<'\", \"'>>>'\", \"'<'\", \"'>'\", \"'<='\", \"'>='\", \"'=='\", \"'!='\", \"'==='\", \"'!=='\", \"'&'\", \"'^'\", \"'|'\", \"'&&'\", \"'||'\", \"'*='\", \"'/='\", \"'%='\", \"'+='\", \"'-='\", \"'<<='\", \"'>>='\", \"'>>>='\", \"'&='\", \"'^='\", \"'|='\", \"'null'\", null, null, null, null, \"'break'\", \"'do'\", \"'instanceof'\", \"'typeof'\", \"'case'\", \"'else'\", \"'new'\", \"'var'\", \"'catch'\", \"'finally'\", \"'return'\", \"'void'\", \"'continue'\", \"'for'\", \"'switch'\", \"'while'\", \"'debugger'\", \"'function'\", \"'this'\", \"'with'\", \"'default'\", \"'if'\", \"'throw'\", \"'delete'\", \"'in'\", \"'try'\", \"'class'\", \"'enum'\", \"'extends'\", \"'super'\", \"'const'\", \"'export'\", \"'import'\"]);\n_defineProperty(ECMAScriptLexer, \"symbolicNames\", [null, \"RegularExpressionLiteral\", \"LineTerminator\", \"OpenBracket\", \"CloseBracket\", \"OpenParen\", \"CloseParen\", \"OpenBrace\", \"CloseBrace\", \"SemiColon\", \"Comma\", \"Assign\", \"QuestionMark\", \"Colon\", \"Dot\", \"PlusPlus\", \"MinusMinus\", \"Plus\", \"Minus\", \"BitNot\", \"Not\", \"Multiply\", \"Divide\", \"Modulus\", \"RightShiftArithmetic\", \"LeftShiftArithmetic\", \"RightShiftLogical\", \"LessThan\", \"MoreThan\", \"LessThanEquals\", \"GreaterThanEquals\", \"Equals\", \"NotEquals\", \"IdentityEquals\", \"IdentityNotEquals\", \"BitAnd\", \"BitXOr\", \"BitOr\", \"And\", \"Or\", \"MultiplyAssign\", \"DivideAssign\", \"ModulusAssign\", \"PlusAssign\", \"MinusAssign\", \"LeftShiftArithmeticAssign\", \"RightShiftArithmeticAssign\", \"RightShiftLogicalAssign\", \"BitAndAssign\", \"BitXorAssign\", \"BitOrAssign\", \"NullLiteral\", \"BooleanLiteral\", \"DecimalLiteral\", \"HexIntegerLiteral\", \"OctalIntegerLiteral\", \"Break\", \"Do\", \"Instanceof\", \"Typeof\", \"Case\", \"Else\", \"New\", \"Var\", \"Catch\", \"Finally\", \"Return\", \"Void\", \"Continue\", \"For\", \"Switch\", \"While\", \"Debugger\", \"Function\", \"This\", \"With\", \"Default\", \"If\", \"Throw\", \"Delete\", \"In\", \"Try\", \"Class\", \"Enum\", \"Extends\", \"Super\", \"Const\", \"Export\", \"Import\", \"Implements\", \"Let\", \"Private\", \"Public\", \"Interface\", \"Package\", \"Protected\", \"Static\", \"Yield\", \"Identifier\", \"StringLiteral\", \"WhiteSpaces\", \"MultiLineComment\", \"SingleLineComment\", \"UnexpectedCharacter\"]);\n_defineProperty(ECMAScriptLexer, \"ruleNames\", [\"RegularExpressionLiteral\", \"LineTerminator\", \"OpenBracket\", \"CloseBracket\", \"OpenParen\", \"CloseParen\", \"OpenBrace\", \"CloseBrace\", \"SemiColon\", \"Comma\", \"Assign\", \"QuestionMark\", \"Colon\", \"Dot\", \"PlusPlus\", \"MinusMinus\", \"Plus\", \"Minus\", \"BitNot\", \"Not\", \"Multiply\", \"Divide\", \"Modulus\", \"RightShiftArithmetic\", \"LeftShiftArithmetic\", \"RightShiftLogical\", \"LessThan\", \"MoreThan\", \"LessThanEquals\", \"GreaterThanEquals\", \"Equals\", \"NotEquals\", \"IdentityEquals\", \"IdentityNotEquals\", \"BitAnd\", \"BitXOr\", \"BitOr\", \"And\", \"Or\", \"MultiplyAssign\", \"DivideAssign\", \"ModulusAssign\", \"PlusAssign\", \"MinusAssign\", \"LeftShiftArithmeticAssign\", \"RightShiftArithmeticAssign\", \"RightShiftLogicalAssign\", \"BitAndAssign\", \"BitXorAssign\", \"BitOrAssign\", \"NullLiteral\", \"BooleanLiteral\", \"DecimalLiteral\", \"HexIntegerLiteral\", \"OctalIntegerLiteral\", \"Break\", \"Do\", \"Instanceof\", \"Typeof\", \"Case\", \"Else\", \"New\", \"Var\", \"Catch\", \"Finally\", \"Return\", \"Void\", \"Continue\", \"For\", \"Switch\", \"While\", \"Debugger\", \"Function\", \"This\", \"With\", \"Default\", \"If\", \"Throw\", \"Delete\", \"In\", \"Try\", \"Class\", \"Enum\", \"Extends\", \"Super\", \"Const\", \"Export\", \"Import\", \"Implements\", \"Let\", \"Private\", \"Public\", \"Interface\", \"Package\", \"Protected\", \"Static\", \"Yield\", \"Identifier\", \"StringLiteral\", \"WhiteSpaces\", \"MultiLineComment\", \"SingleLineComment\", \"UnexpectedCharacter\", \"DoubleStringCharacter\", \"SingleStringCharacter\", \"EscapeSequence\", \"CharacterEscapeSequence\", \"HexEscapeSequence\", \"UnicodeEscapeSequence\", \"SingleEscapeCharacter\", \"NonEscapeCharacter\", \"EscapeCharacter\", \"LineContinuation\", \"LineTerminatorSequence\", \"DecimalDigit\", \"HexDigit\", \"OctalDigit\", \"DecimalIntegerLiteral\", \"ExponentPart\", \"IdentifierStart\", \"IdentifierPart\", \"ZWNJ\", \"ZWJ\", \"RegularExpressionBody\", \"RegularExpressionFlags\", \"RegularExpressionFirstChar\", \"RegularExpressionChar\", \"RegularExpressionNonTerminator\", \"RegularExpressionBackslashSequence\", \"RegularExpressionClass\", \"RegularExpressionClassChar\"]);\n\nECMAScriptLexer.EOF = antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Token.EOF;\nECMAScriptLexer.RegularExpressionLiteral = 1;\nECMAScriptLexer.LineTerminator = 2;\nECMAScriptLexer.OpenBracket = 3;\nECMAScriptLexer.CloseBracket = 4;\nECMAScriptLexer.OpenParen = 5;\nECMAScriptLexer.CloseParen = 6;\nECMAScriptLexer.OpenBrace = 7;\nECMAScriptLexer.CloseBrace = 8;\nECMAScriptLexer.SemiColon = 9;\nECMAScriptLexer.Comma = 10;\nECMAScriptLexer.Assign = 11;\nECMAScriptLexer.QuestionMark = 12;\nECMAScriptLexer.Colon = 13;\nECMAScriptLexer.Dot = 14;\nECMAScriptLexer.PlusPlus = 15;\nECMAScriptLexer.MinusMinus = 16;\nECMAScriptLexer.Plus = 17;\nECMAScriptLexer.Minus = 18;\nECMAScriptLexer.BitNot = 19;\nECMAScriptLexer.Not = 20;\nECMAScriptLexer.Multiply = 21;\nECMAScriptLexer.Divide = 22;\nECMAScriptLexer.Modulus = 23;\nECMAScriptLexer.RightShiftArithmetic = 24;\nECMAScriptLexer.LeftShiftArithmetic = 25;\nECMAScriptLexer.RightShiftLogical = 26;\nECMAScriptLexer.LessThan = 27;\nECMAScriptLexer.MoreThan = 28;\nECMAScriptLexer.LessThanEquals = 29;\nECMAScriptLexer.GreaterThanEquals = 30;\nECMAScriptLexer.Equals = 31;\nECMAScriptLexer.NotEquals = 32;\nECMAScriptLexer.IdentityEquals = 33;\nECMAScriptLexer.IdentityNotEquals = 34;\nECMAScriptLexer.BitAnd = 35;\nECMAScriptLexer.BitXOr = 36;\nECMAScriptLexer.BitOr = 37;\nECMAScriptLexer.And = 38;\nECMAScriptLexer.Or = 39;\nECMAScriptLexer.MultiplyAssign = 40;\nECMAScriptLexer.DivideAssign = 41;\nECMAScriptLexer.ModulusAssign = 42;\nECMAScriptLexer.PlusAssign = 43;\nECMAScriptLexer.MinusAssign = 44;\nECMAScriptLexer.LeftShiftArithmeticAssign = 45;\nECMAScriptLexer.RightShiftArithmeticAssign = 46;\nECMAScriptLexer.RightShiftLogicalAssign = 47;\nECMAScriptLexer.BitAndAssign = 48;\nECMAScriptLexer.BitXorAssign = 49;\nECMAScriptLexer.BitOrAssign = 50;\nECMAScriptLexer.NullLiteral = 51;\nECMAScriptLexer.BooleanLiteral = 52;\nECMAScriptLexer.DecimalLiteral = 53;\nECMAScriptLexer.HexIntegerLiteral = 54;\nECMAScriptLexer.OctalIntegerLiteral = 55;\nECMAScriptLexer.Break = 56;\nECMAScriptLexer.Do = 57;\nECMAScriptLexer.Instanceof = 58;\nECMAScriptLexer.Typeof = 59;\nECMAScriptLexer.Case = 60;\nECMAScriptLexer.Else = 61;\nECMAScriptLexer.New = 62;\nECMAScriptLexer.Var = 63;\nECMAScriptLexer.Catch = 64;\nECMAScriptLexer.Finally = 65;\nECMAScriptLexer.Return = 66;\nECMAScriptLexer.Void = 67;\nECMAScriptLexer.Continue = 68;\nECMAScriptLexer.For = 69;\nECMAScriptLexer.Switch = 70;\nECMAScriptLexer.While = 71;\nECMAScriptLexer.Debugger = 72;\nECMAScriptLexer.Function = 73;\nECMAScriptLexer.This = 74;\nECMAScriptLexer.With = 75;\nECMAScriptLexer.Default = 76;\nECMAScriptLexer.If = 77;\nECMAScriptLexer.Throw = 78;\nECMAScriptLexer.Delete = 79;\nECMAScriptLexer.In = 80;\nECMAScriptLexer.Try = 81;\nECMAScriptLexer.Class = 82;\nECMAScriptLexer.Enum = 83;\nECMAScriptLexer.Extends = 84;\nECMAScriptLexer.Super = 85;\nECMAScriptLexer.Const = 86;\nECMAScriptLexer.Export = 87;\nECMAScriptLexer.Import = 88;\nECMAScriptLexer.Implements = 89;\nECMAScriptLexer.Let = 90;\nECMAScriptLexer.Private = 91;\nECMAScriptLexer.Public = 92;\nECMAScriptLexer.Interface = 93;\nECMAScriptLexer.Package = 94;\nECMAScriptLexer.Protected = 95;\nECMAScriptLexer.Static = 96;\nECMAScriptLexer.Yield = 97;\nECMAScriptLexer.Identifier = 98;\nECMAScriptLexer.StringLiteral = 99;\nECMAScriptLexer.WhiteSpaces = 100;\nECMAScriptLexer.MultiLineComment = 101;\nECMAScriptLexer.SingleLineComment = 102;\nECMAScriptLexer.UnexpectedCharacter = 103;\nECMAScriptLexer.prototype.sempred = function (localctx, ruleIndex, predIndex) {\n  switch (ruleIndex) {\n    case 0:\n      return this.RegularExpressionLiteral_sempred(localctx, predIndex);\n    case 54:\n      return this.OctalIntegerLiteral_sempred(localctx, predIndex);\n    case 88:\n      return this.Implements_sempred(localctx, predIndex);\n    case 89:\n      return this.Let_sempred(localctx, predIndex);\n    case 90:\n      return this.Private_sempred(localctx, predIndex);\n    case 91:\n      return this.Public_sempred(localctx, predIndex);\n    case 92:\n      return this.Interface_sempred(localctx, predIndex);\n    case 93:\n      return this.Package_sempred(localctx, predIndex);\n    case 94:\n      return this.Protected_sempred(localctx, predIndex);\n    case 95:\n      return this.Static_sempred(localctx, predIndex);\n    case 96:\n      return this.Yield_sempred(localctx, predIndex);\n    default:\n      throw \"No registered predicate for:\" + ruleIndex;\n  }\n};\nECMAScriptLexer.prototype.RegularExpressionLiteral_sempred = function (localctx, predIndex) {\n  switch (predIndex) {\n    case 0:\n      return isRegexPossible();\n    default:\n      throw \"No predicate with index:\" + predIndex;\n  }\n};\nECMAScriptLexer.prototype.OctalIntegerLiteral_sempred = function (localctx, predIndex) {\n  switch (predIndex) {\n    case 1:\n      return !strictMode;\n    default:\n      throw \"No predicate with index:\" + predIndex;\n  }\n};\nECMAScriptLexer.prototype.Implements_sempred = function (localctx, predIndex) {\n  switch (predIndex) {\n    case 2:\n      return strictMode;\n    default:\n      throw \"No predicate with index:\" + predIndex;\n  }\n};\nECMAScriptLexer.prototype.Let_sempred = function (localctx, predIndex) {\n  switch (predIndex) {\n    case 3:\n      return strictMode;\n    default:\n      throw \"No predicate with index:\" + predIndex;\n  }\n};\nECMAScriptLexer.prototype.Private_sempred = function (localctx, predIndex) {\n  switch (predIndex) {\n    case 4:\n      return strictMode;\n    default:\n      throw \"No predicate with index:\" + predIndex;\n  }\n};\nECMAScriptLexer.prototype.Public_sempred = function (localctx, predIndex) {\n  switch (predIndex) {\n    case 5:\n      return strictMode;\n    default:\n      throw \"No predicate with index:\" + predIndex;\n  }\n};\nECMAScriptLexer.prototype.Interface_sempred = function (localctx, predIndex) {\n  switch (predIndex) {\n    case 6:\n      return strictMode;\n    default:\n      throw \"No predicate with index:\" + predIndex;\n  }\n};\nECMAScriptLexer.prototype.Package_sempred = function (localctx, predIndex) {\n  switch (predIndex) {\n    case 7:\n      return strictMode;\n    default:\n      throw \"No predicate with index:\" + predIndex;\n  }\n};\nECMAScriptLexer.prototype.Protected_sempred = function (localctx, predIndex) {\n  switch (predIndex) {\n    case 8:\n      return strictMode;\n    default:\n      throw \"No predicate with index:\" + predIndex;\n  }\n};\nECMAScriptLexer.prototype.Static_sempred = function (localctx, predIndex) {\n  switch (predIndex) {\n    case 9:\n      return strictMode;\n    default:\n      throw \"No predicate with index:\" + predIndex;\n  }\n};\nECMAScriptLexer.prototype.Yield_sempred = function (localctx, predIndex) {\n  switch (predIndex) {\n    case 10:\n      return strictMode;\n    default:\n      throw \"No predicate with index:\" + predIndex;\n  }\n};\n\n//# sourceURL=webpack://my-webpack-project/./grammars/out/ECMAScriptLexer.js?");

/***/ }),

/***/ "./grammars/out/ECMAScriptListener.js":
/*!********************************************!*\
  !*** ./grammars/out/ECMAScriptListener.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ECMAScriptListener)\n/* harmony export */ });\n/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/dist/antlr4.web.mjs\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n// Generated from ./ECMAScript.g4 by ANTLR 4.13.1\n// jshint ignore: start\n\n\n// This class defines a complete listener for a parse tree produced by ECMAScriptParser.\nvar ECMAScriptListener = /*#__PURE__*/function (_antlr4$tree$ParseTre) {\n  function ECMAScriptListener() {\n    _classCallCheck(this, ECMAScriptListener);\n    return _callSuper(this, ECMAScriptListener, arguments);\n  }\n  _inherits(ECMAScriptListener, _antlr4$tree$ParseTre);\n  return _createClass(ECMAScriptListener, [{\n    key: \"enterProgram\",\n    value:\n    // Enter a parse tree produced by ECMAScriptParser#program.\n    function enterProgram(ctx) {\n      console.log(\"Narayan Program Started\");\n    }\n\n    // Exit a parse tree produced by ECMAScriptParser#program.\n  }, {\n    key: \"exitProgram\",\n    value: function exitProgram(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#sourceElements.\n  }, {\n    key: \"enterSourceElements\",\n    value: function enterSourceElements(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#sourceElements.\n  }, {\n    key: \"exitSourceElements\",\n    value: function exitSourceElements(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#sourceElement.\n  }, {\n    key: \"enterSourceElement\",\n    value: function enterSourceElement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#sourceElement.\n  }, {\n    key: \"exitSourceElement\",\n    value: function exitSourceElement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#statement.\n  }, {\n    key: \"enterStatement\",\n    value: function enterStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#statement.\n  }, {\n    key: \"exitStatement\",\n    value: function exitStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#block.\n  }, {\n    key: \"enterBlock\",\n    value: function enterBlock(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#block.\n  }, {\n    key: \"exitBlock\",\n    value: function exitBlock(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#statementList.\n  }, {\n    key: \"enterStatementList\",\n    value: function enterStatementList(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#statementList.\n  }, {\n    key: \"exitStatementList\",\n    value: function exitStatementList(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#variableStatement.\n  }, {\n    key: \"enterVariableStatement\",\n    value: function enterVariableStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#variableStatement.\n  }, {\n    key: \"exitVariableStatement\",\n    value: function exitVariableStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#variableDeclarationList.\n  }, {\n    key: \"enterVariableDeclarationList\",\n    value: function enterVariableDeclarationList(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#variableDeclarationList.\n  }, {\n    key: \"exitVariableDeclarationList\",\n    value: function exitVariableDeclarationList(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#variableDeclaration.\n  }, {\n    key: \"enterVariableDeclaration\",\n    value: function enterVariableDeclaration(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#variableDeclaration.\n  }, {\n    key: \"exitVariableDeclaration\",\n    value: function exitVariableDeclaration(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#initialiser.\n  }, {\n    key: \"enterInitialiser\",\n    value: function enterInitialiser(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#initialiser.\n  }, {\n    key: \"exitInitialiser\",\n    value: function exitInitialiser(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#emptyStatement_.\n  }, {\n    key: \"enterEmptyStatement_\",\n    value: function enterEmptyStatement_(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#emptyStatement_.\n  }, {\n    key: \"exitEmptyStatement_\",\n    value: function exitEmptyStatement_(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#expressionStatement.\n  }, {\n    key: \"enterExpressionStatement\",\n    value: function enterExpressionStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#expressionStatement.\n  }, {\n    key: \"exitExpressionStatement\",\n    value: function exitExpressionStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#ifStatement.\n  }, {\n    key: \"enterIfStatement\",\n    value: function enterIfStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#ifStatement.\n  }, {\n    key: \"exitIfStatement\",\n    value: function exitIfStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#DoStatement.\n  }, {\n    key: \"enterDoStatement\",\n    value: function enterDoStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#DoStatement.\n  }, {\n    key: \"exitDoStatement\",\n    value: function exitDoStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#WhileStatement.\n  }, {\n    key: \"enterWhileStatement\",\n    value: function enterWhileStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#WhileStatement.\n  }, {\n    key: \"exitWhileStatement\",\n    value: function exitWhileStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#ForStatement.\n  }, {\n    key: \"enterForStatement\",\n    value: function enterForStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#ForStatement.\n  }, {\n    key: \"exitForStatement\",\n    value: function exitForStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#ForVarStatement.\n  }, {\n    key: \"enterForVarStatement\",\n    value: function enterForVarStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#ForVarStatement.\n  }, {\n    key: \"exitForVarStatement\",\n    value: function exitForVarStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#ForInStatement.\n  }, {\n    key: \"enterForInStatement\",\n    value: function enterForInStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#ForInStatement.\n  }, {\n    key: \"exitForInStatement\",\n    value: function exitForInStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#ForVarInStatement.\n  }, {\n    key: \"enterForVarInStatement\",\n    value: function enterForVarInStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#ForVarInStatement.\n  }, {\n    key: \"exitForVarInStatement\",\n    value: function exitForVarInStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#continueStatement.\n  }, {\n    key: \"enterContinueStatement\",\n    value: function enterContinueStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#continueStatement.\n  }, {\n    key: \"exitContinueStatement\",\n    value: function exitContinueStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#breakStatement.\n  }, {\n    key: \"enterBreakStatement\",\n    value: function enterBreakStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#breakStatement.\n  }, {\n    key: \"exitBreakStatement\",\n    value: function exitBreakStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#returnStatement.\n  }, {\n    key: \"enterReturnStatement\",\n    value: function enterReturnStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#returnStatement.\n  }, {\n    key: \"exitReturnStatement\",\n    value: function exitReturnStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#withStatement.\n  }, {\n    key: \"enterWithStatement\",\n    value: function enterWithStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#withStatement.\n  }, {\n    key: \"exitWithStatement\",\n    value: function exitWithStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#switchStatement.\n  }, {\n    key: \"enterSwitchStatement\",\n    value: function enterSwitchStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#switchStatement.\n  }, {\n    key: \"exitSwitchStatement\",\n    value: function exitSwitchStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#caseBlock.\n  }, {\n    key: \"enterCaseBlock\",\n    value: function enterCaseBlock(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#caseBlock.\n  }, {\n    key: \"exitCaseBlock\",\n    value: function exitCaseBlock(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#caseClauses.\n  }, {\n    key: \"enterCaseClauses\",\n    value: function enterCaseClauses(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#caseClauses.\n  }, {\n    key: \"exitCaseClauses\",\n    value: function exitCaseClauses(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#caseClause.\n  }, {\n    key: \"enterCaseClause\",\n    value: function enterCaseClause(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#caseClause.\n  }, {\n    key: \"exitCaseClause\",\n    value: function exitCaseClause(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#defaultClause.\n  }, {\n    key: \"enterDefaultClause\",\n    value: function enterDefaultClause(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#defaultClause.\n  }, {\n    key: \"exitDefaultClause\",\n    value: function exitDefaultClause(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#labelledStatement.\n  }, {\n    key: \"enterLabelledStatement\",\n    value: function enterLabelledStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#labelledStatement.\n  }, {\n    key: \"exitLabelledStatement\",\n    value: function exitLabelledStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#throwStatement.\n  }, {\n    key: \"enterThrowStatement\",\n    value: function enterThrowStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#throwStatement.\n  }, {\n    key: \"exitThrowStatement\",\n    value: function exitThrowStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#tryStatement.\n  }, {\n    key: \"enterTryStatement\",\n    value: function enterTryStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#tryStatement.\n  }, {\n    key: \"exitTryStatement\",\n    value: function exitTryStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#catchProduction.\n  }, {\n    key: \"enterCatchProduction\",\n    value: function enterCatchProduction(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#catchProduction.\n  }, {\n    key: \"exitCatchProduction\",\n    value: function exitCatchProduction(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#finallyProduction.\n  }, {\n    key: \"enterFinallyProduction\",\n    value: function enterFinallyProduction(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#finallyProduction.\n  }, {\n    key: \"exitFinallyProduction\",\n    value: function exitFinallyProduction(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#debuggerStatement.\n  }, {\n    key: \"enterDebuggerStatement\",\n    value: function enterDebuggerStatement(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#debuggerStatement.\n  }, {\n    key: \"exitDebuggerStatement\",\n    value: function exitDebuggerStatement(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#functionDeclaration.\n  }, {\n    key: \"enterFunctionDeclaration\",\n    value: function enterFunctionDeclaration(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#functionDeclaration.\n  }, {\n    key: \"exitFunctionDeclaration\",\n    value: function exitFunctionDeclaration(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#formalParameterList.\n  }, {\n    key: \"enterFormalParameterList\",\n    value: function enterFormalParameterList(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#formalParameterList.\n  }, {\n    key: \"exitFormalParameterList\",\n    value: function exitFormalParameterList(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#functionBody.\n  }, {\n    key: \"enterFunctionBody\",\n    value: function enterFunctionBody(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#functionBody.\n  }, {\n    key: \"exitFunctionBody\",\n    value: function exitFunctionBody(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#arrayLiteral.\n  }, {\n    key: \"enterArrayLiteral\",\n    value: function enterArrayLiteral(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#arrayLiteral.\n  }, {\n    key: \"exitArrayLiteral\",\n    value: function exitArrayLiteral(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#elementList.\n  }, {\n    key: \"enterElementList\",\n    value: function enterElementList(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#elementList.\n  }, {\n    key: \"exitElementList\",\n    value: function exitElementList(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#elision.\n  }, {\n    key: \"enterElision\",\n    value: function enterElision(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#elision.\n  }, {\n    key: \"exitElision\",\n    value: function exitElision(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#objectLiteral.\n  }, {\n    key: \"enterObjectLiteral\",\n    value: function enterObjectLiteral(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#objectLiteral.\n  }, {\n    key: \"exitObjectLiteral\",\n    value: function exitObjectLiteral(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#propertyNameAndValueList.\n  }, {\n    key: \"enterPropertyNameAndValueList\",\n    value: function enterPropertyNameAndValueList(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#propertyNameAndValueList.\n  }, {\n    key: \"exitPropertyNameAndValueList\",\n    value: function exitPropertyNameAndValueList(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#PropertyExpressionAssignment.\n  }, {\n    key: \"enterPropertyExpressionAssignment\",\n    value: function enterPropertyExpressionAssignment(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#PropertyExpressionAssignment.\n  }, {\n    key: \"exitPropertyExpressionAssignment\",\n    value: function exitPropertyExpressionAssignment(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#PropertyGetter.\n  }, {\n    key: \"enterPropertyGetter\",\n    value: function enterPropertyGetter(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#PropertyGetter.\n  }, {\n    key: \"exitPropertyGetter\",\n    value: function exitPropertyGetter(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#PropertySetter.\n  }, {\n    key: \"enterPropertySetter\",\n    value: function enterPropertySetter(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#PropertySetter.\n  }, {\n    key: \"exitPropertySetter\",\n    value: function exitPropertySetter(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#propertyName.\n  }, {\n    key: \"enterPropertyName\",\n    value: function enterPropertyName(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#propertyName.\n  }, {\n    key: \"exitPropertyName\",\n    value: function exitPropertyName(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#propertySetParameterList.\n  }, {\n    key: \"enterPropertySetParameterList\",\n    value: function enterPropertySetParameterList(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#propertySetParameterList.\n  }, {\n    key: \"exitPropertySetParameterList\",\n    value: function exitPropertySetParameterList(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#arguments.\n  }, {\n    key: \"enterArguments\",\n    value: function enterArguments(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#arguments.\n  }, {\n    key: \"exitArguments\",\n    value: function exitArguments(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#argumentList.\n  }, {\n    key: \"enterArgumentList\",\n    value: function enterArgumentList(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#argumentList.\n  }, {\n    key: \"exitArgumentList\",\n    value: function exitArgumentList(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#expressionSequence.\n  }, {\n    key: \"enterExpressionSequence\",\n    value: function enterExpressionSequence(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#expressionSequence.\n  }, {\n    key: \"exitExpressionSequence\",\n    value: function exitExpressionSequence(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#TernaryExpression.\n  }, {\n    key: \"enterTernaryExpression\",\n    value: function enterTernaryExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#TernaryExpression.\n  }, {\n    key: \"exitTernaryExpression\",\n    value: function exitTernaryExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#LogicalAndExpression.\n  }, {\n    key: \"enterLogicalAndExpression\",\n    value: function enterLogicalAndExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#LogicalAndExpression.\n  }, {\n    key: \"exitLogicalAndExpression\",\n    value: function exitLogicalAndExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#PreIncrementExpression.\n  }, {\n    key: \"enterPreIncrementExpression\",\n    value: function enterPreIncrementExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#PreIncrementExpression.\n  }, {\n    key: \"exitPreIncrementExpression\",\n    value: function exitPreIncrementExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#ObjectLiteralExpression.\n  }, {\n    key: \"enterObjectLiteralExpression\",\n    value: function enterObjectLiteralExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#ObjectLiteralExpression.\n  }, {\n    key: \"exitObjectLiteralExpression\",\n    value: function exitObjectLiteralExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#InExpression.\n  }, {\n    key: \"enterInExpression\",\n    value: function enterInExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#InExpression.\n  }, {\n    key: \"exitInExpression\",\n    value: function exitInExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#LogicalOrExpression.\n  }, {\n    key: \"enterLogicalOrExpression\",\n    value: function enterLogicalOrExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#LogicalOrExpression.\n  }, {\n    key: \"exitLogicalOrExpression\",\n    value: function exitLogicalOrExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#NotExpression.\n  }, {\n    key: \"enterNotExpression\",\n    value: function enterNotExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#NotExpression.\n  }, {\n    key: \"exitNotExpression\",\n    value: function exitNotExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#PreDecreaseExpression.\n  }, {\n    key: \"enterPreDecreaseExpression\",\n    value: function enterPreDecreaseExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#PreDecreaseExpression.\n  }, {\n    key: \"exitPreDecreaseExpression\",\n    value: function exitPreDecreaseExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#ArgumentsExpression.\n  }, {\n    key: \"enterArgumentsExpression\",\n    value: function enterArgumentsExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#ArgumentsExpression.\n  }, {\n    key: \"exitArgumentsExpression\",\n    value: function exitArgumentsExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#ThisExpression.\n  }, {\n    key: \"enterThisExpression\",\n    value: function enterThisExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#ThisExpression.\n  }, {\n    key: \"exitThisExpression\",\n    value: function exitThisExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#FunctionExpression.\n  }, {\n    key: \"enterFunctionExpression\",\n    value: function enterFunctionExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#FunctionExpression.\n  }, {\n    key: \"exitFunctionExpression\",\n    value: function exitFunctionExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#UnaryMinusExpression.\n  }, {\n    key: \"enterUnaryMinusExpression\",\n    value: function enterUnaryMinusExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#UnaryMinusExpression.\n  }, {\n    key: \"exitUnaryMinusExpression\",\n    value: function exitUnaryMinusExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#AssignmentExpression.\n  }, {\n    key: \"enterAssignmentExpression\",\n    value: function enterAssignmentExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#AssignmentExpression.\n  }, {\n    key: \"exitAssignmentExpression\",\n    value: function exitAssignmentExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#PostDecreaseExpression.\n  }, {\n    key: \"enterPostDecreaseExpression\",\n    value: function enterPostDecreaseExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#PostDecreaseExpression.\n  }, {\n    key: \"exitPostDecreaseExpression\",\n    value: function exitPostDecreaseExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#TypeofExpression.\n  }, {\n    key: \"enterTypeofExpression\",\n    value: function enterTypeofExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#TypeofExpression.\n  }, {\n    key: \"exitTypeofExpression\",\n    value: function exitTypeofExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#InstanceofExpression.\n  }, {\n    key: \"enterInstanceofExpression\",\n    value: function enterInstanceofExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#InstanceofExpression.\n  }, {\n    key: \"exitInstanceofExpression\",\n    value: function exitInstanceofExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#UnaryPlusExpression.\n  }, {\n    key: \"enterUnaryPlusExpression\",\n    value: function enterUnaryPlusExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#UnaryPlusExpression.\n  }, {\n    key: \"exitUnaryPlusExpression\",\n    value: function exitUnaryPlusExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#DeleteExpression.\n  }, {\n    key: \"enterDeleteExpression\",\n    value: function enterDeleteExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#DeleteExpression.\n  }, {\n    key: \"exitDeleteExpression\",\n    value: function exitDeleteExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#EqualityExpression.\n  }, {\n    key: \"enterEqualityExpression\",\n    value: function enterEqualityExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#EqualityExpression.\n  }, {\n    key: \"exitEqualityExpression\",\n    value: function exitEqualityExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#BitXOrExpression.\n  }, {\n    key: \"enterBitXOrExpression\",\n    value: function enterBitXOrExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#BitXOrExpression.\n  }, {\n    key: \"exitBitXOrExpression\",\n    value: function exitBitXOrExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#MultiplicativeExpression.\n  }, {\n    key: \"enterMultiplicativeExpression\",\n    value: function enterMultiplicativeExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#MultiplicativeExpression.\n  }, {\n    key: \"exitMultiplicativeExpression\",\n    value: function exitMultiplicativeExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#BitShiftExpression.\n  }, {\n    key: \"enterBitShiftExpression\",\n    value: function enterBitShiftExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#BitShiftExpression.\n  }, {\n    key: \"exitBitShiftExpression\",\n    value: function exitBitShiftExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#ParenthesizedExpression.\n  }, {\n    key: \"enterParenthesizedExpression\",\n    value: function enterParenthesizedExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#ParenthesizedExpression.\n  }, {\n    key: \"exitParenthesizedExpression\",\n    value: function exitParenthesizedExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#AdditiveExpression.\n  }, {\n    key: \"enterAdditiveExpression\",\n    value: function enterAdditiveExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#AdditiveExpression.\n  }, {\n    key: \"exitAdditiveExpression\",\n    value: function exitAdditiveExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#RelationalExpression.\n  }, {\n    key: \"enterRelationalExpression\",\n    value: function enterRelationalExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#RelationalExpression.\n  }, {\n    key: \"exitRelationalExpression\",\n    value: function exitRelationalExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#PostIncrementExpression.\n  }, {\n    key: \"enterPostIncrementExpression\",\n    value: function enterPostIncrementExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#PostIncrementExpression.\n  }, {\n    key: \"exitPostIncrementExpression\",\n    value: function exitPostIncrementExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#BitNotExpression.\n  }, {\n    key: \"enterBitNotExpression\",\n    value: function enterBitNotExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#BitNotExpression.\n  }, {\n    key: \"exitBitNotExpression\",\n    value: function exitBitNotExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#NewExpression.\n  }, {\n    key: \"enterNewExpression\",\n    value: function enterNewExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#NewExpression.\n  }, {\n    key: \"exitNewExpression\",\n    value: function exitNewExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#LiteralExpression.\n  }, {\n    key: \"enterLiteralExpression\",\n    value: function enterLiteralExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#LiteralExpression.\n  }, {\n    key: \"exitLiteralExpression\",\n    value: function exitLiteralExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#ArrayLiteralExpression.\n  }, {\n    key: \"enterArrayLiteralExpression\",\n    value: function enterArrayLiteralExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#ArrayLiteralExpression.\n  }, {\n    key: \"exitArrayLiteralExpression\",\n    value: function exitArrayLiteralExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#MemberDotExpression.\n  }, {\n    key: \"enterMemberDotExpression\",\n    value: function enterMemberDotExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#MemberDotExpression.\n  }, {\n    key: \"exitMemberDotExpression\",\n    value: function exitMemberDotExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#MemberIndexExpression.\n  }, {\n    key: \"enterMemberIndexExpression\",\n    value: function enterMemberIndexExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#MemberIndexExpression.\n  }, {\n    key: \"exitMemberIndexExpression\",\n    value: function exitMemberIndexExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#IdentifierExpression.\n  }, {\n    key: \"enterIdentifierExpression\",\n    value: function enterIdentifierExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#IdentifierExpression.\n  }, {\n    key: \"exitIdentifierExpression\",\n    value: function exitIdentifierExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#BitAndExpression.\n  }, {\n    key: \"enterBitAndExpression\",\n    value: function enterBitAndExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#BitAndExpression.\n  }, {\n    key: \"exitBitAndExpression\",\n    value: function exitBitAndExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#BitOrExpression.\n  }, {\n    key: \"enterBitOrExpression\",\n    value: function enterBitOrExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#BitOrExpression.\n  }, {\n    key: \"exitBitOrExpression\",\n    value: function exitBitOrExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#AssignmentOperatorExpression.\n  }, {\n    key: \"enterAssignmentOperatorExpression\",\n    value: function enterAssignmentOperatorExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#AssignmentOperatorExpression.\n  }, {\n    key: \"exitAssignmentOperatorExpression\",\n    value: function exitAssignmentOperatorExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#VoidExpression.\n  }, {\n    key: \"enterVoidExpression\",\n    value: function enterVoidExpression(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#VoidExpression.\n  }, {\n    key: \"exitVoidExpression\",\n    value: function exitVoidExpression(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#assignmentOperator.\n  }, {\n    key: \"enterAssignmentOperator\",\n    value: function enterAssignmentOperator(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#assignmentOperator.\n  }, {\n    key: \"exitAssignmentOperator\",\n    value: function exitAssignmentOperator(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#literal.\n  }, {\n    key: \"enterLiteral\",\n    value: function enterLiteral(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#literal.\n  }, {\n    key: \"exitLiteral\",\n    value: function exitLiteral(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#numericLiteral.\n  }, {\n    key: \"enterNumericLiteral\",\n    value: function enterNumericLiteral(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#numericLiteral.\n  }, {\n    key: \"exitNumericLiteral\",\n    value: function exitNumericLiteral(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#identifierName.\n  }, {\n    key: \"enterIdentifierName\",\n    value: function enterIdentifierName(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#identifierName.\n  }, {\n    key: \"exitIdentifierName\",\n    value: function exitIdentifierName(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#reservedWord.\n  }, {\n    key: \"enterReservedWord\",\n    value: function enterReservedWord(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#reservedWord.\n  }, {\n    key: \"exitReservedWord\",\n    value: function exitReservedWord(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#keyword.\n  }, {\n    key: \"enterKeyword\",\n    value: function enterKeyword(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#keyword.\n  }, {\n    key: \"exitKeyword\",\n    value: function exitKeyword(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#futureReservedWord.\n  }, {\n    key: \"enterFutureReservedWord\",\n    value: function enterFutureReservedWord(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#futureReservedWord.\n  }, {\n    key: \"exitFutureReservedWord\",\n    value: function exitFutureReservedWord(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#getter.\n  }, {\n    key: \"enterGetter\",\n    value: function enterGetter(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#getter.\n  }, {\n    key: \"exitGetter\",\n    value: function exitGetter(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#setter.\n  }, {\n    key: \"enterSetter\",\n    value: function enterSetter(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#setter.\n  }, {\n    key: \"exitSetter\",\n    value: function exitSetter(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#eos.\n  }, {\n    key: \"enterEos\",\n    value: function enterEos(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#eos.\n  }, {\n    key: \"exitEos\",\n    value: function exitEos(ctx) {}\n\n    // Enter a parse tree produced by ECMAScriptParser#eof.\n  }, {\n    key: \"enterEof\",\n    value: function enterEof(ctx) {}\n\n    // Exit a parse tree produced by ECMAScriptParser#eof.\n  }, {\n    key: \"exitEof\",\n    value: function exitEof(ctx) {}\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tree.ParseTreeListener);\n\n\n//# sourceURL=webpack://my-webpack-project/./grammars/out/ECMAScriptListener.js?");

/***/ }),

/***/ "./grammars/out/ECMAScriptParser.js":
/*!******************************************!*\
  !*** ./grammars/out/ECMAScriptParser.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ECMAScriptParser)\n/* harmony export */ });\n/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/dist/antlr4.web.mjs\");\n/* harmony import */ var _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ECMAScriptListener.js */ \"./grammars/out/ECMAScriptListener.js\");\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n// Generated from ./ECMAScript.g4 by ANTLR 4.13.1\n// jshint ignore: start\n\n\nvar serializedATN = [4, 1, 103, 625, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 1, 0, 3, 0, 112, 8, 0, 1, 0, 1, 0, 1, 1, 4, 1, 117, 8, 1, 11, 1, 12, 1, 118, 1, 2, 1, 2, 1, 2, 3, 2, 124, 8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 142, 8, 3, 1, 4, 1, 4, 3, 4, 146, 8, 4, 1, 4, 1, 4, 1, 5, 4, 5, 151, 8, 5, 11, 5, 12, 5, 152, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 5, 7, 162, 8, 7, 10, 7, 12, 7, 165, 9, 7, 1, 8, 1, 8, 3, 8, 169, 8, 8, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 186, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 205, 8, 13, 1, 13, 1, 13, 3, 13, 209, 8, 13, 1, 13, 1, 13, 3, 13, 213, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 223, 8, 13, 1, 13, 1, 13, 3, 13, 227, 8, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 249, 8, 13, 1, 14, 1, 14, 1, 14, 3, 14, 254, 8, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 3, 15, 261, 8, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 3, 16, 268, 8, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 3, 19, 286, 8, 19, 1, 19, 1, 19, 3, 19, 290, 8, 19, 3, 19, 292, 8, 19, 1, 19, 1, 19, 1, 20, 4, 20, 297, 8, 20, 11, 20, 12, 20, 298, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 305, 8, 21, 1, 22, 1, 22, 1, 22, 3, 22, 310, 8, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 3, 25, 334, 8, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 352, 8, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 5, 30, 362, 8, 30, 10, 30, 12, 30, 365, 9, 30, 1, 31, 3, 31, 368, 8, 31, 1, 32, 1, 32, 3, 32, 372, 8, 32, 1, 32, 3, 32, 375, 8, 32, 1, 32, 3, 32, 378, 8, 32, 1, 32, 1, 32, 1, 33, 3, 33, 383, 8, 33, 1, 33, 1, 33, 1, 33, 3, 33, 388, 8, 33, 1, 33, 5, 33, 391, 8, 33, 10, 33, 12, 33, 394, 9, 33, 1, 34, 4, 34, 397, 8, 34, 11, 34, 12, 34, 398, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 3, 35, 406, 8, 35, 1, 35, 1, 35, 3, 35, 410, 8, 35, 1, 36, 1, 36, 1, 36, 5, 36, 415, 8, 36, 10, 36, 12, 36, 418, 9, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 3, 37, 439, 8, 37, 1, 38, 1, 38, 1, 38, 3, 38, 444, 8, 38, 1, 39, 1, 39, 1, 40, 1, 40, 3, 40, 450, 8, 40, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 5, 41, 457, 8, 41, 10, 41, 12, 41, 460, 9, 41, 1, 42, 1, 42, 1, 42, 5, 42, 465, 8, 42, 10, 42, 12, 42, 468, 9, 42, 1, 43, 1, 43, 1, 43, 3, 43, 473, 8, 43, 1, 43, 1, 43, 3, 43, 477, 8, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 487, 8, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 3, 43, 516, 8, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 1, 43, 5, 43, 583, 8, 43, 10, 43, 12, 43, 586, 9, 43, 1, 44, 1, 44, 1, 45, 1, 45, 3, 45, 592, 8, 45, 1, 46, 1, 46, 1, 47, 1, 47, 3, 47, 598, 8, 47, 1, 48, 1, 48, 1, 48, 3, 48, 603, 8, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53, 621, 8, 53, 1, 54, 1, 54, 1, 54, 0, 1, 86, 55, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 0, 11, 1, 0, 21, 23, 1, 0, 17, 18, 1, 0, 24, 26, 1, 0, 27, 30, 1, 0, 31, 34, 1, 0, 40, 50, 3, 0, 1, 1, 51, 52, 99, 99, 1, 0, 53, 55, 1, 0, 51, 52, 1, 0, 56, 81, 1, 0, 82, 97, 678, 0, 111, 1, 0, 0, 0, 2, 116, 1, 0, 0, 0, 4, 123, 1, 0, 0, 0, 6, 141, 1, 0, 0, 0, 8, 143, 1, 0, 0, 0, 10, 150, 1, 0, 0, 0, 12, 154, 1, 0, 0, 0, 14, 158, 1, 0, 0, 0, 16, 166, 1, 0, 0, 0, 18, 170, 1, 0, 0, 0, 20, 173, 1, 0, 0, 0, 22, 175, 1, 0, 0, 0, 24, 178, 1, 0, 0, 0, 26, 248, 1, 0, 0, 0, 28, 250, 1, 0, 0, 0, 30, 257, 1, 0, 0, 0, 32, 264, 1, 0, 0, 0, 34, 271, 1, 0, 0, 0, 36, 277, 1, 0, 0, 0, 38, 283, 1, 0, 0, 0, 40, 296, 1, 0, 0, 0, 42, 300, 1, 0, 0, 0, 44, 306, 1, 0, 0, 0, 46, 311, 1, 0, 0, 0, 48, 315, 1, 0, 0, 0, 50, 333, 1, 0, 0, 0, 52, 335, 1, 0, 0, 0, 54, 341, 1, 0, 0, 0, 56, 344, 1, 0, 0, 0, 58, 347, 1, 0, 0, 0, 60, 358, 1, 0, 0, 0, 62, 367, 1, 0, 0, 0, 64, 369, 1, 0, 0, 0, 66, 382, 1, 0, 0, 0, 68, 396, 1, 0, 0, 0, 70, 409, 1, 0, 0, 0, 72, 411, 1, 0, 0, 0, 74, 438, 1, 0, 0, 0, 76, 443, 1, 0, 0, 0, 78, 445, 1, 0, 0, 0, 80, 447, 1, 0, 0, 0, 82, 453, 1, 0, 0, 0, 84, 461, 1, 0, 0, 0, 86, 515, 1, 0, 0, 0, 88, 587, 1, 0, 0, 0, 90, 591, 1, 0, 0, 0, 92, 593, 1, 0, 0, 0, 94, 597, 1, 0, 0, 0, 96, 602, 1, 0, 0, 0, 98, 604, 1, 0, 0, 0, 100, 606, 1, 0, 0, 0, 102, 608, 1, 0, 0, 0, 104, 612, 1, 0, 0, 0, 106, 620, 1, 0, 0, 0, 108, 622, 1, 0, 0, 0, 110, 112, 3, 2, 1, 0, 111, 110, 1, 0, 0, 0, 111, 112, 1, 0, 0, 0, 112, 113, 1, 0, 0, 0, 113, 114, 5, 0, 0, 1, 114, 1, 1, 0, 0, 0, 115, 117, 3, 4, 2, 0, 116, 115, 1, 0, 0, 0, 117, 118, 1, 0, 0, 0, 118, 116, 1, 0, 0, 0, 118, 119, 1, 0, 0, 0, 119, 3, 1, 0, 0, 0, 120, 121, 4, 2, 0, 0, 121, 124, 3, 6, 3, 0, 122, 124, 3, 58, 29, 0, 123, 120, 1, 0, 0, 0, 123, 122, 1, 0, 0, 0, 124, 5, 1, 0, 0, 0, 125, 142, 3, 8, 4, 0, 126, 142, 3, 12, 6, 0, 127, 142, 3, 20, 10, 0, 128, 129, 4, 3, 1, 0, 129, 142, 3, 22, 11, 0, 130, 142, 3, 24, 12, 0, 131, 142, 3, 26, 13, 0, 132, 142, 3, 28, 14, 0, 133, 142, 3, 30, 15, 0, 134, 142, 3, 32, 16, 0, 135, 142, 3, 34, 17, 0, 136, 142, 3, 46, 23, 0, 137, 142, 3, 36, 18, 0, 138, 142, 3, 48, 24, 0, 139, 142, 3, 50, 25, 0, 140, 142, 3, 56, 28, 0, 141, 125, 1, 0, 0, 0, 141, 126, 1, 0, 0, 0, 141, 127, 1, 0, 0, 0, 141, 128, 1, 0, 0, 0, 141, 130, 1, 0, 0, 0, 141, 131, 1, 0, 0, 0, 141, 132, 1, 0, 0, 0, 141, 133, 1, 0, 0, 0, 141, 134, 1, 0, 0, 0, 141, 135, 1, 0, 0, 0, 141, 136, 1, 0, 0, 0, 141, 137, 1, 0, 0, 0, 141, 138, 1, 0, 0, 0, 141, 139, 1, 0, 0, 0, 141, 140, 1, 0, 0, 0, 142, 7, 1, 0, 0, 0, 143, 145, 5, 7, 0, 0, 144, 146, 3, 10, 5, 0, 145, 144, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 146, 147, 1, 0, 0, 0, 147, 148, 5, 8, 0, 0, 148, 9, 1, 0, 0, 0, 149, 151, 3, 6, 3, 0, 150, 149, 1, 0, 0, 0, 151, 152, 1, 0, 0, 0, 152, 150, 1, 0, 0, 0, 152, 153, 1, 0, 0, 0, 153, 11, 1, 0, 0, 0, 154, 155, 5, 63, 0, 0, 155, 156, 3, 14, 7, 0, 156, 157, 3, 106, 53, 0, 157, 13, 1, 0, 0, 0, 158, 163, 3, 16, 8, 0, 159, 160, 5, 10, 0, 0, 160, 162, 3, 16, 8, 0, 161, 159, 1, 0, 0, 0, 162, 165, 1, 0, 0, 0, 163, 161, 1, 0, 0, 0, 163, 164, 1, 0, 0, 0, 164, 15, 1, 0, 0, 0, 165, 163, 1, 0, 0, 0, 166, 168, 5, 98, 0, 0, 167, 169, 3, 18, 9, 0, 168, 167, 1, 0, 0, 0, 168, 169, 1, 0, 0, 0, 169, 17, 1, 0, 0, 0, 170, 171, 5, 11, 0, 0, 171, 172, 3, 86, 43, 0, 172, 19, 1, 0, 0, 0, 173, 174, 5, 9, 0, 0, 174, 21, 1, 0, 0, 0, 175, 176, 3, 84, 42, 0, 176, 177, 3, 106, 53, 0, 177, 23, 1, 0, 0, 0, 178, 179, 5, 77, 0, 0, 179, 180, 5, 5, 0, 0, 180, 181, 3, 84, 42, 0, 181, 182, 5, 6, 0, 0, 182, 185, 3, 6, 3, 0, 183, 184, 5, 61, 0, 0, 184, 186, 3, 6, 3, 0, 185, 183, 1, 0, 0, 0, 185, 186, 1, 0, 0, 0, 186, 25, 1, 0, 0, 0, 187, 188, 5, 57, 0, 0, 188, 189, 3, 6, 3, 0, 189, 190, 5, 71, 0, 0, 190, 191, 5, 5, 0, 0, 191, 192, 3, 84, 42, 0, 192, 193, 5, 6, 0, 0, 193, 194, 3, 106, 53, 0, 194, 249, 1, 0, 0, 0, 195, 196, 5, 71, 0, 0, 196, 197, 5, 5, 0, 0, 197, 198, 3, 84, 42, 0, 198, 199, 5, 6, 0, 0, 199, 200, 3, 6, 3, 0, 200, 249, 1, 0, 0, 0, 201, 202, 5, 69, 0, 0, 202, 204, 5, 5, 0, 0, 203, 205, 3, 84, 42, 0, 204, 203, 1, 0, 0, 0, 204, 205, 1, 0, 0, 0, 205, 206, 1, 0, 0, 0, 206, 208, 5, 9, 0, 0, 207, 209, 3, 84, 42, 0, 208, 207, 1, 0, 0, 0, 208, 209, 1, 0, 0, 0, 209, 210, 1, 0, 0, 0, 210, 212, 5, 9, 0, 0, 211, 213, 3, 84, 42, 0, 212, 211, 1, 0, 0, 0, 212, 213, 1, 0, 0, 0, 213, 214, 1, 0, 0, 0, 214, 215, 5, 6, 0, 0, 215, 249, 3, 6, 3, 0, 216, 217, 5, 69, 0, 0, 217, 218, 5, 5, 0, 0, 218, 219, 5, 63, 0, 0, 219, 220, 3, 14, 7, 0, 220, 222, 5, 9, 0, 0, 221, 223, 3, 84, 42, 0, 222, 221, 1, 0, 0, 0, 222, 223, 1, 0, 0, 0, 223, 224, 1, 0, 0, 0, 224, 226, 5, 9, 0, 0, 225, 227, 3, 84, 42, 0, 226, 225, 1, 0, 0, 0, 226, 227, 1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 228, 229, 5, 6, 0, 0, 229, 230, 3, 6, 3, 0, 230, 249, 1, 0, 0, 0, 231, 232, 5, 69, 0, 0, 232, 233, 5, 5, 0, 0, 233, 234, 3, 86, 43, 0, 234, 235, 5, 80, 0, 0, 235, 236, 3, 84, 42, 0, 236, 237, 5, 6, 0, 0, 237, 238, 3, 6, 3, 0, 238, 249, 1, 0, 0, 0, 239, 240, 5, 69, 0, 0, 240, 241, 5, 5, 0, 0, 241, 242, 5, 63, 0, 0, 242, 243, 3, 16, 8, 0, 243, 244, 5, 80, 0, 0, 244, 245, 3, 84, 42, 0, 245, 246, 5, 6, 0, 0, 246, 247, 3, 6, 3, 0, 247, 249, 1, 0, 0, 0, 248, 187, 1, 0, 0, 0, 248, 195, 1, 0, 0, 0, 248, 201, 1, 0, 0, 0, 248, 216, 1, 0, 0, 0, 248, 231, 1, 0, 0, 0, 248, 239, 1, 0, 0, 0, 249, 27, 1, 0, 0, 0, 250, 253, 5, 68, 0, 0, 251, 252, 4, 14, 2, 0, 252, 254, 5, 98, 0, 0, 253, 251, 1, 0, 0, 0, 253, 254, 1, 0, 0, 0, 254, 255, 1, 0, 0, 0, 255, 256, 3, 106, 53, 0, 256, 29, 1, 0, 0, 0, 257, 260, 5, 56, 0, 0, 258, 259, 4, 15, 3, 0, 259, 261, 5, 98, 0, 0, 260, 258, 1, 0, 0, 0, 260, 261, 1, 0, 0, 0, 261, 262, 1, 0, 0, 0, 262, 263, 3, 106, 53, 0, 263, 31, 1, 0, 0, 0, 264, 267, 5, 66, 0, 0, 265, 266, 4, 16, 4, 0, 266, 268, 3, 84, 42, 0, 267, 265, 1, 0, 0, 0, 267, 268, 1, 0, 0, 0, 268, 269, 1, 0, 0, 0, 269, 270, 3, 106, 53, 0, 270, 33, 1, 0, 0, 0, 271, 272, 5, 75, 0, 0, 272, 273, 5, 5, 0, 0, 273, 274, 3, 84, 42, 0, 274, 275, 5, 6, 0, 0, 275, 276, 3, 6, 3, 0, 276, 35, 1, 0, 0, 0, 277, 278, 5, 70, 0, 0, 278, 279, 5, 5, 0, 0, 279, 280, 3, 84, 42, 0, 280, 281, 5, 6, 0, 0, 281, 282, 3, 38, 19, 0, 282, 37, 1, 0, 0, 0, 283, 285, 5, 7, 0, 0, 284, 286, 3, 40, 20, 0, 285, 284, 1, 0, 0, 0, 285, 286, 1, 0, 0, 0, 286, 291, 1, 0, 0, 0, 287, 289, 3, 44, 22, 0, 288, 290, 3, 40, 20, 0, 289, 288, 1, 0, 0, 0, 289, 290, 1, 0, 0, 0, 290, 292, 1, 0, 0, 0, 291, 287, 1, 0, 0, 0, 291, 292, 1, 0, 0, 0, 292, 293, 1, 0, 0, 0, 293, 294, 5, 8, 0, 0, 294, 39, 1, 0, 0, 0, 295, 297, 3, 42, 21, 0, 296, 295, 1, 0, 0, 0, 297, 298, 1, 0, 0, 0, 298, 296, 1, 0, 0, 0, 298, 299, 1, 0, 0, 0, 299, 41, 1, 0, 0, 0, 300, 301, 5, 60, 0, 0, 301, 302, 3, 84, 42, 0, 302, 304, 5, 13, 0, 0, 303, 305, 3, 10, 5, 0, 304, 303, 1, 0, 0, 0, 304, 305, 1, 0, 0, 0, 305, 43, 1, 0, 0, 0, 306, 307, 5, 76, 0, 0, 307, 309, 5, 13, 0, 0, 308, 310, 3, 10, 5, 0, 309, 308, 1, 0, 0, 0, 309, 310, 1, 0, 0, 0, 310, 45, 1, 0, 0, 0, 311, 312, 5, 98, 0, 0, 312, 313, 5, 13, 0, 0, 313, 314, 3, 6, 3, 0, 314, 47, 1, 0, 0, 0, 315, 316, 5, 78, 0, 0, 316, 317, 4, 24, 5, 0, 317, 318, 3, 84, 42, 0, 318, 319, 3, 106, 53, 0, 319, 49, 1, 0, 0, 0, 320, 321, 5, 81, 0, 0, 321, 322, 3, 8, 4, 0, 322, 323, 3, 52, 26, 0, 323, 334, 1, 0, 0, 0, 324, 325, 5, 81, 0, 0, 325, 326, 3, 8, 4, 0, 326, 327, 3, 54, 27, 0, 327, 334, 1, 0, 0, 0, 328, 329, 5, 81, 0, 0, 329, 330, 3, 8, 4, 0, 330, 331, 3, 52, 26, 0, 331, 332, 3, 54, 27, 0, 332, 334, 1, 0, 0, 0, 333, 320, 1, 0, 0, 0, 333, 324, 1, 0, 0, 0, 333, 328, 1, 0, 0, 0, 334, 51, 1, 0, 0, 0, 335, 336, 5, 64, 0, 0, 336, 337, 5, 5, 0, 0, 337, 338, 5, 98, 0, 0, 338, 339, 5, 6, 0, 0, 339, 340, 3, 8, 4, 0, 340, 53, 1, 0, 0, 0, 341, 342, 5, 65, 0, 0, 342, 343, 3, 8, 4, 0, 343, 55, 1, 0, 0, 0, 344, 345, 5, 72, 0, 0, 345, 346, 3, 106, 53, 0, 346, 57, 1, 0, 0, 0, 347, 348, 5, 73, 0, 0, 348, 349, 5, 98, 0, 0, 349, 351, 5, 5, 0, 0, 350, 352, 3, 60, 30, 0, 351, 350, 1, 0, 0, 0, 351, 352, 1, 0, 0, 0, 352, 353, 1, 0, 0, 0, 353, 354, 5, 6, 0, 0, 354, 355, 5, 7, 0, 0, 355, 356, 3, 62, 31, 0, 356, 357, 5, 8, 0, 0, 357, 59, 1, 0, 0, 0, 358, 363, 5, 98, 0, 0, 359, 360, 5, 10, 0, 0, 360, 362, 5, 98, 0, 0, 361, 359, 1, 0, 0, 0, 362, 365, 1, 0, 0, 0, 363, 361, 1, 0, 0, 0, 363, 364, 1, 0, 0, 0, 364, 61, 1, 0, 0, 0, 365, 363, 1, 0, 0, 0, 366, 368, 3, 2, 1, 0, 367, 366, 1, 0, 0, 0, 367, 368, 1, 0, 0, 0, 368, 63, 1, 0, 0, 0, 369, 371, 5, 3, 0, 0, 370, 372, 3, 66, 33, 0, 371, 370, 1, 0, 0, 0, 371, 372, 1, 0, 0, 0, 372, 374, 1, 0, 0, 0, 373, 375, 5, 10, 0, 0, 374, 373, 1, 0, 0, 0, 374, 375, 1, 0, 0, 0, 375, 377, 1, 0, 0, 0, 376, 378, 3, 68, 34, 0, 377, 376, 1, 0, 0, 0, 377, 378, 1, 0, 0, 0, 378, 379, 1, 0, 0, 0, 379, 380, 5, 4, 0, 0, 380, 65, 1, 0, 0, 0, 381, 383, 3, 68, 34, 0, 382, 381, 1, 0, 0, 0, 382, 383, 1, 0, 0, 0, 383, 384, 1, 0, 0, 0, 384, 392, 3, 86, 43, 0, 385, 387, 5, 10, 0, 0, 386, 388, 3, 68, 34, 0, 387, 386, 1, 0, 0, 0, 387, 388, 1, 0, 0, 0, 388, 389, 1, 0, 0, 0, 389, 391, 3, 86, 43, 0, 390, 385, 1, 0, 0, 0, 391, 394, 1, 0, 0, 0, 392, 390, 1, 0, 0, 0, 392, 393, 1, 0, 0, 0, 393, 67, 1, 0, 0, 0, 394, 392, 1, 0, 0, 0, 395, 397, 5, 10, 0, 0, 396, 395, 1, 0, 0, 0, 397, 398, 1, 0, 0, 0, 398, 396, 1, 0, 0, 0, 398, 399, 1, 0, 0, 0, 399, 69, 1, 0, 0, 0, 400, 401, 5, 7, 0, 0, 401, 410, 5, 8, 0, 0, 402, 403, 5, 7, 0, 0, 403, 405, 3, 72, 36, 0, 404, 406, 5, 10, 0, 0, 405, 404, 1, 0, 0, 0, 405, 406, 1, 0, 0, 0, 406, 407, 1, 0, 0, 0, 407, 408, 5, 8, 0, 0, 408, 410, 1, 0, 0, 0, 409, 400, 1, 0, 0, 0, 409, 402, 1, 0, 0, 0, 410, 71, 1, 0, 0, 0, 411, 416, 3, 74, 37, 0, 412, 413, 5, 10, 0, 0, 413, 415, 3, 74, 37, 0, 414, 412, 1, 0, 0, 0, 415, 418, 1, 0, 0, 0, 416, 414, 1, 0, 0, 0, 416, 417, 1, 0, 0, 0, 417, 73, 1, 0, 0, 0, 418, 416, 1, 0, 0, 0, 419, 420, 3, 76, 38, 0, 420, 421, 5, 13, 0, 0, 421, 422, 3, 86, 43, 0, 422, 439, 1, 0, 0, 0, 423, 424, 3, 102, 51, 0, 424, 425, 5, 5, 0, 0, 425, 426, 5, 6, 0, 0, 426, 427, 5, 7, 0, 0, 427, 428, 3, 62, 31, 0, 428, 429, 5, 8, 0, 0, 429, 439, 1, 0, 0, 0, 430, 431, 3, 104, 52, 0, 431, 432, 5, 5, 0, 0, 432, 433, 3, 78, 39, 0, 433, 434, 5, 6, 0, 0, 434, 435, 5, 7, 0, 0, 435, 436, 3, 62, 31, 0, 436, 437, 5, 8, 0, 0, 437, 439, 1, 0, 0, 0, 438, 419, 1, 0, 0, 0, 438, 423, 1, 0, 0, 0, 438, 430, 1, 0, 0, 0, 439, 75, 1, 0, 0, 0, 440, 444, 3, 94, 47, 0, 441, 444, 5, 99, 0, 0, 442, 444, 3, 92, 46, 0, 443, 440, 1, 0, 0, 0, 443, 441, 1, 0, 0, 0, 443, 442, 1, 0, 0, 0, 444, 77, 1, 0, 0, 0, 445, 446, 5, 98, 0, 0, 446, 79, 1, 0, 0, 0, 447, 449, 5, 5, 0, 0, 448, 450, 3, 82, 41, 0, 449, 448, 1, 0, 0, 0, 449, 450, 1, 0, 0, 0, 450, 451, 1, 0, 0, 0, 451, 452, 5, 6, 0, 0, 452, 81, 1, 0, 0, 0, 453, 458, 3, 86, 43, 0, 454, 455, 5, 10, 0, 0, 455, 457, 3, 86, 43, 0, 456, 454, 1, 0, 0, 0, 457, 460, 1, 0, 0, 0, 458, 456, 1, 0, 0, 0, 458, 459, 1, 0, 0, 0, 459, 83, 1, 0, 0, 0, 460, 458, 1, 0, 0, 0, 461, 466, 3, 86, 43, 0, 462, 463, 5, 10, 0, 0, 463, 465, 3, 86, 43, 0, 464, 462, 1, 0, 0, 0, 465, 468, 1, 0, 0, 0, 466, 464, 1, 0, 0, 0, 466, 467, 1, 0, 0, 0, 467, 85, 1, 0, 0, 0, 468, 466, 1, 0, 0, 0, 469, 470, 6, 43, -1, 0, 470, 472, 5, 73, 0, 0, 471, 473, 5, 98, 0, 0, 472, 471, 1, 0, 0, 0, 472, 473, 1, 0, 0, 0, 473, 474, 1, 0, 0, 0, 474, 476, 5, 5, 0, 0, 475, 477, 3, 60, 30, 0, 476, 475, 1, 0, 0, 0, 476, 477, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 479, 5, 6, 0, 0, 479, 480, 5, 7, 0, 0, 480, 481, 3, 62, 31, 0, 481, 482, 5, 8, 0, 0, 482, 516, 1, 0, 0, 0, 483, 484, 5, 62, 0, 0, 484, 486, 3, 86, 43, 0, 485, 487, 3, 80, 40, 0, 486, 485, 1, 0, 0, 0, 486, 487, 1, 0, 0, 0, 487, 516, 1, 0, 0, 0, 488, 489, 5, 79, 0, 0, 489, 516, 3, 86, 43, 30, 490, 491, 5, 67, 0, 0, 491, 516, 3, 86, 43, 29, 492, 493, 5, 59, 0, 0, 493, 516, 3, 86, 43, 28, 494, 495, 5, 15, 0, 0, 495, 516, 3, 86, 43, 27, 496, 497, 5, 16, 0, 0, 497, 516, 3, 86, 43, 26, 498, 499, 5, 17, 0, 0, 499, 516, 3, 86, 43, 25, 500, 501, 5, 18, 0, 0, 501, 516, 3, 86, 43, 24, 502, 503, 5, 19, 0, 0, 503, 516, 3, 86, 43, 23, 504, 505, 5, 20, 0, 0, 505, 516, 3, 86, 43, 22, 506, 516, 5, 74, 0, 0, 507, 516, 5, 98, 0, 0, 508, 516, 3, 90, 45, 0, 509, 516, 3, 64, 32, 0, 510, 516, 3, 70, 35, 0, 511, 512, 5, 5, 0, 0, 512, 513, 3, 84, 42, 0, 513, 514, 5, 6, 0, 0, 514, 516, 1, 0, 0, 0, 515, 469, 1, 0, 0, 0, 515, 483, 1, 0, 0, 0, 515, 488, 1, 0, 0, 0, 515, 490, 1, 0, 0, 0, 515, 492, 1, 0, 0, 0, 515, 494, 1, 0, 0, 0, 515, 496, 1, 0, 0, 0, 515, 498, 1, 0, 0, 0, 515, 500, 1, 0, 0, 0, 515, 502, 1, 0, 0, 0, 515, 504, 1, 0, 0, 0, 515, 506, 1, 0, 0, 0, 515, 507, 1, 0, 0, 0, 515, 508, 1, 0, 0, 0, 515, 509, 1, 0, 0, 0, 515, 510, 1, 0, 0, 0, 515, 511, 1, 0, 0, 0, 516, 584, 1, 0, 0, 0, 517, 518, 10, 21, 0, 0, 518, 519, 7, 0, 0, 0, 519, 583, 3, 86, 43, 22, 520, 521, 10, 20, 0, 0, 521, 522, 7, 1, 0, 0, 522, 583, 3, 86, 43, 21, 523, 524, 10, 19, 0, 0, 524, 525, 7, 2, 0, 0, 525, 583, 3, 86, 43, 20, 526, 527, 10, 18, 0, 0, 527, 528, 7, 3, 0, 0, 528, 583, 3, 86, 43, 19, 529, 530, 10, 17, 0, 0, 530, 531, 5, 58, 0, 0, 531, 583, 3, 86, 43, 18, 532, 533, 10, 16, 0, 0, 533, 534, 5, 80, 0, 0, 534, 583, 3, 86, 43, 17, 535, 536, 10, 15, 0, 0, 536, 537, 7, 4, 0, 0, 537, 583, 3, 86, 43, 16, 538, 539, 10, 14, 0, 0, 539, 540, 5, 35, 0, 0, 540, 583, 3, 86, 43, 15, 541, 542, 10, 13, 0, 0, 542, 543, 5, 36, 0, 0, 543, 583, 3, 86, 43, 14, 544, 545, 10, 12, 0, 0, 545, 546, 5, 37, 0, 0, 546, 583, 3, 86, 43, 13, 547, 548, 10, 11, 0, 0, 548, 549, 5, 38, 0, 0, 549, 583, 3, 86, 43, 12, 550, 551, 10, 10, 0, 0, 551, 552, 5, 39, 0, 0, 552, 583, 3, 86, 43, 11, 553, 554, 10, 9, 0, 0, 554, 555, 5, 12, 0, 0, 555, 556, 3, 86, 43, 0, 556, 557, 5, 13, 0, 0, 557, 558, 3, 86, 43, 10, 558, 583, 1, 0, 0, 0, 559, 560, 10, 8, 0, 0, 560, 561, 5, 11, 0, 0, 561, 583, 3, 86, 43, 9, 562, 563, 10, 7, 0, 0, 563, 564, 3, 88, 44, 0, 564, 565, 3, 86, 43, 8, 565, 583, 1, 0, 0, 0, 566, 567, 10, 36, 0, 0, 567, 568, 5, 3, 0, 0, 568, 569, 3, 84, 42, 0, 569, 570, 5, 4, 0, 0, 570, 583, 1, 0, 0, 0, 571, 572, 10, 35, 0, 0, 572, 573, 5, 14, 0, 0, 573, 583, 3, 94, 47, 0, 574, 575, 10, 34, 0, 0, 575, 583, 3, 80, 40, 0, 576, 577, 10, 32, 0, 0, 577, 578, 4, 43, 25, 0, 578, 583, 5, 15, 0, 0, 579, 580, 10, 31, 0, 0, 580, 581, 4, 43, 27, 0, 581, 583, 5, 16, 0, 0, 582, 517, 1, 0, 0, 0, 582, 520, 1, 0, 0, 0, 582, 523, 1, 0, 0, 0, 582, 526, 1, 0, 0, 0, 582, 529, 1, 0, 0, 0, 582, 532, 1, 0, 0, 0, 582, 535, 1, 0, 0, 0, 582, 538, 1, 0, 0, 0, 582, 541, 1, 0, 0, 0, 582, 544, 1, 0, 0, 0, 582, 547, 1, 0, 0, 0, 582, 550, 1, 0, 0, 0, 582, 553, 1, 0, 0, 0, 582, 559, 1, 0, 0, 0, 582, 562, 1, 0, 0, 0, 582, 566, 1, 0, 0, 0, 582, 571, 1, 0, 0, 0, 582, 574, 1, 0, 0, 0, 582, 576, 1, 0, 0, 0, 582, 579, 1, 0, 0, 0, 583, 586, 1, 0, 0, 0, 584, 582, 1, 0, 0, 0, 584, 585, 1, 0, 0, 0, 585, 87, 1, 0, 0, 0, 586, 584, 1, 0, 0, 0, 587, 588, 7, 5, 0, 0, 588, 89, 1, 0, 0, 0, 589, 592, 7, 6, 0, 0, 590, 592, 3, 92, 46, 0, 591, 589, 1, 0, 0, 0, 591, 590, 1, 0, 0, 0, 592, 91, 1, 0, 0, 0, 593, 594, 7, 7, 0, 0, 594, 93, 1, 0, 0, 0, 595, 598, 5, 98, 0, 0, 596, 598, 3, 96, 48, 0, 597, 595, 1, 0, 0, 0, 597, 596, 1, 0, 0, 0, 598, 95, 1, 0, 0, 0, 599, 603, 3, 98, 49, 0, 600, 603, 3, 100, 50, 0, 601, 603, 7, 8, 0, 0, 602, 599, 1, 0, 0, 0, 602, 600, 1, 0, 0, 0, 602, 601, 1, 0, 0, 0, 603, 97, 1, 0, 0, 0, 604, 605, 7, 9, 0, 0, 605, 99, 1, 0, 0, 0, 606, 607, 7, 10, 0, 0, 607, 101, 1, 0, 0, 0, 608, 609, 4, 51, 28, 0, 609, 610, 5, 98, 0, 0, 610, 611, 3, 76, 38, 0, 611, 103, 1, 0, 0, 0, 612, 613, 4, 52, 29, 0, 613, 614, 5, 98, 0, 0, 614, 615, 3, 76, 38, 0, 615, 105, 1, 0, 0, 0, 616, 621, 5, 9, 0, 0, 617, 621, 5, 0, 0, 1, 618, 621, 4, 53, 30, 0, 619, 621, 4, 53, 31, 0, 620, 616, 1, 0, 0, 0, 620, 617, 1, 0, 0, 0, 620, 618, 1, 0, 0, 0, 620, 619, 1, 0, 0, 0, 621, 107, 1, 0, 0, 0, 622, 623, 5, 0, 0, 1, 623, 109, 1, 0, 0, 0, 53, 111, 118, 123, 141, 145, 152, 163, 168, 185, 204, 208, 212, 222, 226, 248, 253, 260, 267, 285, 289, 291, 298, 304, 309, 333, 351, 363, 367, 371, 374, 377, 382, 387, 392, 398, 405, 409, 416, 438, 443, 449, 458, 466, 472, 476, 486, 515, 582, 584, 591, 597, 602, 620];\nvar atn = new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.ATNDeserializer().deserialize(serializedATN);\nvar decisionsToDFA = atn.decisionToState.map(function (ds, index) {\n  return new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].dfa.DFA(ds, index);\n});\nvar sharedContextCache = new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.PredictionContextCache();\nvar ECMAScriptParser = /*#__PURE__*/function (_antlr4$Parser) {\n  function ECMAScriptParser(input) {\n    var _this;\n    _classCallCheck(this, ECMAScriptParser);\n    _this = _callSuper(this, ECMAScriptParser, [input]);\n    _this._interp = new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.ParserATNSimulator(_this, atn, decisionsToDFA, sharedContextCache);\n    _this.ruleNames = ECMAScriptParser.ruleNames;\n    _this.literalNames = ECMAScriptParser.literalNames;\n    _this.symbolicNames = ECMAScriptParser.symbolicNames;\n    return _this;\n  }\n\n  /**\r\n   * Returns {@code true} iff on the current index of the parser's\r\n   * token stream a token of the given {@code type} exists on the\r\n   * {@code HIDDEN} channel.\r\n   *\r\n   * @param type\r\n   *         the type of the token on the {@code HIDDEN} channel\r\n   *         to check.\r\n   *\r\n   * @return {@code true} iff on the current index of the parser's\r\n   * token stream a token of the given {@code type} exists on the\r\n   * {@code HIDDEN} channel.\r\n   */\n  _inherits(ECMAScriptParser, _antlr4$Parser);\n  return _createClass(ECMAScriptParser, [{\n    key: \"here\",\n    value: function here(type) {\n      // Get the token ahead of the current index.\n      possibleIndexEosToken = this.getCurrentToken().getTokenIndex() - 1;\n      ahead = _input.get(possibleIndexEosToken);\n\n      // Check if the token resides on the HIDDEN channel and if it's of the\n      // provided type.\n      return ahead.getChannel() == Lexer.HIDDEN && ahead.getType() == type;\n    }\n\n    /**\r\n     * Returns {@code true} iff on the current index of the parser's\r\n     * token stream a token exists on the {@code HIDDEN} channel which\r\n     * either is a line terminator, or is a multi line comment that\r\n     * contains a line terminator.\r\n     *\r\n     * @return {@code true} iff on the current index of the parser's\r\n     * token stream a token exists on the {@code HIDDEN} channel which\r\n     * either is a line terminator, or is a multi line comment that\r\n     * contains a line terminator.\r\n     */\n  }, {\n    key: \"lineTerminatorAhead\",\n    value: function lineTerminatorAhead() {\n      // Get the token ahead of the current index.\n      possibleIndexEosToken = this.getCurrentToken().getTokenIndex() - 1;\n      ahead = _input.get(possibleIndexEosToken);\n      if (ahead.getChannel() != Lexer.HIDDEN) {\n        // We're only interested in tokens on the HIDDEN channel.\n        return false;\n      }\n      if (ahead.getType() == LineTerminator) {\n        // There is definitely a line terminator ahead.\n        return true;\n      }\n      if (ahead.getType() == WhiteSpaces) {\n        // Get the token ahead of the current whitespaces.\n        possibleIndexEosToken = this.getCurrentToken().getTokenIndex() - 2;\n        ahead = _input.get(possibleIndexEosToken);\n      }\n\n      // Get the token's text and type.\n      text = ahead.getText();\n      type = ahead.getType();\n\n      // Check if the token is, or contains a line terminator.\n      return type == MultiLineComment && (text.contains(\"\\r\") || text.contains(\"\\n\")) || type == LineTerminator;\n    }\n  }, {\n    key: \"sempred\",\n    value: function sempred(localctx, ruleIndex, predIndex) {\n      switch (ruleIndex) {\n        case 2:\n          return this.sourceElement_sempred(localctx, predIndex);\n        case 3:\n          return this.statement_sempred(localctx, predIndex);\n        case 14:\n          return this.continueStatement_sempred(localctx, predIndex);\n        case 15:\n          return this.breakStatement_sempred(localctx, predIndex);\n        case 16:\n          return this.returnStatement_sempred(localctx, predIndex);\n        case 24:\n          return this.throwStatement_sempred(localctx, predIndex);\n        case 43:\n          return this.singleExpression_sempred(localctx, predIndex);\n        case 51:\n          return this.getter_sempred(localctx, predIndex);\n        case 52:\n          return this.setter_sempred(localctx, predIndex);\n        case 53:\n          return this.eos_sempred(localctx, predIndex);\n        default:\n          throw \"No predicate with index:\" + ruleIndex;\n      }\n    }\n  }, {\n    key: \"sourceElement_sempred\",\n    value: function sourceElement_sempred(localctx, predIndex) {\n      switch (predIndex) {\n        case 0:\n          return _input.LA(1) != Function;\n        default:\n          throw \"No predicate with index:\" + predIndex;\n      }\n    }\n  }, {\n    key: \"statement_sempred\",\n    value: function statement_sempred(localctx, predIndex) {\n      switch (predIndex) {\n        case 1:\n          return _input.LA(1) != OpenBrace;\n        default:\n          throw \"No predicate with index:\" + predIndex;\n      }\n    }\n  }, {\n    key: \"continueStatement_sempred\",\n    value: function continueStatement_sempred(localctx, predIndex) {\n      switch (predIndex) {\n        case 2:\n          return !here(LineTerminator);\n        default:\n          throw \"No predicate with index:\" + predIndex;\n      }\n    }\n  }, {\n    key: \"breakStatement_sempred\",\n    value: function breakStatement_sempred(localctx, predIndex) {\n      switch (predIndex) {\n        case 3:\n          return !here(LineTerminator);\n        default:\n          throw \"No predicate with index:\" + predIndex;\n      }\n    }\n  }, {\n    key: \"returnStatement_sempred\",\n    value: function returnStatement_sempred(localctx, predIndex) {\n      switch (predIndex) {\n        case 4:\n          return !here(LineTerminator);\n        default:\n          throw \"No predicate with index:\" + predIndex;\n      }\n    }\n  }, {\n    key: \"throwStatement_sempred\",\n    value: function throwStatement_sempred(localctx, predIndex) {\n      switch (predIndex) {\n        case 5:\n          return !here(LineTerminator);\n        default:\n          throw \"No predicate with index:\" + predIndex;\n      }\n    }\n  }, {\n    key: \"singleExpression_sempred\",\n    value: function singleExpression_sempred(localctx, predIndex) {\n      switch (predIndex) {\n        case 6:\n          return this.precpred(this._ctx, 21);\n        case 7:\n          return this.precpred(this._ctx, 20);\n        case 8:\n          return this.precpred(this._ctx, 19);\n        case 9:\n          return this.precpred(this._ctx, 18);\n        case 10:\n          return this.precpred(this._ctx, 17);\n        case 11:\n          return this.precpred(this._ctx, 16);\n        case 12:\n          return this.precpred(this._ctx, 15);\n        case 13:\n          return this.precpred(this._ctx, 14);\n        case 14:\n          return this.precpred(this._ctx, 13);\n        case 15:\n          return this.precpred(this._ctx, 12);\n        case 16:\n          return this.precpred(this._ctx, 11);\n        case 17:\n          return this.precpred(this._ctx, 10);\n        case 18:\n          return this.precpred(this._ctx, 9);\n        case 19:\n          return this.precpred(this._ctx, 8);\n        case 20:\n          return this.precpred(this._ctx, 7);\n        case 21:\n          return this.precpred(this._ctx, 36);\n        case 22:\n          return this.precpred(this._ctx, 35);\n        case 23:\n          return this.precpred(this._ctx, 34);\n        case 24:\n          return this.precpred(this._ctx, 32);\n        case 25:\n          return !here(LineTerminator);\n        case 26:\n          return this.precpred(this._ctx, 31);\n        case 27:\n          return !here(LineTerminator);\n        default:\n          throw \"No predicate with index:\" + predIndex;\n      }\n    }\n  }, {\n    key: \"getter_sempred\",\n    value: function getter_sempred(localctx, predIndex) {\n      switch (predIndex) {\n        case 28:\n          return _input.LT(1).getText().equals(\"get\");\n        default:\n          throw \"No predicate with index:\" + predIndex;\n      }\n    }\n  }, {\n    key: \"setter_sempred\",\n    value: function setter_sempred(localctx, predIndex) {\n      switch (predIndex) {\n        case 29:\n          return _input.LT(1).getText().equals(\"set\");\n        default:\n          throw \"No predicate with index:\" + predIndex;\n      }\n    }\n  }, {\n    key: \"eos_sempred\",\n    value: function eos_sempred(localctx, predIndex) {\n      switch (predIndex) {\n        case 30:\n          return lineTerminatorAhead();\n        case 31:\n          return _input.LT(1).getType() == CloseBrace;\n        default:\n          throw \"No predicate with index:\" + predIndex;\n      }\n    }\n  }, {\n    key: \"program\",\n    value: function program() {\n      var localctx = new ProgramContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 0, ECMAScriptParser.RULE_program);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 111;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);\n        if (la_ === 1) {\n          this.state = 110;\n          this.sourceElements();\n        }\n        this.state = 113;\n        this.match(ECMAScriptParser.EOF);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"sourceElements\",\n    value: function sourceElements() {\n      var localctx = new SourceElementsContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 2, ECMAScriptParser.RULE_sourceElements);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 116;\n        this._errHandler.sync(this);\n        var _alt = 1;\n        do {\n          switch (_alt) {\n            case 1:\n              this.state = 115;\n              this.sourceElement();\n              break;\n            default:\n              throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.NoViableAltException(this);\n          }\n          this.state = 118;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 1, this._ctx);\n        } while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.ATN.INVALID_ALT_NUMBER);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"sourceElement\",\n    value: function sourceElement() {\n      var localctx = new SourceElementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 4, ECMAScriptParser.RULE_sourceElement);\n      try {\n        this.state = 123;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);\n        switch (la_) {\n          case 1:\n            this.enterOuterAlt(localctx, 1);\n            this.state = 120;\n            if (!(_input.LA(1) != Function)) {\n              throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"_input.LA(1) != Function\");\n            }\n            this.state = 121;\n            this.statement();\n            break;\n          case 2:\n            this.enterOuterAlt(localctx, 2);\n            this.state = 122;\n            this.functionDeclaration();\n            break;\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"statement\",\n    value: function statement() {\n      var localctx = new StatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 6, ECMAScriptParser.RULE_statement);\n      try {\n        this.state = 141;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 3, this._ctx);\n        switch (la_) {\n          case 1:\n            this.enterOuterAlt(localctx, 1);\n            this.state = 125;\n            this.block();\n            break;\n          case 2:\n            this.enterOuterAlt(localctx, 2);\n            this.state = 126;\n            this.variableStatement();\n            break;\n          case 3:\n            this.enterOuterAlt(localctx, 3);\n            this.state = 127;\n            this.emptyStatement_();\n            break;\n          case 4:\n            this.enterOuterAlt(localctx, 4);\n            this.state = 128;\n            if (!(_input.LA(1) != OpenBrace)) {\n              throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"_input.LA(1) != OpenBrace\");\n            }\n            this.state = 129;\n            this.expressionStatement();\n            break;\n          case 5:\n            this.enterOuterAlt(localctx, 5);\n            this.state = 130;\n            this.ifStatement();\n            break;\n          case 6:\n            this.enterOuterAlt(localctx, 6);\n            this.state = 131;\n            this.iterationStatement();\n            break;\n          case 7:\n            this.enterOuterAlt(localctx, 7);\n            this.state = 132;\n            this.continueStatement();\n            break;\n          case 8:\n            this.enterOuterAlt(localctx, 8);\n            this.state = 133;\n            this.breakStatement();\n            break;\n          case 9:\n            this.enterOuterAlt(localctx, 9);\n            this.state = 134;\n            this.returnStatement();\n            break;\n          case 10:\n            this.enterOuterAlt(localctx, 10);\n            this.state = 135;\n            this.withStatement();\n            break;\n          case 11:\n            this.enterOuterAlt(localctx, 11);\n            this.state = 136;\n            this.labelledStatement();\n            break;\n          case 12:\n            this.enterOuterAlt(localctx, 12);\n            this.state = 137;\n            this.switchStatement();\n            break;\n          case 13:\n            this.enterOuterAlt(localctx, 13);\n            this.state = 138;\n            this.throwStatement();\n            break;\n          case 14:\n            this.enterOuterAlt(localctx, 14);\n            this.state = 139;\n            this.tryStatement();\n            break;\n          case 15:\n            this.enterOuterAlt(localctx, 15);\n            this.state = 140;\n            this.debuggerStatement();\n            break;\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"block\",\n    value: function block() {\n      var localctx = new BlockContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 8, ECMAScriptParser.RULE_block);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 143;\n        this.match(ECMAScriptParser.OpenBrace);\n        this.state = 145;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 4, this._ctx);\n        if (la_ === 1) {\n          this.state = 144;\n          this.statementList();\n        }\n        this.state = 147;\n        this.match(ECMAScriptParser.CloseBrace);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"statementList\",\n    value: function statementList() {\n      var localctx = new StatementListContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 10, ECMAScriptParser.RULE_statementList);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 150;\n        this._errHandler.sync(this);\n        var _alt = 1;\n        do {\n          switch (_alt) {\n            case 1:\n              this.state = 149;\n              this.statement();\n              break;\n            default:\n              throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.NoViableAltException(this);\n          }\n          this.state = 152;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 5, this._ctx);\n        } while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.ATN.INVALID_ALT_NUMBER);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"variableStatement\",\n    value: function variableStatement() {\n      var localctx = new VariableStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 12, ECMAScriptParser.RULE_variableStatement);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 154;\n        this.match(ECMAScriptParser.Var);\n        this.state = 155;\n        this.variableDeclarationList();\n        this.state = 156;\n        this.eos();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"variableDeclarationList\",\n    value: function variableDeclarationList() {\n      var localctx = new VariableDeclarationListContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 14, ECMAScriptParser.RULE_variableDeclarationList);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 158;\n        this.variableDeclaration();\n        this.state = 163;\n        this._errHandler.sync(this);\n        var _alt = this._interp.adaptivePredict(this._input, 6, this._ctx);\n        while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.ATN.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            this.state = 159;\n            this.match(ECMAScriptParser.Comma);\n            this.state = 160;\n            this.variableDeclaration();\n          }\n          this.state = 165;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 6, this._ctx);\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"variableDeclaration\",\n    value: function variableDeclaration() {\n      var localctx = new VariableDeclarationContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 16, ECMAScriptParser.RULE_variableDeclaration);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 166;\n        this.match(ECMAScriptParser.Identifier);\n        this.state = 168;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 7, this._ctx);\n        if (la_ === 1) {\n          this.state = 167;\n          this.initialiser();\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"initialiser\",\n    value: function initialiser() {\n      var localctx = new InitialiserContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 18, ECMAScriptParser.RULE_initialiser);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 170;\n        this.match(ECMAScriptParser.Assign);\n        this.state = 171;\n        this.singleExpression(0);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"emptyStatement_\",\n    value: function emptyStatement_() {\n      var localctx = new EmptyStatement_Context(this, this._ctx, this.state);\n      this.enterRule(localctx, 20, ECMAScriptParser.RULE_emptyStatement_);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 173;\n        this.match(ECMAScriptParser.SemiColon);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"expressionStatement\",\n    value: function expressionStatement() {\n      var localctx = new ExpressionStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 22, ECMAScriptParser.RULE_expressionStatement);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 175;\n        this.expressionSequence();\n        this.state = 176;\n        this.eos();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"ifStatement\",\n    value: function ifStatement() {\n      var localctx = new IfStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 24, ECMAScriptParser.RULE_ifStatement);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 178;\n        this.match(ECMAScriptParser.If);\n        this.state = 179;\n        this.match(ECMAScriptParser.OpenParen);\n        this.state = 180;\n        this.expressionSequence();\n        this.state = 181;\n        this.match(ECMAScriptParser.CloseParen);\n        this.state = 182;\n        this.statement();\n        this.state = 185;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 8, this._ctx);\n        if (la_ === 1) {\n          this.state = 183;\n          this.match(ECMAScriptParser.Else);\n          this.state = 184;\n          this.statement();\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"iterationStatement\",\n    value: function iterationStatement() {\n      var localctx = new IterationStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 26, ECMAScriptParser.RULE_iterationStatement);\n      var _la = 0;\n      try {\n        this.state = 248;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 14, this._ctx);\n        switch (la_) {\n          case 1:\n            localctx = new DoStatementContext(this, localctx);\n            this.enterOuterAlt(localctx, 1);\n            this.state = 187;\n            this.match(ECMAScriptParser.Do);\n            this.state = 188;\n            this.statement();\n            this.state = 189;\n            this.match(ECMAScriptParser.While);\n            this.state = 190;\n            this.match(ECMAScriptParser.OpenParen);\n            this.state = 191;\n            this.expressionSequence();\n            this.state = 192;\n            this.match(ECMAScriptParser.CloseParen);\n            this.state = 193;\n            this.eos();\n            break;\n          case 2:\n            localctx = new WhileStatementContext(this, localctx);\n            this.enterOuterAlt(localctx, 2);\n            this.state = 195;\n            this.match(ECMAScriptParser.While);\n            this.state = 196;\n            this.match(ECMAScriptParser.OpenParen);\n            this.state = 197;\n            this.expressionSequence();\n            this.state = 198;\n            this.match(ECMAScriptParser.CloseParen);\n            this.state = 199;\n            this.statement();\n            break;\n          case 3:\n            localctx = new ForStatementContext(this, localctx);\n            this.enterOuterAlt(localctx, 3);\n            this.state = 201;\n            this.match(ECMAScriptParser.For);\n            this.state = 202;\n            this.match(ECMAScriptParser.OpenParen);\n            this.state = 204;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~0x1f) === 0 && (1 << _la & 2064554) !== 0 || (_la - 51 & ~0x1f) === 0 && (1 << _la - 51 & 281086239) !== 0 || _la === 98 || _la === 99) {\n              this.state = 203;\n              this.expressionSequence();\n            }\n            this.state = 206;\n            this.match(ECMAScriptParser.SemiColon);\n            this.state = 208;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~0x1f) === 0 && (1 << _la & 2064554) !== 0 || (_la - 51 & ~0x1f) === 0 && (1 << _la - 51 & 281086239) !== 0 || _la === 98 || _la === 99) {\n              this.state = 207;\n              this.expressionSequence();\n            }\n            this.state = 210;\n            this.match(ECMAScriptParser.SemiColon);\n            this.state = 212;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~0x1f) === 0 && (1 << _la & 2064554) !== 0 || (_la - 51 & ~0x1f) === 0 && (1 << _la - 51 & 281086239) !== 0 || _la === 98 || _la === 99) {\n              this.state = 211;\n              this.expressionSequence();\n            }\n            this.state = 214;\n            this.match(ECMAScriptParser.CloseParen);\n            this.state = 215;\n            this.statement();\n            break;\n          case 4:\n            localctx = new ForVarStatementContext(this, localctx);\n            this.enterOuterAlt(localctx, 4);\n            this.state = 216;\n            this.match(ECMAScriptParser.For);\n            this.state = 217;\n            this.match(ECMAScriptParser.OpenParen);\n            this.state = 218;\n            this.match(ECMAScriptParser.Var);\n            this.state = 219;\n            this.variableDeclarationList();\n            this.state = 220;\n            this.match(ECMAScriptParser.SemiColon);\n            this.state = 222;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~0x1f) === 0 && (1 << _la & 2064554) !== 0 || (_la - 51 & ~0x1f) === 0 && (1 << _la - 51 & 281086239) !== 0 || _la === 98 || _la === 99) {\n              this.state = 221;\n              this.expressionSequence();\n            }\n            this.state = 224;\n            this.match(ECMAScriptParser.SemiColon);\n            this.state = 226;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if ((_la & ~0x1f) === 0 && (1 << _la & 2064554) !== 0 || (_la - 51 & ~0x1f) === 0 && (1 << _la - 51 & 281086239) !== 0 || _la === 98 || _la === 99) {\n              this.state = 225;\n              this.expressionSequence();\n            }\n            this.state = 228;\n            this.match(ECMAScriptParser.CloseParen);\n            this.state = 229;\n            this.statement();\n            break;\n          case 5:\n            localctx = new ForInStatementContext(this, localctx);\n            this.enterOuterAlt(localctx, 5);\n            this.state = 231;\n            this.match(ECMAScriptParser.For);\n            this.state = 232;\n            this.match(ECMAScriptParser.OpenParen);\n            this.state = 233;\n            this.singleExpression(0);\n            this.state = 234;\n            this.match(ECMAScriptParser.In);\n            this.state = 235;\n            this.expressionSequence();\n            this.state = 236;\n            this.match(ECMAScriptParser.CloseParen);\n            this.state = 237;\n            this.statement();\n            break;\n          case 6:\n            localctx = new ForVarInStatementContext(this, localctx);\n            this.enterOuterAlt(localctx, 6);\n            this.state = 239;\n            this.match(ECMAScriptParser.For);\n            this.state = 240;\n            this.match(ECMAScriptParser.OpenParen);\n            this.state = 241;\n            this.match(ECMAScriptParser.Var);\n            this.state = 242;\n            this.variableDeclaration();\n            this.state = 243;\n            this.match(ECMAScriptParser.In);\n            this.state = 244;\n            this.expressionSequence();\n            this.state = 245;\n            this.match(ECMAScriptParser.CloseParen);\n            this.state = 246;\n            this.statement();\n            break;\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"continueStatement\",\n    value: function continueStatement() {\n      var localctx = new ContinueStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 28, ECMAScriptParser.RULE_continueStatement);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 250;\n        this.match(ECMAScriptParser.Continue);\n        this.state = 253;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);\n        if (la_ === 1) {\n          this.state = 251;\n          if (!!here(LineTerminator)) {\n            throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"!here(LineTerminator)\");\n          }\n          this.state = 252;\n          this.match(ECMAScriptParser.Identifier);\n        }\n        this.state = 255;\n        this.eos();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"breakStatement\",\n    value: function breakStatement() {\n      var localctx = new BreakStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 30, ECMAScriptParser.RULE_breakStatement);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 257;\n        this.match(ECMAScriptParser.Break);\n        this.state = 260;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 16, this._ctx);\n        if (la_ === 1) {\n          this.state = 258;\n          if (!!here(LineTerminator)) {\n            throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"!here(LineTerminator)\");\n          }\n          this.state = 259;\n          this.match(ECMAScriptParser.Identifier);\n        }\n        this.state = 262;\n        this.eos();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"returnStatement\",\n    value: function returnStatement() {\n      var localctx = new ReturnStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 32, ECMAScriptParser.RULE_returnStatement);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 264;\n        this.match(ECMAScriptParser.Return);\n        this.state = 267;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 17, this._ctx);\n        if (la_ === 1) {\n          this.state = 265;\n          if (!!here(LineTerminator)) {\n            throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"!here(LineTerminator)\");\n          }\n          this.state = 266;\n          this.expressionSequence();\n        }\n        this.state = 269;\n        this.eos();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"withStatement\",\n    value: function withStatement() {\n      var localctx = new WithStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 34, ECMAScriptParser.RULE_withStatement);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 271;\n        this.match(ECMAScriptParser.With);\n        this.state = 272;\n        this.match(ECMAScriptParser.OpenParen);\n        this.state = 273;\n        this.expressionSequence();\n        this.state = 274;\n        this.match(ECMAScriptParser.CloseParen);\n        this.state = 275;\n        this.statement();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"switchStatement\",\n    value: function switchStatement() {\n      var localctx = new SwitchStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 36, ECMAScriptParser.RULE_switchStatement);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 277;\n        this.match(ECMAScriptParser.Switch);\n        this.state = 278;\n        this.match(ECMAScriptParser.OpenParen);\n        this.state = 279;\n        this.expressionSequence();\n        this.state = 280;\n        this.match(ECMAScriptParser.CloseParen);\n        this.state = 281;\n        this.caseBlock();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"caseBlock\",\n    value: function caseBlock() {\n      var localctx = new CaseBlockContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 38, ECMAScriptParser.RULE_caseBlock);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 283;\n        this.match(ECMAScriptParser.OpenBrace);\n        this.state = 285;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 60) {\n          this.state = 284;\n          this.caseClauses();\n        }\n        this.state = 291;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 76) {\n          this.state = 287;\n          this.defaultClause();\n          this.state = 289;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n          if (_la === 60) {\n            this.state = 288;\n            this.caseClauses();\n          }\n        }\n        this.state = 293;\n        this.match(ECMAScriptParser.CloseBrace);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"caseClauses\",\n    value: function caseClauses() {\n      var localctx = new CaseClausesContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 40, ECMAScriptParser.RULE_caseClauses);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 296;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        do {\n          this.state = 295;\n          this.caseClause();\n          this.state = 298;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        } while (_la === 60);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"caseClause\",\n    value: function caseClause() {\n      var localctx = new CaseClauseContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 42, ECMAScriptParser.RULE_caseClause);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 300;\n        this.match(ECMAScriptParser.Case);\n        this.state = 301;\n        this.expressionSequence();\n        this.state = 302;\n        this.match(ECMAScriptParser.Colon);\n        this.state = 304;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);\n        if (la_ === 1) {\n          this.state = 303;\n          this.statementList();\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"defaultClause\",\n    value: function defaultClause() {\n      var localctx = new DefaultClauseContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 44, ECMAScriptParser.RULE_defaultClause);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 306;\n        this.match(ECMAScriptParser.Default);\n        this.state = 307;\n        this.match(ECMAScriptParser.Colon);\n        this.state = 309;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 23, this._ctx);\n        if (la_ === 1) {\n          this.state = 308;\n          this.statementList();\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"labelledStatement\",\n    value: function labelledStatement() {\n      var localctx = new LabelledStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 46, ECMAScriptParser.RULE_labelledStatement);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 311;\n        this.match(ECMAScriptParser.Identifier);\n        this.state = 312;\n        this.match(ECMAScriptParser.Colon);\n        this.state = 313;\n        this.statement();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"throwStatement\",\n    value: function throwStatement() {\n      var localctx = new ThrowStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 48, ECMAScriptParser.RULE_throwStatement);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 315;\n        this.match(ECMAScriptParser.Throw);\n        this.state = 316;\n        if (!!here(LineTerminator)) {\n          throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"!here(LineTerminator)\");\n        }\n        this.state = 317;\n        this.expressionSequence();\n        this.state = 318;\n        this.eos();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"tryStatement\",\n    value: function tryStatement() {\n      var localctx = new TryStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 50, ECMAScriptParser.RULE_tryStatement);\n      try {\n        this.state = 333;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);\n        switch (la_) {\n          case 1:\n            this.enterOuterAlt(localctx, 1);\n            this.state = 320;\n            this.match(ECMAScriptParser.Try);\n            this.state = 321;\n            this.block();\n            this.state = 322;\n            this.catchProduction();\n            break;\n          case 2:\n            this.enterOuterAlt(localctx, 2);\n            this.state = 324;\n            this.match(ECMAScriptParser.Try);\n            this.state = 325;\n            this.block();\n            this.state = 326;\n            this.finallyProduction();\n            break;\n          case 3:\n            this.enterOuterAlt(localctx, 3);\n            this.state = 328;\n            this.match(ECMAScriptParser.Try);\n            this.state = 329;\n            this.block();\n            this.state = 330;\n            this.catchProduction();\n            this.state = 331;\n            this.finallyProduction();\n            break;\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"catchProduction\",\n    value: function catchProduction() {\n      var localctx = new CatchProductionContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 52, ECMAScriptParser.RULE_catchProduction);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 335;\n        this.match(ECMAScriptParser.Catch);\n        this.state = 336;\n        this.match(ECMAScriptParser.OpenParen);\n        this.state = 337;\n        this.match(ECMAScriptParser.Identifier);\n        this.state = 338;\n        this.match(ECMAScriptParser.CloseParen);\n        this.state = 339;\n        this.block();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"finallyProduction\",\n    value: function finallyProduction() {\n      var localctx = new FinallyProductionContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 54, ECMAScriptParser.RULE_finallyProduction);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 341;\n        this.match(ECMAScriptParser.Finally);\n        this.state = 342;\n        this.block();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"debuggerStatement\",\n    value: function debuggerStatement() {\n      var localctx = new DebuggerStatementContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 56, ECMAScriptParser.RULE_debuggerStatement);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 344;\n        this.match(ECMAScriptParser.Debugger);\n        this.state = 345;\n        this.eos();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"functionDeclaration\",\n    value: function functionDeclaration() {\n      var localctx = new FunctionDeclarationContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 58, ECMAScriptParser.RULE_functionDeclaration);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 347;\n        this.match(ECMAScriptParser.Function);\n        this.state = 348;\n        this.match(ECMAScriptParser.Identifier);\n        this.state = 349;\n        this.match(ECMAScriptParser.OpenParen);\n        this.state = 351;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 98) {\n          this.state = 350;\n          this.formalParameterList();\n        }\n        this.state = 353;\n        this.match(ECMAScriptParser.CloseParen);\n        this.state = 354;\n        this.match(ECMAScriptParser.OpenBrace);\n        this.state = 355;\n        this.functionBody();\n        this.state = 356;\n        this.match(ECMAScriptParser.CloseBrace);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"formalParameterList\",\n    value: function formalParameterList() {\n      var localctx = new FormalParameterListContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 60, ECMAScriptParser.RULE_formalParameterList);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 358;\n        this.match(ECMAScriptParser.Identifier);\n        this.state = 363;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === 10) {\n          this.state = 359;\n          this.match(ECMAScriptParser.Comma);\n          this.state = 360;\n          this.match(ECMAScriptParser.Identifier);\n          this.state = 365;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"functionBody\",\n    value: function functionBody() {\n      var localctx = new FunctionBodyContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 62, ECMAScriptParser.RULE_functionBody);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 367;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);\n        if (la_ === 1) {\n          this.state = 366;\n          this.sourceElements();\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"arrayLiteral\",\n    value: function arrayLiteral() {\n      var localctx = new ArrayLiteralContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 64, ECMAScriptParser.RULE_arrayLiteral);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 369;\n        this.match(ECMAScriptParser.OpenBracket);\n        this.state = 371;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 28, this._ctx);\n        if (la_ === 1) {\n          this.state = 370;\n          this.elementList();\n        }\n        this.state = 374;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 29, this._ctx);\n        if (la_ === 1) {\n          this.state = 373;\n          this.match(ECMAScriptParser.Comma);\n        }\n        this.state = 377;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 10) {\n          this.state = 376;\n          this.elision();\n        }\n        this.state = 379;\n        this.match(ECMAScriptParser.CloseBracket);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"elementList\",\n    value: function elementList() {\n      var localctx = new ElementListContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 66, ECMAScriptParser.RULE_elementList);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 382;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === 10) {\n          this.state = 381;\n          this.elision();\n        }\n        this.state = 384;\n        this.singleExpression(0);\n        this.state = 392;\n        this._errHandler.sync(this);\n        var _alt = this._interp.adaptivePredict(this._input, 33, this._ctx);\n        while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.ATN.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            this.state = 385;\n            this.match(ECMAScriptParser.Comma);\n            this.state = 387;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === 10) {\n              this.state = 386;\n              this.elision();\n            }\n            this.state = 389;\n            this.singleExpression(0);\n          }\n          this.state = 394;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 33, this._ctx);\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"elision\",\n    value: function elision() {\n      var localctx = new ElisionContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 68, ECMAScriptParser.RULE_elision);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 396;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        do {\n          this.state = 395;\n          this.match(ECMAScriptParser.Comma);\n          this.state = 398;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        } while (_la === 10);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"objectLiteral\",\n    value: function objectLiteral() {\n      var localctx = new ObjectLiteralContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 70, ECMAScriptParser.RULE_objectLiteral);\n      var _la = 0;\n      try {\n        this.state = 409;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 36, this._ctx);\n        switch (la_) {\n          case 1:\n            this.enterOuterAlt(localctx, 1);\n            this.state = 400;\n            this.match(ECMAScriptParser.OpenBrace);\n            this.state = 401;\n            this.match(ECMAScriptParser.CloseBrace);\n            break;\n          case 2:\n            this.enterOuterAlt(localctx, 2);\n            this.state = 402;\n            this.match(ECMAScriptParser.OpenBrace);\n            this.state = 403;\n            this.propertyNameAndValueList();\n            this.state = 405;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === 10) {\n              this.state = 404;\n              this.match(ECMAScriptParser.Comma);\n            }\n            this.state = 407;\n            this.match(ECMAScriptParser.CloseBrace);\n            break;\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"propertyNameAndValueList\",\n    value: function propertyNameAndValueList() {\n      var localctx = new PropertyNameAndValueListContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 72, ECMAScriptParser.RULE_propertyNameAndValueList);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 411;\n        this.propertyAssignment();\n        this.state = 416;\n        this._errHandler.sync(this);\n        var _alt = this._interp.adaptivePredict(this._input, 37, this._ctx);\n        while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.ATN.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            this.state = 412;\n            this.match(ECMAScriptParser.Comma);\n            this.state = 413;\n            this.propertyAssignment();\n          }\n          this.state = 418;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 37, this._ctx);\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"propertyAssignment\",\n    value: function propertyAssignment() {\n      var localctx = new PropertyAssignmentContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 74, ECMAScriptParser.RULE_propertyAssignment);\n      try {\n        this.state = 438;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 38, this._ctx);\n        switch (la_) {\n          case 1:\n            localctx = new PropertyExpressionAssignmentContext(this, localctx);\n            this.enterOuterAlt(localctx, 1);\n            this.state = 419;\n            this.propertyName();\n            this.state = 420;\n            this.match(ECMAScriptParser.Colon);\n            this.state = 421;\n            this.singleExpression(0);\n            break;\n          case 2:\n            localctx = new PropertyGetterContext(this, localctx);\n            this.enterOuterAlt(localctx, 2);\n            this.state = 423;\n            this.getter();\n            this.state = 424;\n            this.match(ECMAScriptParser.OpenParen);\n            this.state = 425;\n            this.match(ECMAScriptParser.CloseParen);\n            this.state = 426;\n            this.match(ECMAScriptParser.OpenBrace);\n            this.state = 427;\n            this.functionBody();\n            this.state = 428;\n            this.match(ECMAScriptParser.CloseBrace);\n            break;\n          case 3:\n            localctx = new PropertySetterContext(this, localctx);\n            this.enterOuterAlt(localctx, 3);\n            this.state = 430;\n            this.setter();\n            this.state = 431;\n            this.match(ECMAScriptParser.OpenParen);\n            this.state = 432;\n            this.propertySetParameterList();\n            this.state = 433;\n            this.match(ECMAScriptParser.CloseParen);\n            this.state = 434;\n            this.match(ECMAScriptParser.OpenBrace);\n            this.state = 435;\n            this.functionBody();\n            this.state = 436;\n            this.match(ECMAScriptParser.CloseBrace);\n            break;\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"propertyName\",\n    value: function propertyName() {\n      var localctx = new PropertyNameContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 76, ECMAScriptParser.RULE_propertyName);\n      try {\n        this.state = 443;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 51:\n          case 52:\n          case 56:\n          case 57:\n          case 58:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 63:\n          case 64:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 91:\n          case 92:\n          case 93:\n          case 94:\n          case 95:\n          case 96:\n          case 97:\n          case 98:\n            this.enterOuterAlt(localctx, 1);\n            this.state = 440;\n            this.identifierName();\n            break;\n          case 99:\n            this.enterOuterAlt(localctx, 2);\n            this.state = 441;\n            this.match(ECMAScriptParser.StringLiteral);\n            break;\n          case 53:\n          case 54:\n          case 55:\n            this.enterOuterAlt(localctx, 3);\n            this.state = 442;\n            this.numericLiteral();\n            break;\n          default:\n            throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.NoViableAltException(this);\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"propertySetParameterList\",\n    value: function propertySetParameterList() {\n      var localctx = new PropertySetParameterListContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 78, ECMAScriptParser.RULE_propertySetParameterList);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 445;\n        this.match(ECMAScriptParser.Identifier);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"arguments\",\n    value: function _arguments() {\n      var localctx = new ArgumentsContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 80, ECMAScriptParser.RULE_arguments);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 447;\n        this.match(ECMAScriptParser.OpenParen);\n        this.state = 449;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if ((_la & ~0x1f) === 0 && (1 << _la & 2064554) !== 0 || (_la - 51 & ~0x1f) === 0 && (1 << _la - 51 & 281086239) !== 0 || _la === 98 || _la === 99) {\n          this.state = 448;\n          this.argumentList();\n        }\n        this.state = 451;\n        this.match(ECMAScriptParser.CloseParen);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"argumentList\",\n    value: function argumentList() {\n      var localctx = new ArgumentListContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 82, ECMAScriptParser.RULE_argumentList);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 453;\n        this.singleExpression(0);\n        this.state = 458;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === 10) {\n          this.state = 454;\n          this.match(ECMAScriptParser.Comma);\n          this.state = 455;\n          this.singleExpression(0);\n          this.state = 460;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      var localctx = new ExpressionSequenceContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 84, ECMAScriptParser.RULE_expressionSequence);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 461;\n        this.singleExpression(0);\n        this.state = 466;\n        this._errHandler.sync(this);\n        var _alt = this._interp.adaptivePredict(this._input, 42, this._ctx);\n        while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.ATN.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            this.state = 462;\n            this.match(ECMAScriptParser.Comma);\n            this.state = 463;\n            this.singleExpression(0);\n          }\n          this.state = 468;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 42, this._ctx);\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression(_p) {\n      if (_p === undefined) {\n        _p = 0;\n      }\n      var _parentctx = this._ctx;\n      var _parentState = this.state;\n      var localctx = new SingleExpressionContext(this, this._ctx, _parentState);\n      var _prevctx = localctx;\n      var _startState = 86;\n      this.enterRecursionRule(localctx, 86, ECMAScriptParser.RULE_singleExpression, _p);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 515;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 73:\n            localctx = new FunctionExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 470;\n            this.match(ECMAScriptParser.Function);\n            this.state = 472;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === 98) {\n              this.state = 471;\n              this.match(ECMAScriptParser.Identifier);\n            }\n            this.state = 474;\n            this.match(ECMAScriptParser.OpenParen);\n            this.state = 476;\n            this._errHandler.sync(this);\n            _la = this._input.LA(1);\n            if (_la === 98) {\n              this.state = 475;\n              this.formalParameterList();\n            }\n            this.state = 478;\n            this.match(ECMAScriptParser.CloseParen);\n            this.state = 479;\n            this.match(ECMAScriptParser.OpenBrace);\n            this.state = 480;\n            this.functionBody();\n            this.state = 481;\n            this.match(ECMAScriptParser.CloseBrace);\n            break;\n          case 62:\n            localctx = new NewExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 483;\n            this.match(ECMAScriptParser.New);\n            this.state = 484;\n            this.singleExpression(0);\n            this.state = 486;\n            this._errHandler.sync(this);\n            var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);\n            if (la_ === 1) {\n              this.state = 485;\n              this.arguments();\n            }\n            break;\n          case 79:\n            localctx = new DeleteExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 488;\n            this.match(ECMAScriptParser.Delete);\n            this.state = 489;\n            this.singleExpression(30);\n            break;\n          case 67:\n            localctx = new VoidExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 490;\n            this.match(ECMAScriptParser.Void);\n            this.state = 491;\n            this.singleExpression(29);\n            break;\n          case 59:\n            localctx = new TypeofExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 492;\n            this.match(ECMAScriptParser.Typeof);\n            this.state = 493;\n            this.singleExpression(28);\n            break;\n          case 15:\n            localctx = new PreIncrementExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 494;\n            this.match(ECMAScriptParser.PlusPlus);\n            this.state = 495;\n            this.singleExpression(27);\n            break;\n          case 16:\n            localctx = new PreDecreaseExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 496;\n            this.match(ECMAScriptParser.MinusMinus);\n            this.state = 497;\n            this.singleExpression(26);\n            break;\n          case 17:\n            localctx = new UnaryPlusExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 498;\n            this.match(ECMAScriptParser.Plus);\n            this.state = 499;\n            this.singleExpression(25);\n            break;\n          case 18:\n            localctx = new UnaryMinusExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 500;\n            this.match(ECMAScriptParser.Minus);\n            this.state = 501;\n            this.singleExpression(24);\n            break;\n          case 19:\n            localctx = new BitNotExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 502;\n            this.match(ECMAScriptParser.BitNot);\n            this.state = 503;\n            this.singleExpression(23);\n            break;\n          case 20:\n            localctx = new NotExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 504;\n            this.match(ECMAScriptParser.Not);\n            this.state = 505;\n            this.singleExpression(22);\n            break;\n          case 74:\n            localctx = new ThisExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 506;\n            this.match(ECMAScriptParser.This);\n            break;\n          case 98:\n            localctx = new IdentifierExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 507;\n            this.match(ECMAScriptParser.Identifier);\n            break;\n          case 1:\n          case 51:\n          case 52:\n          case 53:\n          case 54:\n          case 55:\n          case 99:\n            localctx = new LiteralExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 508;\n            this.literal();\n            break;\n          case 3:\n            localctx = new ArrayLiteralExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 509;\n            this.arrayLiteral();\n            break;\n          case 7:\n            localctx = new ObjectLiteralExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 510;\n            this.objectLiteral();\n            break;\n          case 5:\n            localctx = new ParenthesizedExpressionContext(this, localctx);\n            this._ctx = localctx;\n            _prevctx = localctx;\n            this.state = 511;\n            this.match(ECMAScriptParser.OpenParen);\n            this.state = 512;\n            this.expressionSequence();\n            this.state = 513;\n            this.match(ECMAScriptParser.CloseParen);\n            break;\n          default:\n            throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.NoViableAltException(this);\n        }\n        this._ctx.stop = this._input.LT(-1);\n        this.state = 584;\n        this._errHandler.sync(this);\n        var _alt = this._interp.adaptivePredict(this._input, 48, this._ctx);\n        while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].atn.ATN.INVALID_ALT_NUMBER) {\n          if (_alt === 1) {\n            if (this._parseListeners !== null) {\n              this.triggerExitRuleEvent();\n            }\n            _prevctx = localctx;\n            this.state = 582;\n            this._errHandler.sync(this);\n            var la_ = this._interp.adaptivePredict(this._input, 47, this._ctx);\n            switch (la_) {\n              case 1:\n                localctx = new MultiplicativeExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 517;\n                if (!this.precpred(this._ctx, 21)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 21)\");\n                }\n                this.state = 518;\n                _la = this._input.LA(1);\n                if (!((_la & ~0x1f) === 0 && (1 << _la & 14680064) !== 0)) {\n                  this._errHandler.recoverInline(this);\n                } else {\n                  this._errHandler.reportMatch(this);\n                  this.consume();\n                }\n                this.state = 519;\n                this.singleExpression(22);\n                break;\n              case 2:\n                localctx = new AdditiveExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 520;\n                if (!this.precpred(this._ctx, 20)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 20)\");\n                }\n                this.state = 521;\n                _la = this._input.LA(1);\n                if (!(_la === 17 || _la === 18)) {\n                  this._errHandler.recoverInline(this);\n                } else {\n                  this._errHandler.reportMatch(this);\n                  this.consume();\n                }\n                this.state = 522;\n                this.singleExpression(21);\n                break;\n              case 3:\n                localctx = new BitShiftExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 523;\n                if (!this.precpred(this._ctx, 19)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 19)\");\n                }\n                this.state = 524;\n                _la = this._input.LA(1);\n                if (!((_la & ~0x1f) === 0 && (1 << _la & 117440512) !== 0)) {\n                  this._errHandler.recoverInline(this);\n                } else {\n                  this._errHandler.reportMatch(this);\n                  this.consume();\n                }\n                this.state = 525;\n                this.singleExpression(20);\n                break;\n              case 4:\n                localctx = new RelationalExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 526;\n                if (!this.precpred(this._ctx, 18)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 18)\");\n                }\n                this.state = 527;\n                _la = this._input.LA(1);\n                if (!((_la & ~0x1f) === 0 && (1 << _la & 2013265920) !== 0)) {\n                  this._errHandler.recoverInline(this);\n                } else {\n                  this._errHandler.reportMatch(this);\n                  this.consume();\n                }\n                this.state = 528;\n                this.singleExpression(19);\n                break;\n              case 5:\n                localctx = new InstanceofExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 529;\n                if (!this.precpred(this._ctx, 17)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 17)\");\n                }\n                this.state = 530;\n                this.match(ECMAScriptParser.Instanceof);\n                this.state = 531;\n                this.singleExpression(18);\n                break;\n              case 6:\n                localctx = new InExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 532;\n                if (!this.precpred(this._ctx, 16)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 16)\");\n                }\n                this.state = 533;\n                this.match(ECMAScriptParser.In);\n                this.state = 534;\n                this.singleExpression(17);\n                break;\n              case 7:\n                localctx = new EqualityExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 535;\n                if (!this.precpred(this._ctx, 15)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 15)\");\n                }\n                this.state = 536;\n                _la = this._input.LA(1);\n                if (!((_la - 31 & ~0x1f) === 0 && (1 << _la - 31 & 15) !== 0)) {\n                  this._errHandler.recoverInline(this);\n                } else {\n                  this._errHandler.reportMatch(this);\n                  this.consume();\n                }\n                this.state = 537;\n                this.singleExpression(16);\n                break;\n              case 8:\n                localctx = new BitAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 538;\n                if (!this.precpred(this._ctx, 14)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 14)\");\n                }\n                this.state = 539;\n                this.match(ECMAScriptParser.BitAnd);\n                this.state = 540;\n                this.singleExpression(15);\n                break;\n              case 9:\n                localctx = new BitXOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 541;\n                if (!this.precpred(this._ctx, 13)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 13)\");\n                }\n                this.state = 542;\n                this.match(ECMAScriptParser.BitXOr);\n                this.state = 543;\n                this.singleExpression(14);\n                break;\n              case 10:\n                localctx = new BitOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 544;\n                if (!this.precpred(this._ctx, 12)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 12)\");\n                }\n                this.state = 545;\n                this.match(ECMAScriptParser.BitOr);\n                this.state = 546;\n                this.singleExpression(13);\n                break;\n              case 11:\n                localctx = new LogicalAndExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 547;\n                if (!this.precpred(this._ctx, 11)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 11)\");\n                }\n                this.state = 548;\n                this.match(ECMAScriptParser.And);\n                this.state = 549;\n                this.singleExpression(12);\n                break;\n              case 12:\n                localctx = new LogicalOrExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 550;\n                if (!this.precpred(this._ctx, 10)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 10)\");\n                }\n                this.state = 551;\n                this.match(ECMAScriptParser.Or);\n                this.state = 552;\n                this.singleExpression(11);\n                break;\n              case 13:\n                localctx = new TernaryExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 553;\n                if (!this.precpred(this._ctx, 9)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 9)\");\n                }\n                this.state = 554;\n                this.match(ECMAScriptParser.QuestionMark);\n                this.state = 555;\n                this.singleExpression(0);\n                this.state = 556;\n                this.match(ECMAScriptParser.Colon);\n                this.state = 557;\n                this.singleExpression(10);\n                break;\n              case 14:\n                localctx = new AssignmentExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 559;\n                if (!this.precpred(this._ctx, 8)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 8)\");\n                }\n                this.state = 560;\n                this.match(ECMAScriptParser.Assign);\n                this.state = 561;\n                this.singleExpression(9);\n                break;\n              case 15:\n                localctx = new AssignmentOperatorExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 562;\n                if (!this.precpred(this._ctx, 7)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 7)\");\n                }\n                this.state = 563;\n                this.assignmentOperator();\n                this.state = 564;\n                this.singleExpression(8);\n                break;\n              case 16:\n                localctx = new MemberIndexExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 566;\n                if (!this.precpred(this._ctx, 36)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 36)\");\n                }\n                this.state = 567;\n                this.match(ECMAScriptParser.OpenBracket);\n                this.state = 568;\n                this.expressionSequence();\n                this.state = 569;\n                this.match(ECMAScriptParser.CloseBracket);\n                break;\n              case 17:\n                localctx = new MemberDotExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 571;\n                if (!this.precpred(this._ctx, 35)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 35)\");\n                }\n                this.state = 572;\n                this.match(ECMAScriptParser.Dot);\n                this.state = 573;\n                this.identifierName();\n                break;\n              case 18:\n                localctx = new ArgumentsExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 574;\n                if (!this.precpred(this._ctx, 34)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 34)\");\n                }\n                this.state = 575;\n                this.arguments();\n                break;\n              case 19:\n                localctx = new PostIncrementExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 576;\n                if (!this.precpred(this._ctx, 32)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 32)\");\n                }\n                this.state = 577;\n                if (!!here(LineTerminator)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"!here(LineTerminator)\");\n                }\n                this.state = 578;\n                this.match(ECMAScriptParser.PlusPlus);\n                break;\n              case 20:\n                localctx = new PostDecreaseExpressionContext(this, new SingleExpressionContext(this, _parentctx, _parentState));\n                this.pushNewRecursionContext(localctx, _startState, ECMAScriptParser.RULE_singleExpression);\n                this.state = 579;\n                if (!this.precpred(this._ctx, 31)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"this.precpred(this._ctx, 31)\");\n                }\n                this.state = 580;\n                if (!!here(LineTerminator)) {\n                  throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"!here(LineTerminator)\");\n                }\n                this.state = 581;\n                this.match(ECMAScriptParser.MinusMinus);\n                break;\n            }\n          }\n          this.state = 586;\n          this._errHandler.sync(this);\n          _alt = this._interp.adaptivePredict(this._input, 48, this._ctx);\n        }\n      } catch (error) {\n        if (error instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = error;\n          this._errHandler.reportError(this, error);\n          this._errHandler.recover(this, error);\n        } else {\n          throw error;\n        }\n      } finally {\n        this.unrollRecursionContexts(_parentctx);\n      }\n      return localctx;\n    }\n  }, {\n    key: \"assignmentOperator\",\n    value: function assignmentOperator() {\n      var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 88, ECMAScriptParser.RULE_assignmentOperator);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 587;\n        _la = this._input.LA(1);\n        if (!((_la - 40 & ~0x1f) === 0 && (1 << _la - 40 & 2047) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"literal\",\n    value: function literal() {\n      var localctx = new LiteralContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 90, ECMAScriptParser.RULE_literal);\n      var _la = 0;\n      try {\n        this.state = 591;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 1:\n          case 51:\n          case 52:\n          case 99:\n            this.enterOuterAlt(localctx, 1);\n            this.state = 589;\n            _la = this._input.LA(1);\n            if (!(_la === 1 || _la === 51 || _la === 52 || _la === 99)) {\n              this._errHandler.recoverInline(this);\n            } else {\n              this._errHandler.reportMatch(this);\n              this.consume();\n            }\n            break;\n          case 53:\n          case 54:\n          case 55:\n            this.enterOuterAlt(localctx, 2);\n            this.state = 590;\n            this.numericLiteral();\n            break;\n          default:\n            throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.NoViableAltException(this);\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"numericLiteral\",\n    value: function numericLiteral() {\n      var localctx = new NumericLiteralContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 92, ECMAScriptParser.RULE_numericLiteral);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 593;\n        _la = this._input.LA(1);\n        if (!((_la - 53 & ~0x1f) === 0 && (1 << _la - 53 & 7) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"identifierName\",\n    value: function identifierName() {\n      var localctx = new IdentifierNameContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 94, ECMAScriptParser.RULE_identifierName);\n      try {\n        this.state = 597;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 98:\n            this.enterOuterAlt(localctx, 1);\n            this.state = 595;\n            this.match(ECMAScriptParser.Identifier);\n            break;\n          case 51:\n          case 52:\n          case 56:\n          case 57:\n          case 58:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 63:\n          case 64:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 91:\n          case 92:\n          case 93:\n          case 94:\n          case 95:\n          case 96:\n          case 97:\n            this.enterOuterAlt(localctx, 2);\n            this.state = 596;\n            this.reservedWord();\n            break;\n          default:\n            throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.NoViableAltException(this);\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"reservedWord\",\n    value: function reservedWord() {\n      var localctx = new ReservedWordContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 96, ECMAScriptParser.RULE_reservedWord);\n      var _la = 0;\n      try {\n        this.state = 602;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case 56:\n          case 57:\n          case 58:\n          case 59:\n          case 60:\n          case 61:\n          case 62:\n          case 63:\n          case 64:\n          case 65:\n          case 66:\n          case 67:\n          case 68:\n          case 69:\n          case 70:\n          case 71:\n          case 72:\n          case 73:\n          case 74:\n          case 75:\n          case 76:\n          case 77:\n          case 78:\n          case 79:\n          case 80:\n          case 81:\n            this.enterOuterAlt(localctx, 1);\n            this.state = 599;\n            this.keyword();\n            break;\n          case 82:\n          case 83:\n          case 84:\n          case 85:\n          case 86:\n          case 87:\n          case 88:\n          case 89:\n          case 90:\n          case 91:\n          case 92:\n          case 93:\n          case 94:\n          case 95:\n          case 96:\n          case 97:\n            this.enterOuterAlt(localctx, 2);\n            this.state = 600;\n            this.futureReservedWord();\n            break;\n          case 51:\n          case 52:\n            this.enterOuterAlt(localctx, 3);\n            this.state = 601;\n            _la = this._input.LA(1);\n            if (!(_la === 51 || _la === 52)) {\n              this._errHandler.recoverInline(this);\n            } else {\n              this._errHandler.reportMatch(this);\n              this.consume();\n            }\n            break;\n          default:\n            throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.NoViableAltException(this);\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"keyword\",\n    value: function keyword() {\n      var localctx = new KeywordContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 98, ECMAScriptParser.RULE_keyword);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 604;\n        _la = this._input.LA(1);\n        if (!((_la - 56 & ~0x1f) === 0 && (1 << _la - 56 & 67108863) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"futureReservedWord\",\n    value: function futureReservedWord() {\n      var localctx = new FutureReservedWordContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 100, ECMAScriptParser.RULE_futureReservedWord);\n      var _la = 0;\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 606;\n        _la = this._input.LA(1);\n        if (!((_la - 82 & ~0x1f) === 0 && (1 << _la - 82 & 65535) !== 0)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"getter\",\n    value: function getter() {\n      var localctx = new GetterContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 102, ECMAScriptParser.RULE_getter);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 608;\n        if (!_input.LT(1).getText().equals(\"get\")) {\n          throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"_input.LT(1).getText().equals(\\\"get\\\")\");\n        }\n        this.state = 609;\n        this.match(ECMAScriptParser.Identifier);\n        this.state = 610;\n        this.propertyName();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"setter\",\n    value: function setter() {\n      var localctx = new SetterContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 104, ECMAScriptParser.RULE_setter);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 612;\n        if (!_input.LT(1).getText().equals(\"set\")) {\n          throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"_input.LT(1).getText().equals(\\\"set\\\")\");\n        }\n        this.state = 613;\n        this.match(ECMAScriptParser.Identifier);\n        this.state = 614;\n        this.propertyName();\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"eos\",\n    value: function eos() {\n      var localctx = new EosContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 106, ECMAScriptParser.RULE_eos);\n      try {\n        this.state = 620;\n        this._errHandler.sync(this);\n        var la_ = this._interp.adaptivePredict(this._input, 52, this._ctx);\n        switch (la_) {\n          case 1:\n            this.enterOuterAlt(localctx, 1);\n            this.state = 616;\n            this.match(ECMAScriptParser.SemiColon);\n            break;\n          case 2:\n            this.enterOuterAlt(localctx, 2);\n            this.state = 617;\n            this.match(ECMAScriptParser.EOF);\n            break;\n          case 3:\n            this.enterOuterAlt(localctx, 3);\n            this.state = 618;\n            if (!lineTerminatorAhead()) {\n              throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"lineTerminatorAhead()\");\n            }\n            break;\n          case 4:\n            this.enterOuterAlt(localctx, 4);\n            this.state = 619;\n            if (!(_input.LT(1).getType() == CloseBrace)) {\n              throw new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.FailedPredicateException(this, \"_input.LT(1).getType() == CloseBrace\");\n            }\n            break;\n        }\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }, {\n    key: \"eof\",\n    value: function eof() {\n      var localctx = new EofContext(this, this._ctx, this.state);\n      this.enterRule(localctx, 108, ECMAScriptParser.RULE_eof);\n      try {\n        this.enterOuterAlt(localctx, 1);\n        this.state = 622;\n        this.match(ECMAScriptParser.EOF);\n      } catch (re) {\n        if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error.RecognitionException) {\n          localctx.exception = re;\n          this._errHandler.reportError(this, re);\n          this._errHandler.recover(this, re);\n        } else {\n          throw re;\n        }\n      } finally {\n        this.exitRule();\n      }\n      return localctx;\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Parser);\n_defineProperty(ECMAScriptParser, \"grammarFileName\", \"ECMAScript.g4\");\n_defineProperty(ECMAScriptParser, \"literalNames\", [null, null, null, \"'['\", \"']'\", \"'('\", \"')'\", \"'{'\", \"'}'\", \"';'\", \"','\", \"'='\", \"'?'\", \"':'\", \"'.'\", \"'++'\", \"'--'\", \"'+'\", \"'-'\", \"'~'\", \"'!'\", \"'*'\", \"'/'\", \"'%'\", \"'>>'\", \"'<<'\", \"'>>>'\", \"'<'\", \"'>'\", \"'<='\", \"'>='\", \"'=='\", \"'!='\", \"'==='\", \"'!=='\", \"'&'\", \"'^'\", \"'|'\", \"'&&'\", \"'||'\", \"'*='\", \"'/='\", \"'%='\", \"'+='\", \"'-='\", \"'<<='\", \"'>>='\", \"'>>>='\", \"'&='\", \"'^='\", \"'|='\", \"'null'\", null, null, null, null, \"'break'\", \"'do'\", \"'instanceof'\", \"'typeof'\", \"'case'\", \"'else'\", \"'new'\", \"'var'\", \"'catch'\", \"'finally'\", \"'return'\", \"'void'\", \"'continue'\", \"'for'\", \"'switch'\", \"'while'\", \"'debugger'\", \"'function'\", \"'this'\", \"'with'\", \"'default'\", \"'if'\", \"'throw'\", \"'delete'\", \"'in'\", \"'try'\", \"'class'\", \"'enum'\", \"'extends'\", \"'super'\", \"'const'\", \"'export'\", \"'import'\"]);\n_defineProperty(ECMAScriptParser, \"symbolicNames\", [null, \"RegularExpressionLiteral\", \"LineTerminator\", \"OpenBracket\", \"CloseBracket\", \"OpenParen\", \"CloseParen\", \"OpenBrace\", \"CloseBrace\", \"SemiColon\", \"Comma\", \"Assign\", \"QuestionMark\", \"Colon\", \"Dot\", \"PlusPlus\", \"MinusMinus\", \"Plus\", \"Minus\", \"BitNot\", \"Not\", \"Multiply\", \"Divide\", \"Modulus\", \"RightShiftArithmetic\", \"LeftShiftArithmetic\", \"RightShiftLogical\", \"LessThan\", \"MoreThan\", \"LessThanEquals\", \"GreaterThanEquals\", \"Equals\", \"NotEquals\", \"IdentityEquals\", \"IdentityNotEquals\", \"BitAnd\", \"BitXOr\", \"BitOr\", \"And\", \"Or\", \"MultiplyAssign\", \"DivideAssign\", \"ModulusAssign\", \"PlusAssign\", \"MinusAssign\", \"LeftShiftArithmeticAssign\", \"RightShiftArithmeticAssign\", \"RightShiftLogicalAssign\", \"BitAndAssign\", \"BitXorAssign\", \"BitOrAssign\", \"NullLiteral\", \"BooleanLiteral\", \"DecimalLiteral\", \"HexIntegerLiteral\", \"OctalIntegerLiteral\", \"Break\", \"Do\", \"Instanceof\", \"Typeof\", \"Case\", \"Else\", \"New\", \"Var\", \"Catch\", \"Finally\", \"Return\", \"Void\", \"Continue\", \"For\", \"Switch\", \"While\", \"Debugger\", \"Function\", \"This\", \"With\", \"Default\", \"If\", \"Throw\", \"Delete\", \"In\", \"Try\", \"Class\", \"Enum\", \"Extends\", \"Super\", \"Const\", \"Export\", \"Import\", \"Implements\", \"Let\", \"Private\", \"Public\", \"Interface\", \"Package\", \"Protected\", \"Static\", \"Yield\", \"Identifier\", \"StringLiteral\", \"WhiteSpaces\", \"MultiLineComment\", \"SingleLineComment\", \"UnexpectedCharacter\"]);\n_defineProperty(ECMAScriptParser, \"ruleNames\", [\"program\", \"sourceElements\", \"sourceElement\", \"statement\", \"block\", \"statementList\", \"variableStatement\", \"variableDeclarationList\", \"variableDeclaration\", \"initialiser\", \"emptyStatement_\", \"expressionStatement\", \"ifStatement\", \"iterationStatement\", \"continueStatement\", \"breakStatement\", \"returnStatement\", \"withStatement\", \"switchStatement\", \"caseBlock\", \"caseClauses\", \"caseClause\", \"defaultClause\", \"labelledStatement\", \"throwStatement\", \"tryStatement\", \"catchProduction\", \"finallyProduction\", \"debuggerStatement\", \"functionDeclaration\", \"formalParameterList\", \"functionBody\", \"arrayLiteral\", \"elementList\", \"elision\", \"objectLiteral\", \"propertyNameAndValueList\", \"propertyAssignment\", \"propertyName\", \"propertySetParameterList\", \"arguments\", \"argumentList\", \"expressionSequence\", \"singleExpression\", \"assignmentOperator\", \"literal\", \"numericLiteral\", \"identifierName\", \"reservedWord\", \"keyword\", \"futureReservedWord\", \"getter\", \"setter\", \"eos\", \"eof\"]);\n\nECMAScriptParser.EOF = antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Token.EOF;\nECMAScriptParser.RegularExpressionLiteral = 1;\nECMAScriptParser.LineTerminator = 2;\nECMAScriptParser.OpenBracket = 3;\nECMAScriptParser.CloseBracket = 4;\nECMAScriptParser.OpenParen = 5;\nECMAScriptParser.CloseParen = 6;\nECMAScriptParser.OpenBrace = 7;\nECMAScriptParser.CloseBrace = 8;\nECMAScriptParser.SemiColon = 9;\nECMAScriptParser.Comma = 10;\nECMAScriptParser.Assign = 11;\nECMAScriptParser.QuestionMark = 12;\nECMAScriptParser.Colon = 13;\nECMAScriptParser.Dot = 14;\nECMAScriptParser.PlusPlus = 15;\nECMAScriptParser.MinusMinus = 16;\nECMAScriptParser.Plus = 17;\nECMAScriptParser.Minus = 18;\nECMAScriptParser.BitNot = 19;\nECMAScriptParser.Not = 20;\nECMAScriptParser.Multiply = 21;\nECMAScriptParser.Divide = 22;\nECMAScriptParser.Modulus = 23;\nECMAScriptParser.RightShiftArithmetic = 24;\nECMAScriptParser.LeftShiftArithmetic = 25;\nECMAScriptParser.RightShiftLogical = 26;\nECMAScriptParser.LessThan = 27;\nECMAScriptParser.MoreThan = 28;\nECMAScriptParser.LessThanEquals = 29;\nECMAScriptParser.GreaterThanEquals = 30;\nECMAScriptParser.Equals = 31;\nECMAScriptParser.NotEquals = 32;\nECMAScriptParser.IdentityEquals = 33;\nECMAScriptParser.IdentityNotEquals = 34;\nECMAScriptParser.BitAnd = 35;\nECMAScriptParser.BitXOr = 36;\nECMAScriptParser.BitOr = 37;\nECMAScriptParser.And = 38;\nECMAScriptParser.Or = 39;\nECMAScriptParser.MultiplyAssign = 40;\nECMAScriptParser.DivideAssign = 41;\nECMAScriptParser.ModulusAssign = 42;\nECMAScriptParser.PlusAssign = 43;\nECMAScriptParser.MinusAssign = 44;\nECMAScriptParser.LeftShiftArithmeticAssign = 45;\nECMAScriptParser.RightShiftArithmeticAssign = 46;\nECMAScriptParser.RightShiftLogicalAssign = 47;\nECMAScriptParser.BitAndAssign = 48;\nECMAScriptParser.BitXorAssign = 49;\nECMAScriptParser.BitOrAssign = 50;\nECMAScriptParser.NullLiteral = 51;\nECMAScriptParser.BooleanLiteral = 52;\nECMAScriptParser.DecimalLiteral = 53;\nECMAScriptParser.HexIntegerLiteral = 54;\nECMAScriptParser.OctalIntegerLiteral = 55;\nECMAScriptParser.Break = 56;\nECMAScriptParser.Do = 57;\nECMAScriptParser.Instanceof = 58;\nECMAScriptParser.Typeof = 59;\nECMAScriptParser.Case = 60;\nECMAScriptParser.Else = 61;\nECMAScriptParser.New = 62;\nECMAScriptParser.Var = 63;\nECMAScriptParser.Catch = 64;\nECMAScriptParser.Finally = 65;\nECMAScriptParser.Return = 66;\nECMAScriptParser.Void = 67;\nECMAScriptParser.Continue = 68;\nECMAScriptParser.For = 69;\nECMAScriptParser.Switch = 70;\nECMAScriptParser.While = 71;\nECMAScriptParser.Debugger = 72;\nECMAScriptParser.Function = 73;\nECMAScriptParser.This = 74;\nECMAScriptParser.With = 75;\nECMAScriptParser.Default = 76;\nECMAScriptParser.If = 77;\nECMAScriptParser.Throw = 78;\nECMAScriptParser.Delete = 79;\nECMAScriptParser.In = 80;\nECMAScriptParser.Try = 81;\nECMAScriptParser.Class = 82;\nECMAScriptParser.Enum = 83;\nECMAScriptParser.Extends = 84;\nECMAScriptParser.Super = 85;\nECMAScriptParser.Const = 86;\nECMAScriptParser.Export = 87;\nECMAScriptParser.Import = 88;\nECMAScriptParser.Implements = 89;\nECMAScriptParser.Let = 90;\nECMAScriptParser.Private = 91;\nECMAScriptParser.Public = 92;\nECMAScriptParser.Interface = 93;\nECMAScriptParser.Package = 94;\nECMAScriptParser.Protected = 95;\nECMAScriptParser.Static = 96;\nECMAScriptParser.Yield = 97;\nECMAScriptParser.Identifier = 98;\nECMAScriptParser.StringLiteral = 99;\nECMAScriptParser.WhiteSpaces = 100;\nECMAScriptParser.MultiLineComment = 101;\nECMAScriptParser.SingleLineComment = 102;\nECMAScriptParser.UnexpectedCharacter = 103;\nECMAScriptParser.RULE_program = 0;\nECMAScriptParser.RULE_sourceElements = 1;\nECMAScriptParser.RULE_sourceElement = 2;\nECMAScriptParser.RULE_statement = 3;\nECMAScriptParser.RULE_block = 4;\nECMAScriptParser.RULE_statementList = 5;\nECMAScriptParser.RULE_variableStatement = 6;\nECMAScriptParser.RULE_variableDeclarationList = 7;\nECMAScriptParser.RULE_variableDeclaration = 8;\nECMAScriptParser.RULE_initialiser = 9;\nECMAScriptParser.RULE_emptyStatement_ = 10;\nECMAScriptParser.RULE_expressionStatement = 11;\nECMAScriptParser.RULE_ifStatement = 12;\nECMAScriptParser.RULE_iterationStatement = 13;\nECMAScriptParser.RULE_continueStatement = 14;\nECMAScriptParser.RULE_breakStatement = 15;\nECMAScriptParser.RULE_returnStatement = 16;\nECMAScriptParser.RULE_withStatement = 17;\nECMAScriptParser.RULE_switchStatement = 18;\nECMAScriptParser.RULE_caseBlock = 19;\nECMAScriptParser.RULE_caseClauses = 20;\nECMAScriptParser.RULE_caseClause = 21;\nECMAScriptParser.RULE_defaultClause = 22;\nECMAScriptParser.RULE_labelledStatement = 23;\nECMAScriptParser.RULE_throwStatement = 24;\nECMAScriptParser.RULE_tryStatement = 25;\nECMAScriptParser.RULE_catchProduction = 26;\nECMAScriptParser.RULE_finallyProduction = 27;\nECMAScriptParser.RULE_debuggerStatement = 28;\nECMAScriptParser.RULE_functionDeclaration = 29;\nECMAScriptParser.RULE_formalParameterList = 30;\nECMAScriptParser.RULE_functionBody = 31;\nECMAScriptParser.RULE_arrayLiteral = 32;\nECMAScriptParser.RULE_elementList = 33;\nECMAScriptParser.RULE_elision = 34;\nECMAScriptParser.RULE_objectLiteral = 35;\nECMAScriptParser.RULE_propertyNameAndValueList = 36;\nECMAScriptParser.RULE_propertyAssignment = 37;\nECMAScriptParser.RULE_propertyName = 38;\nECMAScriptParser.RULE_propertySetParameterList = 39;\nECMAScriptParser.RULE_arguments = 40;\nECMAScriptParser.RULE_argumentList = 41;\nECMAScriptParser.RULE_expressionSequence = 42;\nECMAScriptParser.RULE_singleExpression = 43;\nECMAScriptParser.RULE_assignmentOperator = 44;\nECMAScriptParser.RULE_literal = 45;\nECMAScriptParser.RULE_numericLiteral = 46;\nECMAScriptParser.RULE_identifierName = 47;\nECMAScriptParser.RULE_reservedWord = 48;\nECMAScriptParser.RULE_keyword = 49;\nECMAScriptParser.RULE_futureReservedWord = 50;\nECMAScriptParser.RULE_getter = 51;\nECMAScriptParser.RULE_setter = 52;\nECMAScriptParser.RULE_eos = 53;\nECMAScriptParser.RULE_eof = 54;\nvar ProgramContext = /*#__PURE__*/function (_antlr4$ParserRuleCon) {\n  function ProgramContext(parser, parent, invokingState) {\n    var _this2;\n    _classCallCheck(this, ProgramContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this2 = _callSuper(this, ProgramContext, [parent, invokingState]);\n    _this2.parser = parser;\n    _this2.ruleIndex = ECMAScriptParser.RULE_program;\n    return _this2;\n  }\n  _inherits(ProgramContext, _antlr4$ParserRuleCon);\n  return _createClass(ProgramContext, [{\n    key: \"EOF\",\n    value: function EOF() {\n      return this.getToken(ECMAScriptParser.EOF, 0);\n    }\n  }, {\n    key: \"sourceElements\",\n    value: function sourceElements() {\n      return this.getTypedRuleContext(SourceElementsContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterProgram(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitProgram(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar SourceElementsContext = /*#__PURE__*/function (_antlr4$ParserRuleCon2) {\n  function SourceElementsContext(parser, parent, invokingState) {\n    var _this3;\n    _classCallCheck(this, SourceElementsContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this3 = _callSuper(this, SourceElementsContext, [parent, invokingState]);\n    _defineProperty(_this3, \"sourceElement\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SourceElementContext);\n      } else {\n        return this.getTypedRuleContext(SourceElementContext, i);\n      }\n    });\n    _this3.parser = parser;\n    _this3.ruleIndex = ECMAScriptParser.RULE_sourceElements;\n    return _this3;\n  }\n  _inherits(SourceElementsContext, _antlr4$ParserRuleCon2);\n  return _createClass(SourceElementsContext, [{\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterSourceElements(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitSourceElements(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar SourceElementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon3) {\n  function SourceElementContext(parser, parent, invokingState) {\n    var _this4;\n    _classCallCheck(this, SourceElementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this4 = _callSuper(this, SourceElementContext, [parent, invokingState]);\n    _this4.parser = parser;\n    _this4.ruleIndex = ECMAScriptParser.RULE_sourceElement;\n    return _this4;\n  }\n  _inherits(SourceElementContext, _antlr4$ParserRuleCon3);\n  return _createClass(SourceElementContext, [{\n    key: \"statement\",\n    value: function statement() {\n      return this.getTypedRuleContext(StatementContext, 0);\n    }\n  }, {\n    key: \"functionDeclaration\",\n    value: function functionDeclaration() {\n      return this.getTypedRuleContext(FunctionDeclarationContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterSourceElement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitSourceElement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar StatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon4) {\n  function StatementContext(parser, parent, invokingState) {\n    var _this5;\n    _classCallCheck(this, StatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this5 = _callSuper(this, StatementContext, [parent, invokingState]);\n    _this5.parser = parser;\n    _this5.ruleIndex = ECMAScriptParser.RULE_statement;\n    return _this5;\n  }\n  _inherits(StatementContext, _antlr4$ParserRuleCon4);\n  return _createClass(StatementContext, [{\n    key: \"block\",\n    value: function block() {\n      return this.getTypedRuleContext(BlockContext, 0);\n    }\n  }, {\n    key: \"variableStatement\",\n    value: function variableStatement() {\n      return this.getTypedRuleContext(VariableStatementContext, 0);\n    }\n  }, {\n    key: \"emptyStatement_\",\n    value: function emptyStatement_() {\n      return this.getTypedRuleContext(EmptyStatement_Context, 0);\n    }\n  }, {\n    key: \"expressionStatement\",\n    value: function expressionStatement() {\n      return this.getTypedRuleContext(ExpressionStatementContext, 0);\n    }\n  }, {\n    key: \"ifStatement\",\n    value: function ifStatement() {\n      return this.getTypedRuleContext(IfStatementContext, 0);\n    }\n  }, {\n    key: \"iterationStatement\",\n    value: function iterationStatement() {\n      return this.getTypedRuleContext(IterationStatementContext, 0);\n    }\n  }, {\n    key: \"continueStatement\",\n    value: function continueStatement() {\n      return this.getTypedRuleContext(ContinueStatementContext, 0);\n    }\n  }, {\n    key: \"breakStatement\",\n    value: function breakStatement() {\n      return this.getTypedRuleContext(BreakStatementContext, 0);\n    }\n  }, {\n    key: \"returnStatement\",\n    value: function returnStatement() {\n      return this.getTypedRuleContext(ReturnStatementContext, 0);\n    }\n  }, {\n    key: \"withStatement\",\n    value: function withStatement() {\n      return this.getTypedRuleContext(WithStatementContext, 0);\n    }\n  }, {\n    key: \"labelledStatement\",\n    value: function labelledStatement() {\n      return this.getTypedRuleContext(LabelledStatementContext, 0);\n    }\n  }, {\n    key: \"switchStatement\",\n    value: function switchStatement() {\n      return this.getTypedRuleContext(SwitchStatementContext, 0);\n    }\n  }, {\n    key: \"throwStatement\",\n    value: function throwStatement() {\n      return this.getTypedRuleContext(ThrowStatementContext, 0);\n    }\n  }, {\n    key: \"tryStatement\",\n    value: function tryStatement() {\n      return this.getTypedRuleContext(TryStatementContext, 0);\n    }\n  }, {\n    key: \"debuggerStatement\",\n    value: function debuggerStatement() {\n      return this.getTypedRuleContext(DebuggerStatementContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar BlockContext = /*#__PURE__*/function (_antlr4$ParserRuleCon5) {\n  function BlockContext(parser, parent, invokingState) {\n    var _this6;\n    _classCallCheck(this, BlockContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this6 = _callSuper(this, BlockContext, [parent, invokingState]);\n    _this6.parser = parser;\n    _this6.ruleIndex = ECMAScriptParser.RULE_block;\n    return _this6;\n  }\n  _inherits(BlockContext, _antlr4$ParserRuleCon5);\n  return _createClass(BlockContext, [{\n    key: \"OpenBrace\",\n    value: function OpenBrace() {\n      return this.getToken(ECMAScriptParser.OpenBrace, 0);\n    }\n  }, {\n    key: \"CloseBrace\",\n    value: function CloseBrace() {\n      return this.getToken(ECMAScriptParser.CloseBrace, 0);\n    }\n  }, {\n    key: \"statementList\",\n    value: function statementList() {\n      return this.getTypedRuleContext(StatementListContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterBlock(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitBlock(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar StatementListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon6) {\n  function StatementListContext(parser, parent, invokingState) {\n    var _this7;\n    _classCallCheck(this, StatementListContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this7 = _callSuper(this, StatementListContext, [parent, invokingState]);\n    _defineProperty(_this7, \"statement\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(StatementContext);\n      } else {\n        return this.getTypedRuleContext(StatementContext, i);\n      }\n    });\n    _this7.parser = parser;\n    _this7.ruleIndex = ECMAScriptParser.RULE_statementList;\n    return _this7;\n  }\n  _inherits(StatementListContext, _antlr4$ParserRuleCon6);\n  return _createClass(StatementListContext, [{\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterStatementList(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitStatementList(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar VariableStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon7) {\n  function VariableStatementContext(parser, parent, invokingState) {\n    var _this8;\n    _classCallCheck(this, VariableStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this8 = _callSuper(this, VariableStatementContext, [parent, invokingState]);\n    _this8.parser = parser;\n    _this8.ruleIndex = ECMAScriptParser.RULE_variableStatement;\n    return _this8;\n  }\n  _inherits(VariableStatementContext, _antlr4$ParserRuleCon7);\n  return _createClass(VariableStatementContext, [{\n    key: \"Var\",\n    value: function Var() {\n      return this.getToken(ECMAScriptParser.Var, 0);\n    }\n  }, {\n    key: \"variableDeclarationList\",\n    value: function variableDeclarationList() {\n      return this.getTypedRuleContext(VariableDeclarationListContext, 0);\n    }\n  }, {\n    key: \"eos\",\n    value: function eos() {\n      return this.getTypedRuleContext(EosContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterVariableStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitVariableStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar VariableDeclarationListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon8) {\n  function VariableDeclarationListContext(parser, parent, invokingState) {\n    var _this9;\n    _classCallCheck(this, VariableDeclarationListContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this9 = _callSuper(this, VariableDeclarationListContext, [parent, invokingState]);\n    _defineProperty(_this9, \"variableDeclaration\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(VariableDeclarationContext);\n      } else {\n        return this.getTypedRuleContext(VariableDeclarationContext, i);\n      }\n    });\n    _defineProperty(_this9, \"Comma\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTokens(ECMAScriptParser.Comma);\n      } else {\n        return this.getToken(ECMAScriptParser.Comma, i);\n      }\n    });\n    _this9.parser = parser;\n    _this9.ruleIndex = ECMAScriptParser.RULE_variableDeclarationList;\n    return _this9;\n  }\n  _inherits(VariableDeclarationListContext, _antlr4$ParserRuleCon8);\n  return _createClass(VariableDeclarationListContext, [{\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterVariableDeclarationList(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitVariableDeclarationList(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar VariableDeclarationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon9) {\n  function VariableDeclarationContext(parser, parent, invokingState) {\n    var _this10;\n    _classCallCheck(this, VariableDeclarationContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this10 = _callSuper(this, VariableDeclarationContext, [parent, invokingState]);\n    _this10.parser = parser;\n    _this10.ruleIndex = ECMAScriptParser.RULE_variableDeclaration;\n    return _this10;\n  }\n  _inherits(VariableDeclarationContext, _antlr4$ParserRuleCon9);\n  return _createClass(VariableDeclarationContext, [{\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"initialiser\",\n    value: function initialiser() {\n      return this.getTypedRuleContext(InitialiserContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterVariableDeclaration(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitVariableDeclaration(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar InitialiserContext = /*#__PURE__*/function (_antlr4$ParserRuleCon10) {\n  function InitialiserContext(parser, parent, invokingState) {\n    var _this11;\n    _classCallCheck(this, InitialiserContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this11 = _callSuper(this, InitialiserContext, [parent, invokingState]);\n    _this11.parser = parser;\n    _this11.ruleIndex = ECMAScriptParser.RULE_initialiser;\n    return _this11;\n  }\n  _inherits(InitialiserContext, _antlr4$ParserRuleCon10);\n  return _createClass(InitialiserContext, [{\n    key: \"Assign\",\n    value: function Assign() {\n      return this.getToken(ECMAScriptParser.Assign, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterInitialiser(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitInitialiser(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar EmptyStatement_Context = /*#__PURE__*/function (_antlr4$ParserRuleCon11) {\n  function EmptyStatement_Context(parser, parent, invokingState) {\n    var _this12;\n    _classCallCheck(this, EmptyStatement_Context);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this12 = _callSuper(this, EmptyStatement_Context, [parent, invokingState]);\n    _this12.parser = parser;\n    _this12.ruleIndex = ECMAScriptParser.RULE_emptyStatement_;\n    return _this12;\n  }\n  _inherits(EmptyStatement_Context, _antlr4$ParserRuleCon11);\n  return _createClass(EmptyStatement_Context, [{\n    key: \"SemiColon\",\n    value: function SemiColon() {\n      return this.getToken(ECMAScriptParser.SemiColon, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterEmptyStatement_(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitEmptyStatement_(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar ExpressionStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon12) {\n  function ExpressionStatementContext(parser, parent, invokingState) {\n    var _this13;\n    _classCallCheck(this, ExpressionStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this13 = _callSuper(this, ExpressionStatementContext, [parent, invokingState]);\n    _this13.parser = parser;\n    _this13.ruleIndex = ECMAScriptParser.RULE_expressionStatement;\n    return _this13;\n  }\n  _inherits(ExpressionStatementContext, _antlr4$ParserRuleCon12);\n  return _createClass(ExpressionStatementContext, [{\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"eos\",\n    value: function eos() {\n      return this.getTypedRuleContext(EosContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterExpressionStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitExpressionStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar IfStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon13) {\n  function IfStatementContext(parser, parent, invokingState) {\n    var _this14;\n    _classCallCheck(this, IfStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this14 = _callSuper(this, IfStatementContext, [parent, invokingState]);\n    _defineProperty(_this14, \"statement\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(StatementContext);\n      } else {\n        return this.getTypedRuleContext(StatementContext, i);\n      }\n    });\n    _this14.parser = parser;\n    _this14.ruleIndex = ECMAScriptParser.RULE_ifStatement;\n    return _this14;\n  }\n  _inherits(IfStatementContext, _antlr4$ParserRuleCon13);\n  return _createClass(IfStatementContext, [{\n    key: \"If\",\n    value: function If() {\n      return this.getToken(ECMAScriptParser.If, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"Else\",\n    value: function Else() {\n      return this.getToken(ECMAScriptParser.Else, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterIfStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitIfStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar IterationStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon14) {\n  function IterationStatementContext(parser, parent, invokingState) {\n    var _this15;\n    _classCallCheck(this, IterationStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this15 = _callSuper(this, IterationStatementContext, [parent, invokingState]);\n    _this15.parser = parser;\n    _this15.ruleIndex = ECMAScriptParser.RULE_iterationStatement;\n    return _this15;\n  }\n  _inherits(IterationStatementContext, _antlr4$ParserRuleCon14);\n  return _createClass(IterationStatementContext, [{\n    key: \"copyFrom\",\n    value: function copyFrom(ctx) {\n      _get(_getPrototypeOf(IterationStatementContext.prototype), \"copyFrom\", this).call(this, ctx);\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar DoStatementContext = /*#__PURE__*/function (_IterationStatementCo) {\n  function DoStatementContext(parser, ctx) {\n    var _this16;\n    _classCallCheck(this, DoStatementContext);\n    _this16 = _callSuper(this, DoStatementContext, [parser]);\n    _get((_this16, _getPrototypeOf(DoStatementContext.prototype)), \"copyFrom\", _this16).call(_this16, ctx);\n    return _this16;\n  }\n  _inherits(DoStatementContext, _IterationStatementCo);\n  return _createClass(DoStatementContext, [{\n    key: \"Do\",\n    value: function Do() {\n      return this.getToken(ECMAScriptParser.Do, 0);\n    }\n  }, {\n    key: \"statement\",\n    value: function statement() {\n      return this.getTypedRuleContext(StatementContext, 0);\n    }\n  }, {\n    key: \"While\",\n    value: function While() {\n      return this.getToken(ECMAScriptParser.While, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"eos\",\n    value: function eos() {\n      return this.getTypedRuleContext(EosContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterDoStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitDoStatement(this);\n      }\n    }\n  }]);\n}(IterationStatementContext);\nECMAScriptParser.DoStatementContext = DoStatementContext;\nvar ForVarStatementContext = /*#__PURE__*/function (_IterationStatementCo2) {\n  function ForVarStatementContext(parser, ctx) {\n    var _this17;\n    _classCallCheck(this, ForVarStatementContext);\n    _this17 = _callSuper(this, ForVarStatementContext, [parser]);\n    _defineProperty(_this17, \"SemiColon\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTokens(ECMAScriptParser.SemiColon);\n      } else {\n        return this.getToken(ECMAScriptParser.SemiColon, i);\n      }\n    });\n    _defineProperty(_this17, \"expressionSequence\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(ExpressionSequenceContext);\n      } else {\n        return this.getTypedRuleContext(ExpressionSequenceContext, i);\n      }\n    });\n    _get((_this17, _getPrototypeOf(ForVarStatementContext.prototype)), \"copyFrom\", _this17).call(_this17, ctx);\n    return _this17;\n  }\n  _inherits(ForVarStatementContext, _IterationStatementCo2);\n  return _createClass(ForVarStatementContext, [{\n    key: \"For\",\n    value: function For() {\n      return this.getToken(ECMAScriptParser.For, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"Var\",\n    value: function Var() {\n      return this.getToken(ECMAScriptParser.Var, 0);\n    }\n  }, {\n    key: \"variableDeclarationList\",\n    value: function variableDeclarationList() {\n      return this.getTypedRuleContext(VariableDeclarationListContext, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"statement\",\n    value: function statement() {\n      return this.getTypedRuleContext(StatementContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterForVarStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitForVarStatement(this);\n      }\n    }\n  }]);\n}(IterationStatementContext);\nECMAScriptParser.ForVarStatementContext = ForVarStatementContext;\nvar ForVarInStatementContext = /*#__PURE__*/function (_IterationStatementCo3) {\n  function ForVarInStatementContext(parser, ctx) {\n    var _this18;\n    _classCallCheck(this, ForVarInStatementContext);\n    _this18 = _callSuper(this, ForVarInStatementContext, [parser]);\n    _get((_this18, _getPrototypeOf(ForVarInStatementContext.prototype)), \"copyFrom\", _this18).call(_this18, ctx);\n    return _this18;\n  }\n  _inherits(ForVarInStatementContext, _IterationStatementCo3);\n  return _createClass(ForVarInStatementContext, [{\n    key: \"For\",\n    value: function For() {\n      return this.getToken(ECMAScriptParser.For, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"Var\",\n    value: function Var() {\n      return this.getToken(ECMAScriptParser.Var, 0);\n    }\n  }, {\n    key: \"variableDeclaration\",\n    value: function variableDeclaration() {\n      return this.getTypedRuleContext(VariableDeclarationContext, 0);\n    }\n  }, {\n    key: \"In\",\n    value: function In() {\n      return this.getToken(ECMAScriptParser.In, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"statement\",\n    value: function statement() {\n      return this.getTypedRuleContext(StatementContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterForVarInStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitForVarInStatement(this);\n      }\n    }\n  }]);\n}(IterationStatementContext);\nECMAScriptParser.ForVarInStatementContext = ForVarInStatementContext;\nvar WhileStatementContext = /*#__PURE__*/function (_IterationStatementCo4) {\n  function WhileStatementContext(parser, ctx) {\n    var _this19;\n    _classCallCheck(this, WhileStatementContext);\n    _this19 = _callSuper(this, WhileStatementContext, [parser]);\n    _get((_this19, _getPrototypeOf(WhileStatementContext.prototype)), \"copyFrom\", _this19).call(_this19, ctx);\n    return _this19;\n  }\n  _inherits(WhileStatementContext, _IterationStatementCo4);\n  return _createClass(WhileStatementContext, [{\n    key: \"While\",\n    value: function While() {\n      return this.getToken(ECMAScriptParser.While, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"statement\",\n    value: function statement() {\n      return this.getTypedRuleContext(StatementContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterWhileStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitWhileStatement(this);\n      }\n    }\n  }]);\n}(IterationStatementContext);\nECMAScriptParser.WhileStatementContext = WhileStatementContext;\nvar ForStatementContext = /*#__PURE__*/function (_IterationStatementCo5) {\n  function ForStatementContext(parser, ctx) {\n    var _this20;\n    _classCallCheck(this, ForStatementContext);\n    _this20 = _callSuper(this, ForStatementContext, [parser]);\n    _defineProperty(_this20, \"SemiColon\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTokens(ECMAScriptParser.SemiColon);\n      } else {\n        return this.getToken(ECMAScriptParser.SemiColon, i);\n      }\n    });\n    _defineProperty(_this20, \"expressionSequence\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(ExpressionSequenceContext);\n      } else {\n        return this.getTypedRuleContext(ExpressionSequenceContext, i);\n      }\n    });\n    _get((_this20, _getPrototypeOf(ForStatementContext.prototype)), \"copyFrom\", _this20).call(_this20, ctx);\n    return _this20;\n  }\n  _inherits(ForStatementContext, _IterationStatementCo5);\n  return _createClass(ForStatementContext, [{\n    key: \"For\",\n    value: function For() {\n      return this.getToken(ECMAScriptParser.For, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"statement\",\n    value: function statement() {\n      return this.getTypedRuleContext(StatementContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterForStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitForStatement(this);\n      }\n    }\n  }]);\n}(IterationStatementContext);\nECMAScriptParser.ForStatementContext = ForStatementContext;\nvar ForInStatementContext = /*#__PURE__*/function (_IterationStatementCo6) {\n  function ForInStatementContext(parser, ctx) {\n    var _this21;\n    _classCallCheck(this, ForInStatementContext);\n    _this21 = _callSuper(this, ForInStatementContext, [parser]);\n    _get((_this21, _getPrototypeOf(ForInStatementContext.prototype)), \"copyFrom\", _this21).call(_this21, ctx);\n    return _this21;\n  }\n  _inherits(ForInStatementContext, _IterationStatementCo6);\n  return _createClass(ForInStatementContext, [{\n    key: \"For\",\n    value: function For() {\n      return this.getToken(ECMAScriptParser.For, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"In\",\n    value: function In() {\n      return this.getToken(ECMAScriptParser.In, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"statement\",\n    value: function statement() {\n      return this.getTypedRuleContext(StatementContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterForInStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitForInStatement(this);\n      }\n    }\n  }]);\n}(IterationStatementContext);\nECMAScriptParser.ForInStatementContext = ForInStatementContext;\nvar ContinueStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon15) {\n  function ContinueStatementContext(parser, parent, invokingState) {\n    var _this22;\n    _classCallCheck(this, ContinueStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this22 = _callSuper(this, ContinueStatementContext, [parent, invokingState]);\n    _this22.parser = parser;\n    _this22.ruleIndex = ECMAScriptParser.RULE_continueStatement;\n    return _this22;\n  }\n  _inherits(ContinueStatementContext, _antlr4$ParserRuleCon15);\n  return _createClass(ContinueStatementContext, [{\n    key: \"Continue\",\n    value: function Continue() {\n      return this.getToken(ECMAScriptParser.Continue, 0);\n    }\n  }, {\n    key: \"eos\",\n    value: function eos() {\n      return this.getTypedRuleContext(EosContext, 0);\n    }\n  }, {\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterContinueStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitContinueStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar BreakStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon16) {\n  function BreakStatementContext(parser, parent, invokingState) {\n    var _this23;\n    _classCallCheck(this, BreakStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this23 = _callSuper(this, BreakStatementContext, [parent, invokingState]);\n    _this23.parser = parser;\n    _this23.ruleIndex = ECMAScriptParser.RULE_breakStatement;\n    return _this23;\n  }\n  _inherits(BreakStatementContext, _antlr4$ParserRuleCon16);\n  return _createClass(BreakStatementContext, [{\n    key: \"Break\",\n    value: function Break() {\n      return this.getToken(ECMAScriptParser.Break, 0);\n    }\n  }, {\n    key: \"eos\",\n    value: function eos() {\n      return this.getTypedRuleContext(EosContext, 0);\n    }\n  }, {\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterBreakStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitBreakStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar ReturnStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon17) {\n  function ReturnStatementContext(parser, parent, invokingState) {\n    var _this24;\n    _classCallCheck(this, ReturnStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this24 = _callSuper(this, ReturnStatementContext, [parent, invokingState]);\n    _this24.parser = parser;\n    _this24.ruleIndex = ECMAScriptParser.RULE_returnStatement;\n    return _this24;\n  }\n  _inherits(ReturnStatementContext, _antlr4$ParserRuleCon17);\n  return _createClass(ReturnStatementContext, [{\n    key: \"Return\",\n    value: function Return() {\n      return this.getToken(ECMAScriptParser.Return, 0);\n    }\n  }, {\n    key: \"eos\",\n    value: function eos() {\n      return this.getTypedRuleContext(EosContext, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterReturnStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitReturnStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar WithStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon18) {\n  function WithStatementContext(parser, parent, invokingState) {\n    var _this25;\n    _classCallCheck(this, WithStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this25 = _callSuper(this, WithStatementContext, [parent, invokingState]);\n    _this25.parser = parser;\n    _this25.ruleIndex = ECMAScriptParser.RULE_withStatement;\n    return _this25;\n  }\n  _inherits(WithStatementContext, _antlr4$ParserRuleCon18);\n  return _createClass(WithStatementContext, [{\n    key: \"With\",\n    value: function With() {\n      return this.getToken(ECMAScriptParser.With, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"statement\",\n    value: function statement() {\n      return this.getTypedRuleContext(StatementContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterWithStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitWithStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar SwitchStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon19) {\n  function SwitchStatementContext(parser, parent, invokingState) {\n    var _this26;\n    _classCallCheck(this, SwitchStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this26 = _callSuper(this, SwitchStatementContext, [parent, invokingState]);\n    _this26.parser = parser;\n    _this26.ruleIndex = ECMAScriptParser.RULE_switchStatement;\n    return _this26;\n  }\n  _inherits(SwitchStatementContext, _antlr4$ParserRuleCon19);\n  return _createClass(SwitchStatementContext, [{\n    key: \"Switch\",\n    value: function Switch() {\n      return this.getToken(ECMAScriptParser.Switch, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"caseBlock\",\n    value: function caseBlock() {\n      return this.getTypedRuleContext(CaseBlockContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterSwitchStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitSwitchStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar CaseBlockContext = /*#__PURE__*/function (_antlr4$ParserRuleCon20) {\n  function CaseBlockContext(parser, parent, invokingState) {\n    var _this27;\n    _classCallCheck(this, CaseBlockContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this27 = _callSuper(this, CaseBlockContext, [parent, invokingState]);\n    _defineProperty(_this27, \"caseClauses\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(CaseClausesContext);\n      } else {\n        return this.getTypedRuleContext(CaseClausesContext, i);\n      }\n    });\n    _this27.parser = parser;\n    _this27.ruleIndex = ECMAScriptParser.RULE_caseBlock;\n    return _this27;\n  }\n  _inherits(CaseBlockContext, _antlr4$ParserRuleCon20);\n  return _createClass(CaseBlockContext, [{\n    key: \"OpenBrace\",\n    value: function OpenBrace() {\n      return this.getToken(ECMAScriptParser.OpenBrace, 0);\n    }\n  }, {\n    key: \"CloseBrace\",\n    value: function CloseBrace() {\n      return this.getToken(ECMAScriptParser.CloseBrace, 0);\n    }\n  }, {\n    key: \"defaultClause\",\n    value: function defaultClause() {\n      return this.getTypedRuleContext(DefaultClauseContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterCaseBlock(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitCaseBlock(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar CaseClausesContext = /*#__PURE__*/function (_antlr4$ParserRuleCon21) {\n  function CaseClausesContext(parser, parent, invokingState) {\n    var _this28;\n    _classCallCheck(this, CaseClausesContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this28 = _callSuper(this, CaseClausesContext, [parent, invokingState]);\n    _defineProperty(_this28, \"caseClause\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(CaseClauseContext);\n      } else {\n        return this.getTypedRuleContext(CaseClauseContext, i);\n      }\n    });\n    _this28.parser = parser;\n    _this28.ruleIndex = ECMAScriptParser.RULE_caseClauses;\n    return _this28;\n  }\n  _inherits(CaseClausesContext, _antlr4$ParserRuleCon21);\n  return _createClass(CaseClausesContext, [{\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterCaseClauses(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitCaseClauses(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar CaseClauseContext = /*#__PURE__*/function (_antlr4$ParserRuleCon22) {\n  function CaseClauseContext(parser, parent, invokingState) {\n    var _this29;\n    _classCallCheck(this, CaseClauseContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this29 = _callSuper(this, CaseClauseContext, [parent, invokingState]);\n    _this29.parser = parser;\n    _this29.ruleIndex = ECMAScriptParser.RULE_caseClause;\n    return _this29;\n  }\n  _inherits(CaseClauseContext, _antlr4$ParserRuleCon22);\n  return _createClass(CaseClauseContext, [{\n    key: \"Case\",\n    value: function Case() {\n      return this.getToken(ECMAScriptParser.Case, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"Colon\",\n    value: function Colon() {\n      return this.getToken(ECMAScriptParser.Colon, 0);\n    }\n  }, {\n    key: \"statementList\",\n    value: function statementList() {\n      return this.getTypedRuleContext(StatementListContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterCaseClause(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitCaseClause(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar DefaultClauseContext = /*#__PURE__*/function (_antlr4$ParserRuleCon23) {\n  function DefaultClauseContext(parser, parent, invokingState) {\n    var _this30;\n    _classCallCheck(this, DefaultClauseContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this30 = _callSuper(this, DefaultClauseContext, [parent, invokingState]);\n    _this30.parser = parser;\n    _this30.ruleIndex = ECMAScriptParser.RULE_defaultClause;\n    return _this30;\n  }\n  _inherits(DefaultClauseContext, _antlr4$ParserRuleCon23);\n  return _createClass(DefaultClauseContext, [{\n    key: \"Default\",\n    value: function Default() {\n      return this.getToken(ECMAScriptParser.Default, 0);\n    }\n  }, {\n    key: \"Colon\",\n    value: function Colon() {\n      return this.getToken(ECMAScriptParser.Colon, 0);\n    }\n  }, {\n    key: \"statementList\",\n    value: function statementList() {\n      return this.getTypedRuleContext(StatementListContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterDefaultClause(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitDefaultClause(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar LabelledStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon24) {\n  function LabelledStatementContext(parser, parent, invokingState) {\n    var _this31;\n    _classCallCheck(this, LabelledStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this31 = _callSuper(this, LabelledStatementContext, [parent, invokingState]);\n    _this31.parser = parser;\n    _this31.ruleIndex = ECMAScriptParser.RULE_labelledStatement;\n    return _this31;\n  }\n  _inherits(LabelledStatementContext, _antlr4$ParserRuleCon24);\n  return _createClass(LabelledStatementContext, [{\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"Colon\",\n    value: function Colon() {\n      return this.getToken(ECMAScriptParser.Colon, 0);\n    }\n  }, {\n    key: \"statement\",\n    value: function statement() {\n      return this.getTypedRuleContext(StatementContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterLabelledStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitLabelledStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar ThrowStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon25) {\n  function ThrowStatementContext(parser, parent, invokingState) {\n    var _this32;\n    _classCallCheck(this, ThrowStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this32 = _callSuper(this, ThrowStatementContext, [parent, invokingState]);\n    _this32.parser = parser;\n    _this32.ruleIndex = ECMAScriptParser.RULE_throwStatement;\n    return _this32;\n  }\n  _inherits(ThrowStatementContext, _antlr4$ParserRuleCon25);\n  return _createClass(ThrowStatementContext, [{\n    key: \"Throw\",\n    value: function Throw() {\n      return this.getToken(ECMAScriptParser.Throw, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"eos\",\n    value: function eos() {\n      return this.getTypedRuleContext(EosContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterThrowStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitThrowStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar TryStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon26) {\n  function TryStatementContext(parser, parent, invokingState) {\n    var _this33;\n    _classCallCheck(this, TryStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this33 = _callSuper(this, TryStatementContext, [parent, invokingState]);\n    _this33.parser = parser;\n    _this33.ruleIndex = ECMAScriptParser.RULE_tryStatement;\n    return _this33;\n  }\n  _inherits(TryStatementContext, _antlr4$ParserRuleCon26);\n  return _createClass(TryStatementContext, [{\n    key: \"Try\",\n    value: function Try() {\n      return this.getToken(ECMAScriptParser.Try, 0);\n    }\n  }, {\n    key: \"block\",\n    value: function block() {\n      return this.getTypedRuleContext(BlockContext, 0);\n    }\n  }, {\n    key: \"catchProduction\",\n    value: function catchProduction() {\n      return this.getTypedRuleContext(CatchProductionContext, 0);\n    }\n  }, {\n    key: \"finallyProduction\",\n    value: function finallyProduction() {\n      return this.getTypedRuleContext(FinallyProductionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterTryStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitTryStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar CatchProductionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon27) {\n  function CatchProductionContext(parser, parent, invokingState) {\n    var _this34;\n    _classCallCheck(this, CatchProductionContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this34 = _callSuper(this, CatchProductionContext, [parent, invokingState]);\n    _this34.parser = parser;\n    _this34.ruleIndex = ECMAScriptParser.RULE_catchProduction;\n    return _this34;\n  }\n  _inherits(CatchProductionContext, _antlr4$ParserRuleCon27);\n  return _createClass(CatchProductionContext, [{\n    key: \"Catch\",\n    value: function Catch() {\n      return this.getToken(ECMAScriptParser.Catch, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"block\",\n    value: function block() {\n      return this.getTypedRuleContext(BlockContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterCatchProduction(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitCatchProduction(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar FinallyProductionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon28) {\n  function FinallyProductionContext(parser, parent, invokingState) {\n    var _this35;\n    _classCallCheck(this, FinallyProductionContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this35 = _callSuper(this, FinallyProductionContext, [parent, invokingState]);\n    _this35.parser = parser;\n    _this35.ruleIndex = ECMAScriptParser.RULE_finallyProduction;\n    return _this35;\n  }\n  _inherits(FinallyProductionContext, _antlr4$ParserRuleCon28);\n  return _createClass(FinallyProductionContext, [{\n    key: \"Finally\",\n    value: function Finally() {\n      return this.getToken(ECMAScriptParser.Finally, 0);\n    }\n  }, {\n    key: \"block\",\n    value: function block() {\n      return this.getTypedRuleContext(BlockContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterFinallyProduction(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitFinallyProduction(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar DebuggerStatementContext = /*#__PURE__*/function (_antlr4$ParserRuleCon29) {\n  function DebuggerStatementContext(parser, parent, invokingState) {\n    var _this36;\n    _classCallCheck(this, DebuggerStatementContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this36 = _callSuper(this, DebuggerStatementContext, [parent, invokingState]);\n    _this36.parser = parser;\n    _this36.ruleIndex = ECMAScriptParser.RULE_debuggerStatement;\n    return _this36;\n  }\n  _inherits(DebuggerStatementContext, _antlr4$ParserRuleCon29);\n  return _createClass(DebuggerStatementContext, [{\n    key: \"Debugger\",\n    value: function Debugger() {\n      return this.getToken(ECMAScriptParser.Debugger, 0);\n    }\n  }, {\n    key: \"eos\",\n    value: function eos() {\n      return this.getTypedRuleContext(EosContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterDebuggerStatement(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitDebuggerStatement(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar FunctionDeclarationContext = /*#__PURE__*/function (_antlr4$ParserRuleCon30) {\n  function FunctionDeclarationContext(parser, parent, invokingState) {\n    var _this37;\n    _classCallCheck(this, FunctionDeclarationContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this37 = _callSuper(this, FunctionDeclarationContext, [parent, invokingState]);\n    _this37.parser = parser;\n    _this37.ruleIndex = ECMAScriptParser.RULE_functionDeclaration;\n    return _this37;\n  }\n  _inherits(FunctionDeclarationContext, _antlr4$ParserRuleCon30);\n  return _createClass(FunctionDeclarationContext, [{\n    key: \"Function\",\n    value: function Function() {\n      return this.getToken(ECMAScriptParser.Function, 0);\n    }\n  }, {\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"OpenBrace\",\n    value: function OpenBrace() {\n      return this.getToken(ECMAScriptParser.OpenBrace, 0);\n    }\n  }, {\n    key: \"functionBody\",\n    value: function functionBody() {\n      return this.getTypedRuleContext(FunctionBodyContext, 0);\n    }\n  }, {\n    key: \"CloseBrace\",\n    value: function CloseBrace() {\n      return this.getToken(ECMAScriptParser.CloseBrace, 0);\n    }\n  }, {\n    key: \"formalParameterList\",\n    value: function formalParameterList() {\n      return this.getTypedRuleContext(FormalParameterListContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterFunctionDeclaration(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitFunctionDeclaration(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar FormalParameterListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon31) {\n  function FormalParameterListContext(parser, parent, invokingState) {\n    var _this38;\n    _classCallCheck(this, FormalParameterListContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this38 = _callSuper(this, FormalParameterListContext, [parent, invokingState]);\n    _defineProperty(_this38, \"Identifier\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTokens(ECMAScriptParser.Identifier);\n      } else {\n        return this.getToken(ECMAScriptParser.Identifier, i);\n      }\n    });\n    _defineProperty(_this38, \"Comma\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTokens(ECMAScriptParser.Comma);\n      } else {\n        return this.getToken(ECMAScriptParser.Comma, i);\n      }\n    });\n    _this38.parser = parser;\n    _this38.ruleIndex = ECMAScriptParser.RULE_formalParameterList;\n    return _this38;\n  }\n  _inherits(FormalParameterListContext, _antlr4$ParserRuleCon31);\n  return _createClass(FormalParameterListContext, [{\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterFormalParameterList(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitFormalParameterList(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar FunctionBodyContext = /*#__PURE__*/function (_antlr4$ParserRuleCon32) {\n  function FunctionBodyContext(parser, parent, invokingState) {\n    var _this39;\n    _classCallCheck(this, FunctionBodyContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this39 = _callSuper(this, FunctionBodyContext, [parent, invokingState]);\n    _this39.parser = parser;\n    _this39.ruleIndex = ECMAScriptParser.RULE_functionBody;\n    return _this39;\n  }\n  _inherits(FunctionBodyContext, _antlr4$ParserRuleCon32);\n  return _createClass(FunctionBodyContext, [{\n    key: \"sourceElements\",\n    value: function sourceElements() {\n      return this.getTypedRuleContext(SourceElementsContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterFunctionBody(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitFunctionBody(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar ArrayLiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon33) {\n  function ArrayLiteralContext(parser, parent, invokingState) {\n    var _this40;\n    _classCallCheck(this, ArrayLiteralContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this40 = _callSuper(this, ArrayLiteralContext, [parent, invokingState]);\n    _this40.parser = parser;\n    _this40.ruleIndex = ECMAScriptParser.RULE_arrayLiteral;\n    return _this40;\n  }\n  _inherits(ArrayLiteralContext, _antlr4$ParserRuleCon33);\n  return _createClass(ArrayLiteralContext, [{\n    key: \"OpenBracket\",\n    value: function OpenBracket() {\n      return this.getToken(ECMAScriptParser.OpenBracket, 0);\n    }\n  }, {\n    key: \"CloseBracket\",\n    value: function CloseBracket() {\n      return this.getToken(ECMAScriptParser.CloseBracket, 0);\n    }\n  }, {\n    key: \"elementList\",\n    value: function elementList() {\n      return this.getTypedRuleContext(ElementListContext, 0);\n    }\n  }, {\n    key: \"Comma\",\n    value: function Comma() {\n      return this.getToken(ECMAScriptParser.Comma, 0);\n    }\n  }, {\n    key: \"elision\",\n    value: function elision() {\n      return this.getTypedRuleContext(ElisionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterArrayLiteral(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitArrayLiteral(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar ElementListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon34) {\n  function ElementListContext(parser, parent, invokingState) {\n    var _this41;\n    _classCallCheck(this, ElementListContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this41 = _callSuper(this, ElementListContext, [parent, invokingState]);\n    _defineProperty(_this41, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _defineProperty(_this41, \"elision\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(ElisionContext);\n      } else {\n        return this.getTypedRuleContext(ElisionContext, i);\n      }\n    });\n    _defineProperty(_this41, \"Comma\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTokens(ECMAScriptParser.Comma);\n      } else {\n        return this.getToken(ECMAScriptParser.Comma, i);\n      }\n    });\n    _this41.parser = parser;\n    _this41.ruleIndex = ECMAScriptParser.RULE_elementList;\n    return _this41;\n  }\n  _inherits(ElementListContext, _antlr4$ParserRuleCon34);\n  return _createClass(ElementListContext, [{\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterElementList(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitElementList(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar ElisionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon35) {\n  function ElisionContext(parser, parent, invokingState) {\n    var _this42;\n    _classCallCheck(this, ElisionContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this42 = _callSuper(this, ElisionContext, [parent, invokingState]);\n    _defineProperty(_this42, \"Comma\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTokens(ECMAScriptParser.Comma);\n      } else {\n        return this.getToken(ECMAScriptParser.Comma, i);\n      }\n    });\n    _this42.parser = parser;\n    _this42.ruleIndex = ECMAScriptParser.RULE_elision;\n    return _this42;\n  }\n  _inherits(ElisionContext, _antlr4$ParserRuleCon35);\n  return _createClass(ElisionContext, [{\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterElision(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitElision(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar ObjectLiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon36) {\n  function ObjectLiteralContext(parser, parent, invokingState) {\n    var _this43;\n    _classCallCheck(this, ObjectLiteralContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this43 = _callSuper(this, ObjectLiteralContext, [parent, invokingState]);\n    _this43.parser = parser;\n    _this43.ruleIndex = ECMAScriptParser.RULE_objectLiteral;\n    return _this43;\n  }\n  _inherits(ObjectLiteralContext, _antlr4$ParserRuleCon36);\n  return _createClass(ObjectLiteralContext, [{\n    key: \"OpenBrace\",\n    value: function OpenBrace() {\n      return this.getToken(ECMAScriptParser.OpenBrace, 0);\n    }\n  }, {\n    key: \"CloseBrace\",\n    value: function CloseBrace() {\n      return this.getToken(ECMAScriptParser.CloseBrace, 0);\n    }\n  }, {\n    key: \"propertyNameAndValueList\",\n    value: function propertyNameAndValueList() {\n      return this.getTypedRuleContext(PropertyNameAndValueListContext, 0);\n    }\n  }, {\n    key: \"Comma\",\n    value: function Comma() {\n      return this.getToken(ECMAScriptParser.Comma, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterObjectLiteral(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitObjectLiteral(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar PropertyNameAndValueListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon37) {\n  function PropertyNameAndValueListContext(parser, parent, invokingState) {\n    var _this44;\n    _classCallCheck(this, PropertyNameAndValueListContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this44 = _callSuper(this, PropertyNameAndValueListContext, [parent, invokingState]);\n    _defineProperty(_this44, \"propertyAssignment\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(PropertyAssignmentContext);\n      } else {\n        return this.getTypedRuleContext(PropertyAssignmentContext, i);\n      }\n    });\n    _defineProperty(_this44, \"Comma\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTokens(ECMAScriptParser.Comma);\n      } else {\n        return this.getToken(ECMAScriptParser.Comma, i);\n      }\n    });\n    _this44.parser = parser;\n    _this44.ruleIndex = ECMAScriptParser.RULE_propertyNameAndValueList;\n    return _this44;\n  }\n  _inherits(PropertyNameAndValueListContext, _antlr4$ParserRuleCon37);\n  return _createClass(PropertyNameAndValueListContext, [{\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterPropertyNameAndValueList(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitPropertyNameAndValueList(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar PropertyAssignmentContext = /*#__PURE__*/function (_antlr4$ParserRuleCon38) {\n  function PropertyAssignmentContext(parser, parent, invokingState) {\n    var _this45;\n    _classCallCheck(this, PropertyAssignmentContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this45 = _callSuper(this, PropertyAssignmentContext, [parent, invokingState]);\n    _this45.parser = parser;\n    _this45.ruleIndex = ECMAScriptParser.RULE_propertyAssignment;\n    return _this45;\n  }\n  _inherits(PropertyAssignmentContext, _antlr4$ParserRuleCon38);\n  return _createClass(PropertyAssignmentContext, [{\n    key: \"copyFrom\",\n    value: function copyFrom(ctx) {\n      _get(_getPrototypeOf(PropertyAssignmentContext.prototype), \"copyFrom\", this).call(this, ctx);\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar PropertyExpressionAssignmentContext = /*#__PURE__*/function (_PropertyAssignmentCo) {\n  function PropertyExpressionAssignmentContext(parser, ctx) {\n    var _this46;\n    _classCallCheck(this, PropertyExpressionAssignmentContext);\n    _this46 = _callSuper(this, PropertyExpressionAssignmentContext, [parser]);\n    _get((_this46, _getPrototypeOf(PropertyExpressionAssignmentContext.prototype)), \"copyFrom\", _this46).call(_this46, ctx);\n    return _this46;\n  }\n  _inherits(PropertyExpressionAssignmentContext, _PropertyAssignmentCo);\n  return _createClass(PropertyExpressionAssignmentContext, [{\n    key: \"propertyName\",\n    value: function propertyName() {\n      return this.getTypedRuleContext(PropertyNameContext, 0);\n    }\n  }, {\n    key: \"Colon\",\n    value: function Colon() {\n      return this.getToken(ECMAScriptParser.Colon, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterPropertyExpressionAssignment(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitPropertyExpressionAssignment(this);\n      }\n    }\n  }]);\n}(PropertyAssignmentContext);\nECMAScriptParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;\nvar PropertySetterContext = /*#__PURE__*/function (_PropertyAssignmentCo2) {\n  function PropertySetterContext(parser, ctx) {\n    var _this47;\n    _classCallCheck(this, PropertySetterContext);\n    _this47 = _callSuper(this, PropertySetterContext, [parser]);\n    _get((_this47, _getPrototypeOf(PropertySetterContext.prototype)), \"copyFrom\", _this47).call(_this47, ctx);\n    return _this47;\n  }\n  _inherits(PropertySetterContext, _PropertyAssignmentCo2);\n  return _createClass(PropertySetterContext, [{\n    key: \"setter\",\n    value: function setter() {\n      return this.getTypedRuleContext(SetterContext, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"propertySetParameterList\",\n    value: function propertySetParameterList() {\n      return this.getTypedRuleContext(PropertySetParameterListContext, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"OpenBrace\",\n    value: function OpenBrace() {\n      return this.getToken(ECMAScriptParser.OpenBrace, 0);\n    }\n  }, {\n    key: \"functionBody\",\n    value: function functionBody() {\n      return this.getTypedRuleContext(FunctionBodyContext, 0);\n    }\n  }, {\n    key: \"CloseBrace\",\n    value: function CloseBrace() {\n      return this.getToken(ECMAScriptParser.CloseBrace, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterPropertySetter(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitPropertySetter(this);\n      }\n    }\n  }]);\n}(PropertyAssignmentContext);\nECMAScriptParser.PropertySetterContext = PropertySetterContext;\nvar PropertyGetterContext = /*#__PURE__*/function (_PropertyAssignmentCo3) {\n  function PropertyGetterContext(parser, ctx) {\n    var _this48;\n    _classCallCheck(this, PropertyGetterContext);\n    _this48 = _callSuper(this, PropertyGetterContext, [parser]);\n    _get((_this48, _getPrototypeOf(PropertyGetterContext.prototype)), \"copyFrom\", _this48).call(_this48, ctx);\n    return _this48;\n  }\n  _inherits(PropertyGetterContext, _PropertyAssignmentCo3);\n  return _createClass(PropertyGetterContext, [{\n    key: \"getter\",\n    value: function getter() {\n      return this.getTypedRuleContext(GetterContext, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"OpenBrace\",\n    value: function OpenBrace() {\n      return this.getToken(ECMAScriptParser.OpenBrace, 0);\n    }\n  }, {\n    key: \"functionBody\",\n    value: function functionBody() {\n      return this.getTypedRuleContext(FunctionBodyContext, 0);\n    }\n  }, {\n    key: \"CloseBrace\",\n    value: function CloseBrace() {\n      return this.getToken(ECMAScriptParser.CloseBrace, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterPropertyGetter(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitPropertyGetter(this);\n      }\n    }\n  }]);\n}(PropertyAssignmentContext);\nECMAScriptParser.PropertyGetterContext = PropertyGetterContext;\nvar PropertyNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon39) {\n  function PropertyNameContext(parser, parent, invokingState) {\n    var _this49;\n    _classCallCheck(this, PropertyNameContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this49 = _callSuper(this, PropertyNameContext, [parent, invokingState]);\n    _this49.parser = parser;\n    _this49.ruleIndex = ECMAScriptParser.RULE_propertyName;\n    return _this49;\n  }\n  _inherits(PropertyNameContext, _antlr4$ParserRuleCon39);\n  return _createClass(PropertyNameContext, [{\n    key: \"identifierName\",\n    value: function identifierName() {\n      return this.getTypedRuleContext(IdentifierNameContext, 0);\n    }\n  }, {\n    key: \"StringLiteral\",\n    value: function StringLiteral() {\n      return this.getToken(ECMAScriptParser.StringLiteral, 0);\n    }\n  }, {\n    key: \"numericLiteral\",\n    value: function numericLiteral() {\n      return this.getTypedRuleContext(NumericLiteralContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterPropertyName(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitPropertyName(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar PropertySetParameterListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon40) {\n  function PropertySetParameterListContext(parser, parent, invokingState) {\n    var _this50;\n    _classCallCheck(this, PropertySetParameterListContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this50 = _callSuper(this, PropertySetParameterListContext, [parent, invokingState]);\n    _this50.parser = parser;\n    _this50.ruleIndex = ECMAScriptParser.RULE_propertySetParameterList;\n    return _this50;\n  }\n  _inherits(PropertySetParameterListContext, _antlr4$ParserRuleCon40);\n  return _createClass(PropertySetParameterListContext, [{\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterPropertySetParameterList(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitPropertySetParameterList(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar ArgumentsContext = /*#__PURE__*/function (_antlr4$ParserRuleCon41) {\n  function ArgumentsContext(parser, parent, invokingState) {\n    var _this51;\n    _classCallCheck(this, ArgumentsContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this51 = _callSuper(this, ArgumentsContext, [parent, invokingState]);\n    _this51.parser = parser;\n    _this51.ruleIndex = ECMAScriptParser.RULE_arguments;\n    return _this51;\n  }\n  _inherits(ArgumentsContext, _antlr4$ParserRuleCon41);\n  return _createClass(ArgumentsContext, [{\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"argumentList\",\n    value: function argumentList() {\n      return this.getTypedRuleContext(ArgumentListContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterArguments(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitArguments(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar ArgumentListContext = /*#__PURE__*/function (_antlr4$ParserRuleCon42) {\n  function ArgumentListContext(parser, parent, invokingState) {\n    var _this52;\n    _classCallCheck(this, ArgumentListContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this52 = _callSuper(this, ArgumentListContext, [parent, invokingState]);\n    _defineProperty(_this52, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _defineProperty(_this52, \"Comma\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTokens(ECMAScriptParser.Comma);\n      } else {\n        return this.getToken(ECMAScriptParser.Comma, i);\n      }\n    });\n    _this52.parser = parser;\n    _this52.ruleIndex = ECMAScriptParser.RULE_argumentList;\n    return _this52;\n  }\n  _inherits(ArgumentListContext, _antlr4$ParserRuleCon42);\n  return _createClass(ArgumentListContext, [{\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterArgumentList(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitArgumentList(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar ExpressionSequenceContext = /*#__PURE__*/function (_antlr4$ParserRuleCon43) {\n  function ExpressionSequenceContext(parser, parent, invokingState) {\n    var _this53;\n    _classCallCheck(this, ExpressionSequenceContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this53 = _callSuper(this, ExpressionSequenceContext, [parent, invokingState]);\n    _defineProperty(_this53, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _defineProperty(_this53, \"Comma\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTokens(ECMAScriptParser.Comma);\n      } else {\n        return this.getToken(ECMAScriptParser.Comma, i);\n      }\n    });\n    _this53.parser = parser;\n    _this53.ruleIndex = ECMAScriptParser.RULE_expressionSequence;\n    return _this53;\n  }\n  _inherits(ExpressionSequenceContext, _antlr4$ParserRuleCon43);\n  return _createClass(ExpressionSequenceContext, [{\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterExpressionSequence(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitExpressionSequence(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar SingleExpressionContext = /*#__PURE__*/function (_antlr4$ParserRuleCon44) {\n  function SingleExpressionContext(parser, parent, invokingState) {\n    var _this54;\n    _classCallCheck(this, SingleExpressionContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this54 = _callSuper(this, SingleExpressionContext, [parent, invokingState]);\n    _this54.parser = parser;\n    _this54.ruleIndex = ECMAScriptParser.RULE_singleExpression;\n    return _this54;\n  }\n  _inherits(SingleExpressionContext, _antlr4$ParserRuleCon44);\n  return _createClass(SingleExpressionContext, [{\n    key: \"copyFrom\",\n    value: function copyFrom(ctx) {\n      _get(_getPrototypeOf(SingleExpressionContext.prototype), \"copyFrom\", this).call(this, ctx);\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar TernaryExpressionContext = /*#__PURE__*/function (_SingleExpressionCont) {\n  function TernaryExpressionContext(parser, ctx) {\n    var _this55;\n    _classCallCheck(this, TernaryExpressionContext);\n    _this55 = _callSuper(this, TernaryExpressionContext, [parser]);\n    _defineProperty(_this55, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this55, _getPrototypeOf(TernaryExpressionContext.prototype)), \"copyFrom\", _this55).call(_this55, ctx);\n    return _this55;\n  }\n  _inherits(TernaryExpressionContext, _SingleExpressionCont);\n  return _createClass(TernaryExpressionContext, [{\n    key: \"QuestionMark\",\n    value: function QuestionMark() {\n      return this.getToken(ECMAScriptParser.QuestionMark, 0);\n    }\n  }, {\n    key: \"Colon\",\n    value: function Colon() {\n      return this.getToken(ECMAScriptParser.Colon, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterTernaryExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitTernaryExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.TernaryExpressionContext = TernaryExpressionContext;\nvar LogicalAndExpressionContext = /*#__PURE__*/function (_SingleExpressionCont2) {\n  function LogicalAndExpressionContext(parser, ctx) {\n    var _this56;\n    _classCallCheck(this, LogicalAndExpressionContext);\n    _this56 = _callSuper(this, LogicalAndExpressionContext, [parser]);\n    _defineProperty(_this56, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this56, _getPrototypeOf(LogicalAndExpressionContext.prototype)), \"copyFrom\", _this56).call(_this56, ctx);\n    return _this56;\n  }\n  _inherits(LogicalAndExpressionContext, _SingleExpressionCont2);\n  return _createClass(LogicalAndExpressionContext, [{\n    key: \"And\",\n    value: function And() {\n      return this.getToken(ECMAScriptParser.And, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterLogicalAndExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitLogicalAndExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.LogicalAndExpressionContext = LogicalAndExpressionContext;\nvar PreIncrementExpressionContext = /*#__PURE__*/function (_SingleExpressionCont3) {\n  function PreIncrementExpressionContext(parser, ctx) {\n    var _this57;\n    _classCallCheck(this, PreIncrementExpressionContext);\n    _this57 = _callSuper(this, PreIncrementExpressionContext, [parser]);\n    _get((_this57, _getPrototypeOf(PreIncrementExpressionContext.prototype)), \"copyFrom\", _this57).call(_this57, ctx);\n    return _this57;\n  }\n  _inherits(PreIncrementExpressionContext, _SingleExpressionCont3);\n  return _createClass(PreIncrementExpressionContext, [{\n    key: \"PlusPlus\",\n    value: function PlusPlus() {\n      return this.getToken(ECMAScriptParser.PlusPlus, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterPreIncrementExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitPreIncrementExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.PreIncrementExpressionContext = PreIncrementExpressionContext;\nvar ObjectLiteralExpressionContext = /*#__PURE__*/function (_SingleExpressionCont4) {\n  function ObjectLiteralExpressionContext(parser, ctx) {\n    var _this58;\n    _classCallCheck(this, ObjectLiteralExpressionContext);\n    _this58 = _callSuper(this, ObjectLiteralExpressionContext, [parser]);\n    _get((_this58, _getPrototypeOf(ObjectLiteralExpressionContext.prototype)), \"copyFrom\", _this58).call(_this58, ctx);\n    return _this58;\n  }\n  _inherits(ObjectLiteralExpressionContext, _SingleExpressionCont4);\n  return _createClass(ObjectLiteralExpressionContext, [{\n    key: \"objectLiteral\",\n    value: function objectLiteral() {\n      return this.getTypedRuleContext(ObjectLiteralContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterObjectLiteralExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitObjectLiteralExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.ObjectLiteralExpressionContext = ObjectLiteralExpressionContext;\nvar InExpressionContext = /*#__PURE__*/function (_SingleExpressionCont5) {\n  function InExpressionContext(parser, ctx) {\n    var _this59;\n    _classCallCheck(this, InExpressionContext);\n    _this59 = _callSuper(this, InExpressionContext, [parser]);\n    _defineProperty(_this59, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this59, _getPrototypeOf(InExpressionContext.prototype)), \"copyFrom\", _this59).call(_this59, ctx);\n    return _this59;\n  }\n  _inherits(InExpressionContext, _SingleExpressionCont5);\n  return _createClass(InExpressionContext, [{\n    key: \"In\",\n    value: function In() {\n      return this.getToken(ECMAScriptParser.In, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterInExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitInExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.InExpressionContext = InExpressionContext;\nvar LogicalOrExpressionContext = /*#__PURE__*/function (_SingleExpressionCont6) {\n  function LogicalOrExpressionContext(parser, ctx) {\n    var _this60;\n    _classCallCheck(this, LogicalOrExpressionContext);\n    _this60 = _callSuper(this, LogicalOrExpressionContext, [parser]);\n    _defineProperty(_this60, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this60, _getPrototypeOf(LogicalOrExpressionContext.prototype)), \"copyFrom\", _this60).call(_this60, ctx);\n    return _this60;\n  }\n  _inherits(LogicalOrExpressionContext, _SingleExpressionCont6);\n  return _createClass(LogicalOrExpressionContext, [{\n    key: \"Or\",\n    value: function Or() {\n      return this.getToken(ECMAScriptParser.Or, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterLogicalOrExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitLogicalOrExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.LogicalOrExpressionContext = LogicalOrExpressionContext;\nvar NotExpressionContext = /*#__PURE__*/function (_SingleExpressionCont7) {\n  function NotExpressionContext(parser, ctx) {\n    var _this61;\n    _classCallCheck(this, NotExpressionContext);\n    _this61 = _callSuper(this, NotExpressionContext, [parser]);\n    _get((_this61, _getPrototypeOf(NotExpressionContext.prototype)), \"copyFrom\", _this61).call(_this61, ctx);\n    return _this61;\n  }\n  _inherits(NotExpressionContext, _SingleExpressionCont7);\n  return _createClass(NotExpressionContext, [{\n    key: \"Not\",\n    value: function Not() {\n      return this.getToken(ECMAScriptParser.Not, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterNotExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitNotExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.NotExpressionContext = NotExpressionContext;\nvar PreDecreaseExpressionContext = /*#__PURE__*/function (_SingleExpressionCont8) {\n  function PreDecreaseExpressionContext(parser, ctx) {\n    var _this62;\n    _classCallCheck(this, PreDecreaseExpressionContext);\n    _this62 = _callSuper(this, PreDecreaseExpressionContext, [parser]);\n    _get((_this62, _getPrototypeOf(PreDecreaseExpressionContext.prototype)), \"copyFrom\", _this62).call(_this62, ctx);\n    return _this62;\n  }\n  _inherits(PreDecreaseExpressionContext, _SingleExpressionCont8);\n  return _createClass(PreDecreaseExpressionContext, [{\n    key: \"MinusMinus\",\n    value: function MinusMinus() {\n      return this.getToken(ECMAScriptParser.MinusMinus, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterPreDecreaseExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitPreDecreaseExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.PreDecreaseExpressionContext = PreDecreaseExpressionContext;\nvar ArgumentsExpressionContext = /*#__PURE__*/function (_SingleExpressionCont9) {\n  function ArgumentsExpressionContext(parser, ctx) {\n    var _this63;\n    _classCallCheck(this, ArgumentsExpressionContext);\n    _this63 = _callSuper(this, ArgumentsExpressionContext, [parser]);\n    _get((_this63, _getPrototypeOf(ArgumentsExpressionContext.prototype)), \"copyFrom\", _this63).call(_this63, ctx);\n    return _this63;\n  }\n  _inherits(ArgumentsExpressionContext, _SingleExpressionCont9);\n  return _createClass(ArgumentsExpressionContext, [{\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"arguments\",\n    value: function _arguments() {\n      return this.getTypedRuleContext(ArgumentsContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterArgumentsExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitArgumentsExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.ArgumentsExpressionContext = ArgumentsExpressionContext;\nvar ThisExpressionContext = /*#__PURE__*/function (_SingleExpressionCont10) {\n  function ThisExpressionContext(parser, ctx) {\n    var _this64;\n    _classCallCheck(this, ThisExpressionContext);\n    _this64 = _callSuper(this, ThisExpressionContext, [parser]);\n    _get((_this64, _getPrototypeOf(ThisExpressionContext.prototype)), \"copyFrom\", _this64).call(_this64, ctx);\n    return _this64;\n  }\n  _inherits(ThisExpressionContext, _SingleExpressionCont10);\n  return _createClass(ThisExpressionContext, [{\n    key: \"This\",\n    value: function This() {\n      return this.getToken(ECMAScriptParser.This, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterThisExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitThisExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.ThisExpressionContext = ThisExpressionContext;\nvar FunctionExpressionContext = /*#__PURE__*/function (_SingleExpressionCont11) {\n  function FunctionExpressionContext(parser, ctx) {\n    var _this65;\n    _classCallCheck(this, FunctionExpressionContext);\n    _this65 = _callSuper(this, FunctionExpressionContext, [parser]);\n    _get((_this65, _getPrototypeOf(FunctionExpressionContext.prototype)), \"copyFrom\", _this65).call(_this65, ctx);\n    return _this65;\n  }\n  _inherits(FunctionExpressionContext, _SingleExpressionCont11);\n  return _createClass(FunctionExpressionContext, [{\n    key: \"Function\",\n    value: function Function() {\n      return this.getToken(ECMAScriptParser.Function, 0);\n    }\n  }, {\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"OpenBrace\",\n    value: function OpenBrace() {\n      return this.getToken(ECMAScriptParser.OpenBrace, 0);\n    }\n  }, {\n    key: \"functionBody\",\n    value: function functionBody() {\n      return this.getTypedRuleContext(FunctionBodyContext, 0);\n    }\n  }, {\n    key: \"CloseBrace\",\n    value: function CloseBrace() {\n      return this.getToken(ECMAScriptParser.CloseBrace, 0);\n    }\n  }, {\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"formalParameterList\",\n    value: function formalParameterList() {\n      return this.getTypedRuleContext(FormalParameterListContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterFunctionExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitFunctionExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.FunctionExpressionContext = FunctionExpressionContext;\nvar UnaryMinusExpressionContext = /*#__PURE__*/function (_SingleExpressionCont12) {\n  function UnaryMinusExpressionContext(parser, ctx) {\n    var _this66;\n    _classCallCheck(this, UnaryMinusExpressionContext);\n    _this66 = _callSuper(this, UnaryMinusExpressionContext, [parser]);\n    _get((_this66, _getPrototypeOf(UnaryMinusExpressionContext.prototype)), \"copyFrom\", _this66).call(_this66, ctx);\n    return _this66;\n  }\n  _inherits(UnaryMinusExpressionContext, _SingleExpressionCont12);\n  return _createClass(UnaryMinusExpressionContext, [{\n    key: \"Minus\",\n    value: function Minus() {\n      return this.getToken(ECMAScriptParser.Minus, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterUnaryMinusExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitUnaryMinusExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.UnaryMinusExpressionContext = UnaryMinusExpressionContext;\nvar AssignmentExpressionContext = /*#__PURE__*/function (_SingleExpressionCont13) {\n  function AssignmentExpressionContext(parser, ctx) {\n    var _this67;\n    _classCallCheck(this, AssignmentExpressionContext);\n    _this67 = _callSuper(this, AssignmentExpressionContext, [parser]);\n    _defineProperty(_this67, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this67, _getPrototypeOf(AssignmentExpressionContext.prototype)), \"copyFrom\", _this67).call(_this67, ctx);\n    return _this67;\n  }\n  _inherits(AssignmentExpressionContext, _SingleExpressionCont13);\n  return _createClass(AssignmentExpressionContext, [{\n    key: \"Assign\",\n    value: function Assign() {\n      return this.getToken(ECMAScriptParser.Assign, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterAssignmentExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitAssignmentExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.AssignmentExpressionContext = AssignmentExpressionContext;\nvar PostDecreaseExpressionContext = /*#__PURE__*/function (_SingleExpressionCont14) {\n  function PostDecreaseExpressionContext(parser, ctx) {\n    var _this68;\n    _classCallCheck(this, PostDecreaseExpressionContext);\n    _this68 = _callSuper(this, PostDecreaseExpressionContext, [parser]);\n    _get((_this68, _getPrototypeOf(PostDecreaseExpressionContext.prototype)), \"copyFrom\", _this68).call(_this68, ctx);\n    return _this68;\n  }\n  _inherits(PostDecreaseExpressionContext, _SingleExpressionCont14);\n  return _createClass(PostDecreaseExpressionContext, [{\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"MinusMinus\",\n    value: function MinusMinus() {\n      return this.getToken(ECMAScriptParser.MinusMinus, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterPostDecreaseExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitPostDecreaseExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.PostDecreaseExpressionContext = PostDecreaseExpressionContext;\nvar TypeofExpressionContext = /*#__PURE__*/function (_SingleExpressionCont15) {\n  function TypeofExpressionContext(parser, ctx) {\n    var _this69;\n    _classCallCheck(this, TypeofExpressionContext);\n    _this69 = _callSuper(this, TypeofExpressionContext, [parser]);\n    _get((_this69, _getPrototypeOf(TypeofExpressionContext.prototype)), \"copyFrom\", _this69).call(_this69, ctx);\n    return _this69;\n  }\n  _inherits(TypeofExpressionContext, _SingleExpressionCont15);\n  return _createClass(TypeofExpressionContext, [{\n    key: \"Typeof\",\n    value: function Typeof() {\n      return this.getToken(ECMAScriptParser.Typeof, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterTypeofExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitTypeofExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.TypeofExpressionContext = TypeofExpressionContext;\nvar InstanceofExpressionContext = /*#__PURE__*/function (_SingleExpressionCont16) {\n  function InstanceofExpressionContext(parser, ctx) {\n    var _this70;\n    _classCallCheck(this, InstanceofExpressionContext);\n    _this70 = _callSuper(this, InstanceofExpressionContext, [parser]);\n    _defineProperty(_this70, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this70, _getPrototypeOf(InstanceofExpressionContext.prototype)), \"copyFrom\", _this70).call(_this70, ctx);\n    return _this70;\n  }\n  _inherits(InstanceofExpressionContext, _SingleExpressionCont16);\n  return _createClass(InstanceofExpressionContext, [{\n    key: \"Instanceof\",\n    value: function Instanceof() {\n      return this.getToken(ECMAScriptParser.Instanceof, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterInstanceofExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitInstanceofExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.InstanceofExpressionContext = InstanceofExpressionContext;\nvar UnaryPlusExpressionContext = /*#__PURE__*/function (_SingleExpressionCont17) {\n  function UnaryPlusExpressionContext(parser, ctx) {\n    var _this71;\n    _classCallCheck(this, UnaryPlusExpressionContext);\n    _this71 = _callSuper(this, UnaryPlusExpressionContext, [parser]);\n    _get((_this71, _getPrototypeOf(UnaryPlusExpressionContext.prototype)), \"copyFrom\", _this71).call(_this71, ctx);\n    return _this71;\n  }\n  _inherits(UnaryPlusExpressionContext, _SingleExpressionCont17);\n  return _createClass(UnaryPlusExpressionContext, [{\n    key: \"Plus\",\n    value: function Plus() {\n      return this.getToken(ECMAScriptParser.Plus, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterUnaryPlusExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitUnaryPlusExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.UnaryPlusExpressionContext = UnaryPlusExpressionContext;\nvar DeleteExpressionContext = /*#__PURE__*/function (_SingleExpressionCont18) {\n  function DeleteExpressionContext(parser, ctx) {\n    var _this72;\n    _classCallCheck(this, DeleteExpressionContext);\n    _this72 = _callSuper(this, DeleteExpressionContext, [parser]);\n    _get((_this72, _getPrototypeOf(DeleteExpressionContext.prototype)), \"copyFrom\", _this72).call(_this72, ctx);\n    return _this72;\n  }\n  _inherits(DeleteExpressionContext, _SingleExpressionCont18);\n  return _createClass(DeleteExpressionContext, [{\n    key: \"Delete\",\n    value: function Delete() {\n      return this.getToken(ECMAScriptParser.Delete, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterDeleteExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitDeleteExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.DeleteExpressionContext = DeleteExpressionContext;\nvar EqualityExpressionContext = /*#__PURE__*/function (_SingleExpressionCont19) {\n  function EqualityExpressionContext(parser, ctx) {\n    var _this73;\n    _classCallCheck(this, EqualityExpressionContext);\n    _this73 = _callSuper(this, EqualityExpressionContext, [parser]);\n    _defineProperty(_this73, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this73, _getPrototypeOf(EqualityExpressionContext.prototype)), \"copyFrom\", _this73).call(_this73, ctx);\n    return _this73;\n  }\n  _inherits(EqualityExpressionContext, _SingleExpressionCont19);\n  return _createClass(EqualityExpressionContext, [{\n    key: \"Equals\",\n    value: function Equals() {\n      return this.getToken(ECMAScriptParser.Equals, 0);\n    }\n  }, {\n    key: \"NotEquals\",\n    value: function NotEquals() {\n      return this.getToken(ECMAScriptParser.NotEquals, 0);\n    }\n  }, {\n    key: \"IdentityEquals\",\n    value: function IdentityEquals() {\n      return this.getToken(ECMAScriptParser.IdentityEquals, 0);\n    }\n  }, {\n    key: \"IdentityNotEquals\",\n    value: function IdentityNotEquals() {\n      return this.getToken(ECMAScriptParser.IdentityNotEquals, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterEqualityExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitEqualityExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.EqualityExpressionContext = EqualityExpressionContext;\nvar BitXOrExpressionContext = /*#__PURE__*/function (_SingleExpressionCont20) {\n  function BitXOrExpressionContext(parser, ctx) {\n    var _this74;\n    _classCallCheck(this, BitXOrExpressionContext);\n    _this74 = _callSuper(this, BitXOrExpressionContext, [parser]);\n    _defineProperty(_this74, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this74, _getPrototypeOf(BitXOrExpressionContext.prototype)), \"copyFrom\", _this74).call(_this74, ctx);\n    return _this74;\n  }\n  _inherits(BitXOrExpressionContext, _SingleExpressionCont20);\n  return _createClass(BitXOrExpressionContext, [{\n    key: \"BitXOr\",\n    value: function BitXOr() {\n      return this.getToken(ECMAScriptParser.BitXOr, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterBitXOrExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitBitXOrExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.BitXOrExpressionContext = BitXOrExpressionContext;\nvar MultiplicativeExpressionContext = /*#__PURE__*/function (_SingleExpressionCont21) {\n  function MultiplicativeExpressionContext(parser, ctx) {\n    var _this75;\n    _classCallCheck(this, MultiplicativeExpressionContext);\n    _this75 = _callSuper(this, MultiplicativeExpressionContext, [parser]);\n    _defineProperty(_this75, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this75, _getPrototypeOf(MultiplicativeExpressionContext.prototype)), \"copyFrom\", _this75).call(_this75, ctx);\n    return _this75;\n  }\n  _inherits(MultiplicativeExpressionContext, _SingleExpressionCont21);\n  return _createClass(MultiplicativeExpressionContext, [{\n    key: \"Multiply\",\n    value: function Multiply() {\n      return this.getToken(ECMAScriptParser.Multiply, 0);\n    }\n  }, {\n    key: \"Divide\",\n    value: function Divide() {\n      return this.getToken(ECMAScriptParser.Divide, 0);\n    }\n  }, {\n    key: \"Modulus\",\n    value: function Modulus() {\n      return this.getToken(ECMAScriptParser.Modulus, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterMultiplicativeExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitMultiplicativeExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;\nvar BitShiftExpressionContext = /*#__PURE__*/function (_SingleExpressionCont22) {\n  function BitShiftExpressionContext(parser, ctx) {\n    var _this76;\n    _classCallCheck(this, BitShiftExpressionContext);\n    _this76 = _callSuper(this, BitShiftExpressionContext, [parser]);\n    _defineProperty(_this76, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this76, _getPrototypeOf(BitShiftExpressionContext.prototype)), \"copyFrom\", _this76).call(_this76, ctx);\n    return _this76;\n  }\n  _inherits(BitShiftExpressionContext, _SingleExpressionCont22);\n  return _createClass(BitShiftExpressionContext, [{\n    key: \"LeftShiftArithmetic\",\n    value: function LeftShiftArithmetic() {\n      return this.getToken(ECMAScriptParser.LeftShiftArithmetic, 0);\n    }\n  }, {\n    key: \"RightShiftArithmetic\",\n    value: function RightShiftArithmetic() {\n      return this.getToken(ECMAScriptParser.RightShiftArithmetic, 0);\n    }\n  }, {\n    key: \"RightShiftLogical\",\n    value: function RightShiftLogical() {\n      return this.getToken(ECMAScriptParser.RightShiftLogical, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterBitShiftExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitBitShiftExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.BitShiftExpressionContext = BitShiftExpressionContext;\nvar ParenthesizedExpressionContext = /*#__PURE__*/function (_SingleExpressionCont23) {\n  function ParenthesizedExpressionContext(parser, ctx) {\n    var _this77;\n    _classCallCheck(this, ParenthesizedExpressionContext);\n    _this77 = _callSuper(this, ParenthesizedExpressionContext, [parser]);\n    _get((_this77, _getPrototypeOf(ParenthesizedExpressionContext.prototype)), \"copyFrom\", _this77).call(_this77, ctx);\n    return _this77;\n  }\n  _inherits(ParenthesizedExpressionContext, _SingleExpressionCont23);\n  return _createClass(ParenthesizedExpressionContext, [{\n    key: \"OpenParen\",\n    value: function OpenParen() {\n      return this.getToken(ECMAScriptParser.OpenParen, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"CloseParen\",\n    value: function CloseParen() {\n      return this.getToken(ECMAScriptParser.CloseParen, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterParenthesizedExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitParenthesizedExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;\nvar AdditiveExpressionContext = /*#__PURE__*/function (_SingleExpressionCont24) {\n  function AdditiveExpressionContext(parser, ctx) {\n    var _this78;\n    _classCallCheck(this, AdditiveExpressionContext);\n    _this78 = _callSuper(this, AdditiveExpressionContext, [parser]);\n    _defineProperty(_this78, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this78, _getPrototypeOf(AdditiveExpressionContext.prototype)), \"copyFrom\", _this78).call(_this78, ctx);\n    return _this78;\n  }\n  _inherits(AdditiveExpressionContext, _SingleExpressionCont24);\n  return _createClass(AdditiveExpressionContext, [{\n    key: \"Plus\",\n    value: function Plus() {\n      return this.getToken(ECMAScriptParser.Plus, 0);\n    }\n  }, {\n    key: \"Minus\",\n    value: function Minus() {\n      return this.getToken(ECMAScriptParser.Minus, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterAdditiveExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitAdditiveExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.AdditiveExpressionContext = AdditiveExpressionContext;\nvar RelationalExpressionContext = /*#__PURE__*/function (_SingleExpressionCont25) {\n  function RelationalExpressionContext(parser, ctx) {\n    var _this79;\n    _classCallCheck(this, RelationalExpressionContext);\n    _this79 = _callSuper(this, RelationalExpressionContext, [parser]);\n    _defineProperty(_this79, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this79, _getPrototypeOf(RelationalExpressionContext.prototype)), \"copyFrom\", _this79).call(_this79, ctx);\n    return _this79;\n  }\n  _inherits(RelationalExpressionContext, _SingleExpressionCont25);\n  return _createClass(RelationalExpressionContext, [{\n    key: \"LessThan\",\n    value: function LessThan() {\n      return this.getToken(ECMAScriptParser.LessThan, 0);\n    }\n  }, {\n    key: \"MoreThan\",\n    value: function MoreThan() {\n      return this.getToken(ECMAScriptParser.MoreThan, 0);\n    }\n  }, {\n    key: \"LessThanEquals\",\n    value: function LessThanEquals() {\n      return this.getToken(ECMAScriptParser.LessThanEquals, 0);\n    }\n  }, {\n    key: \"GreaterThanEquals\",\n    value: function GreaterThanEquals() {\n      return this.getToken(ECMAScriptParser.GreaterThanEquals, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterRelationalExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitRelationalExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.RelationalExpressionContext = RelationalExpressionContext;\nvar PostIncrementExpressionContext = /*#__PURE__*/function (_SingleExpressionCont26) {\n  function PostIncrementExpressionContext(parser, ctx) {\n    var _this80;\n    _classCallCheck(this, PostIncrementExpressionContext);\n    _this80 = _callSuper(this, PostIncrementExpressionContext, [parser]);\n    _get((_this80, _getPrototypeOf(PostIncrementExpressionContext.prototype)), \"copyFrom\", _this80).call(_this80, ctx);\n    return _this80;\n  }\n  _inherits(PostIncrementExpressionContext, _SingleExpressionCont26);\n  return _createClass(PostIncrementExpressionContext, [{\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"PlusPlus\",\n    value: function PlusPlus() {\n      return this.getToken(ECMAScriptParser.PlusPlus, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterPostIncrementExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitPostIncrementExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.PostIncrementExpressionContext = PostIncrementExpressionContext;\nvar BitNotExpressionContext = /*#__PURE__*/function (_SingleExpressionCont27) {\n  function BitNotExpressionContext(parser, ctx) {\n    var _this81;\n    _classCallCheck(this, BitNotExpressionContext);\n    _this81 = _callSuper(this, BitNotExpressionContext, [parser]);\n    _get((_this81, _getPrototypeOf(BitNotExpressionContext.prototype)), \"copyFrom\", _this81).call(_this81, ctx);\n    return _this81;\n  }\n  _inherits(BitNotExpressionContext, _SingleExpressionCont27);\n  return _createClass(BitNotExpressionContext, [{\n    key: \"BitNot\",\n    value: function BitNot() {\n      return this.getToken(ECMAScriptParser.BitNot, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterBitNotExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitBitNotExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.BitNotExpressionContext = BitNotExpressionContext;\nvar NewExpressionContext = /*#__PURE__*/function (_SingleExpressionCont28) {\n  function NewExpressionContext(parser, ctx) {\n    var _this82;\n    _classCallCheck(this, NewExpressionContext);\n    _this82 = _callSuper(this, NewExpressionContext, [parser]);\n    _get((_this82, _getPrototypeOf(NewExpressionContext.prototype)), \"copyFrom\", _this82).call(_this82, ctx);\n    return _this82;\n  }\n  _inherits(NewExpressionContext, _SingleExpressionCont28);\n  return _createClass(NewExpressionContext, [{\n    key: \"New\",\n    value: function New() {\n      return this.getToken(ECMAScriptParser.New, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"arguments\",\n    value: function _arguments() {\n      return this.getTypedRuleContext(ArgumentsContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterNewExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitNewExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.NewExpressionContext = NewExpressionContext;\nvar LiteralExpressionContext = /*#__PURE__*/function (_SingleExpressionCont29) {\n  function LiteralExpressionContext(parser, ctx) {\n    var _this83;\n    _classCallCheck(this, LiteralExpressionContext);\n    _this83 = _callSuper(this, LiteralExpressionContext, [parser]);\n    _get((_this83, _getPrototypeOf(LiteralExpressionContext.prototype)), \"copyFrom\", _this83).call(_this83, ctx);\n    return _this83;\n  }\n  _inherits(LiteralExpressionContext, _SingleExpressionCont29);\n  return _createClass(LiteralExpressionContext, [{\n    key: \"literal\",\n    value: function literal() {\n      return this.getTypedRuleContext(LiteralContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterLiteralExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitLiteralExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.LiteralExpressionContext = LiteralExpressionContext;\nvar ArrayLiteralExpressionContext = /*#__PURE__*/function (_SingleExpressionCont30) {\n  function ArrayLiteralExpressionContext(parser, ctx) {\n    var _this84;\n    _classCallCheck(this, ArrayLiteralExpressionContext);\n    _this84 = _callSuper(this, ArrayLiteralExpressionContext, [parser]);\n    _get((_this84, _getPrototypeOf(ArrayLiteralExpressionContext.prototype)), \"copyFrom\", _this84).call(_this84, ctx);\n    return _this84;\n  }\n  _inherits(ArrayLiteralExpressionContext, _SingleExpressionCont30);\n  return _createClass(ArrayLiteralExpressionContext, [{\n    key: \"arrayLiteral\",\n    value: function arrayLiteral() {\n      return this.getTypedRuleContext(ArrayLiteralContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterArrayLiteralExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitArrayLiteralExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;\nvar MemberDotExpressionContext = /*#__PURE__*/function (_SingleExpressionCont31) {\n  function MemberDotExpressionContext(parser, ctx) {\n    var _this85;\n    _classCallCheck(this, MemberDotExpressionContext);\n    _this85 = _callSuper(this, MemberDotExpressionContext, [parser]);\n    _get((_this85, _getPrototypeOf(MemberDotExpressionContext.prototype)), \"copyFrom\", _this85).call(_this85, ctx);\n    return _this85;\n  }\n  _inherits(MemberDotExpressionContext, _SingleExpressionCont31);\n  return _createClass(MemberDotExpressionContext, [{\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"Dot\",\n    value: function Dot() {\n      return this.getToken(ECMAScriptParser.Dot, 0);\n    }\n  }, {\n    key: \"identifierName\",\n    value: function identifierName() {\n      return this.getTypedRuleContext(IdentifierNameContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterMemberDotExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitMemberDotExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.MemberDotExpressionContext = MemberDotExpressionContext;\nvar MemberIndexExpressionContext = /*#__PURE__*/function (_SingleExpressionCont32) {\n  function MemberIndexExpressionContext(parser, ctx) {\n    var _this86;\n    _classCallCheck(this, MemberIndexExpressionContext);\n    _this86 = _callSuper(this, MemberIndexExpressionContext, [parser]);\n    _get((_this86, _getPrototypeOf(MemberIndexExpressionContext.prototype)), \"copyFrom\", _this86).call(_this86, ctx);\n    return _this86;\n  }\n  _inherits(MemberIndexExpressionContext, _SingleExpressionCont32);\n  return _createClass(MemberIndexExpressionContext, [{\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"OpenBracket\",\n    value: function OpenBracket() {\n      return this.getToken(ECMAScriptParser.OpenBracket, 0);\n    }\n  }, {\n    key: \"expressionSequence\",\n    value: function expressionSequence() {\n      return this.getTypedRuleContext(ExpressionSequenceContext, 0);\n    }\n  }, {\n    key: \"CloseBracket\",\n    value: function CloseBracket() {\n      return this.getToken(ECMAScriptParser.CloseBracket, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterMemberIndexExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitMemberIndexExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.MemberIndexExpressionContext = MemberIndexExpressionContext;\nvar IdentifierExpressionContext = /*#__PURE__*/function (_SingleExpressionCont33) {\n  function IdentifierExpressionContext(parser, ctx) {\n    var _this87;\n    _classCallCheck(this, IdentifierExpressionContext);\n    _this87 = _callSuper(this, IdentifierExpressionContext, [parser]);\n    _get((_this87, _getPrototypeOf(IdentifierExpressionContext.prototype)), \"copyFrom\", _this87).call(_this87, ctx);\n    return _this87;\n  }\n  _inherits(IdentifierExpressionContext, _SingleExpressionCont33);\n  return _createClass(IdentifierExpressionContext, [{\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterIdentifierExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitIdentifierExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.IdentifierExpressionContext = IdentifierExpressionContext;\nvar BitAndExpressionContext = /*#__PURE__*/function (_SingleExpressionCont34) {\n  function BitAndExpressionContext(parser, ctx) {\n    var _this88;\n    _classCallCheck(this, BitAndExpressionContext);\n    _this88 = _callSuper(this, BitAndExpressionContext, [parser]);\n    _defineProperty(_this88, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this88, _getPrototypeOf(BitAndExpressionContext.prototype)), \"copyFrom\", _this88).call(_this88, ctx);\n    return _this88;\n  }\n  _inherits(BitAndExpressionContext, _SingleExpressionCont34);\n  return _createClass(BitAndExpressionContext, [{\n    key: \"BitAnd\",\n    value: function BitAnd() {\n      return this.getToken(ECMAScriptParser.BitAnd, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterBitAndExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitBitAndExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.BitAndExpressionContext = BitAndExpressionContext;\nvar BitOrExpressionContext = /*#__PURE__*/function (_SingleExpressionCont35) {\n  function BitOrExpressionContext(parser, ctx) {\n    var _this89;\n    _classCallCheck(this, BitOrExpressionContext);\n    _this89 = _callSuper(this, BitOrExpressionContext, [parser]);\n    _defineProperty(_this89, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this89, _getPrototypeOf(BitOrExpressionContext.prototype)), \"copyFrom\", _this89).call(_this89, ctx);\n    return _this89;\n  }\n  _inherits(BitOrExpressionContext, _SingleExpressionCont35);\n  return _createClass(BitOrExpressionContext, [{\n    key: \"BitOr\",\n    value: function BitOr() {\n      return this.getToken(ECMAScriptParser.BitOr, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterBitOrExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitBitOrExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.BitOrExpressionContext = BitOrExpressionContext;\nvar AssignmentOperatorExpressionContext = /*#__PURE__*/function (_SingleExpressionCont36) {\n  function AssignmentOperatorExpressionContext(parser, ctx) {\n    var _this90;\n    _classCallCheck(this, AssignmentOperatorExpressionContext);\n    _this90 = _callSuper(this, AssignmentOperatorExpressionContext, [parser]);\n    _defineProperty(_this90, \"singleExpression\", function (i) {\n      if (i === undefined) {\n        i = null;\n      }\n      if (i === null) {\n        return this.getTypedRuleContexts(SingleExpressionContext);\n      } else {\n        return this.getTypedRuleContext(SingleExpressionContext, i);\n      }\n    });\n    _get((_this90, _getPrototypeOf(AssignmentOperatorExpressionContext.prototype)), \"copyFrom\", _this90).call(_this90, ctx);\n    return _this90;\n  }\n  _inherits(AssignmentOperatorExpressionContext, _SingleExpressionCont36);\n  return _createClass(AssignmentOperatorExpressionContext, [{\n    key: \"assignmentOperator\",\n    value: function assignmentOperator() {\n      return this.getTypedRuleContext(AssignmentOperatorContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterAssignmentOperatorExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitAssignmentOperatorExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.AssignmentOperatorExpressionContext = AssignmentOperatorExpressionContext;\nvar VoidExpressionContext = /*#__PURE__*/function (_SingleExpressionCont37) {\n  function VoidExpressionContext(parser, ctx) {\n    var _this91;\n    _classCallCheck(this, VoidExpressionContext);\n    _this91 = _callSuper(this, VoidExpressionContext, [parser]);\n    _get((_this91, _getPrototypeOf(VoidExpressionContext.prototype)), \"copyFrom\", _this91).call(_this91, ctx);\n    return _this91;\n  }\n  _inherits(VoidExpressionContext, _SingleExpressionCont37);\n  return _createClass(VoidExpressionContext, [{\n    key: \"Void\",\n    value: function Void() {\n      return this.getToken(ECMAScriptParser.Void, 0);\n    }\n  }, {\n    key: \"singleExpression\",\n    value: function singleExpression() {\n      return this.getTypedRuleContext(SingleExpressionContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterVoidExpression(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitVoidExpression(this);\n      }\n    }\n  }]);\n}(SingleExpressionContext);\nECMAScriptParser.VoidExpressionContext = VoidExpressionContext;\nvar AssignmentOperatorContext = /*#__PURE__*/function (_antlr4$ParserRuleCon45) {\n  function AssignmentOperatorContext(parser, parent, invokingState) {\n    var _this92;\n    _classCallCheck(this, AssignmentOperatorContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this92 = _callSuper(this, AssignmentOperatorContext, [parent, invokingState]);\n    _this92.parser = parser;\n    _this92.ruleIndex = ECMAScriptParser.RULE_assignmentOperator;\n    return _this92;\n  }\n  _inherits(AssignmentOperatorContext, _antlr4$ParserRuleCon45);\n  return _createClass(AssignmentOperatorContext, [{\n    key: \"MultiplyAssign\",\n    value: function MultiplyAssign() {\n      return this.getToken(ECMAScriptParser.MultiplyAssign, 0);\n    }\n  }, {\n    key: \"DivideAssign\",\n    value: function DivideAssign() {\n      return this.getToken(ECMAScriptParser.DivideAssign, 0);\n    }\n  }, {\n    key: \"ModulusAssign\",\n    value: function ModulusAssign() {\n      return this.getToken(ECMAScriptParser.ModulusAssign, 0);\n    }\n  }, {\n    key: \"PlusAssign\",\n    value: function PlusAssign() {\n      return this.getToken(ECMAScriptParser.PlusAssign, 0);\n    }\n  }, {\n    key: \"MinusAssign\",\n    value: function MinusAssign() {\n      return this.getToken(ECMAScriptParser.MinusAssign, 0);\n    }\n  }, {\n    key: \"LeftShiftArithmeticAssign\",\n    value: function LeftShiftArithmeticAssign() {\n      return this.getToken(ECMAScriptParser.LeftShiftArithmeticAssign, 0);\n    }\n  }, {\n    key: \"RightShiftArithmeticAssign\",\n    value: function RightShiftArithmeticAssign() {\n      return this.getToken(ECMAScriptParser.RightShiftArithmeticAssign, 0);\n    }\n  }, {\n    key: \"RightShiftLogicalAssign\",\n    value: function RightShiftLogicalAssign() {\n      return this.getToken(ECMAScriptParser.RightShiftLogicalAssign, 0);\n    }\n  }, {\n    key: \"BitAndAssign\",\n    value: function BitAndAssign() {\n      return this.getToken(ECMAScriptParser.BitAndAssign, 0);\n    }\n  }, {\n    key: \"BitXorAssign\",\n    value: function BitXorAssign() {\n      return this.getToken(ECMAScriptParser.BitXorAssign, 0);\n    }\n  }, {\n    key: \"BitOrAssign\",\n    value: function BitOrAssign() {\n      return this.getToken(ECMAScriptParser.BitOrAssign, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterAssignmentOperator(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitAssignmentOperator(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar LiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon46) {\n  function LiteralContext(parser, parent, invokingState) {\n    var _this93;\n    _classCallCheck(this, LiteralContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this93 = _callSuper(this, LiteralContext, [parent, invokingState]);\n    _this93.parser = parser;\n    _this93.ruleIndex = ECMAScriptParser.RULE_literal;\n    return _this93;\n  }\n  _inherits(LiteralContext, _antlr4$ParserRuleCon46);\n  return _createClass(LiteralContext, [{\n    key: \"NullLiteral\",\n    value: function NullLiteral() {\n      return this.getToken(ECMAScriptParser.NullLiteral, 0);\n    }\n  }, {\n    key: \"BooleanLiteral\",\n    value: function BooleanLiteral() {\n      return this.getToken(ECMAScriptParser.BooleanLiteral, 0);\n    }\n  }, {\n    key: \"StringLiteral\",\n    value: function StringLiteral() {\n      return this.getToken(ECMAScriptParser.StringLiteral, 0);\n    }\n  }, {\n    key: \"RegularExpressionLiteral\",\n    value: function RegularExpressionLiteral() {\n      return this.getToken(ECMAScriptParser.RegularExpressionLiteral, 0);\n    }\n  }, {\n    key: \"numericLiteral\",\n    value: function numericLiteral() {\n      return this.getTypedRuleContext(NumericLiteralContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterLiteral(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitLiteral(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar NumericLiteralContext = /*#__PURE__*/function (_antlr4$ParserRuleCon47) {\n  function NumericLiteralContext(parser, parent, invokingState) {\n    var _this94;\n    _classCallCheck(this, NumericLiteralContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this94 = _callSuper(this, NumericLiteralContext, [parent, invokingState]);\n    _this94.parser = parser;\n    _this94.ruleIndex = ECMAScriptParser.RULE_numericLiteral;\n    return _this94;\n  }\n  _inherits(NumericLiteralContext, _antlr4$ParserRuleCon47);\n  return _createClass(NumericLiteralContext, [{\n    key: \"DecimalLiteral\",\n    value: function DecimalLiteral() {\n      return this.getToken(ECMAScriptParser.DecimalLiteral, 0);\n    }\n  }, {\n    key: \"HexIntegerLiteral\",\n    value: function HexIntegerLiteral() {\n      return this.getToken(ECMAScriptParser.HexIntegerLiteral, 0);\n    }\n  }, {\n    key: \"OctalIntegerLiteral\",\n    value: function OctalIntegerLiteral() {\n      return this.getToken(ECMAScriptParser.OctalIntegerLiteral, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterNumericLiteral(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitNumericLiteral(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar IdentifierNameContext = /*#__PURE__*/function (_antlr4$ParserRuleCon48) {\n  function IdentifierNameContext(parser, parent, invokingState) {\n    var _this95;\n    _classCallCheck(this, IdentifierNameContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this95 = _callSuper(this, IdentifierNameContext, [parent, invokingState]);\n    _this95.parser = parser;\n    _this95.ruleIndex = ECMAScriptParser.RULE_identifierName;\n    return _this95;\n  }\n  _inherits(IdentifierNameContext, _antlr4$ParserRuleCon48);\n  return _createClass(IdentifierNameContext, [{\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"reservedWord\",\n    value: function reservedWord() {\n      return this.getTypedRuleContext(ReservedWordContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterIdentifierName(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitIdentifierName(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar ReservedWordContext = /*#__PURE__*/function (_antlr4$ParserRuleCon49) {\n  function ReservedWordContext(parser, parent, invokingState) {\n    var _this96;\n    _classCallCheck(this, ReservedWordContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this96 = _callSuper(this, ReservedWordContext, [parent, invokingState]);\n    _this96.parser = parser;\n    _this96.ruleIndex = ECMAScriptParser.RULE_reservedWord;\n    return _this96;\n  }\n  _inherits(ReservedWordContext, _antlr4$ParserRuleCon49);\n  return _createClass(ReservedWordContext, [{\n    key: \"keyword\",\n    value: function keyword() {\n      return this.getTypedRuleContext(KeywordContext, 0);\n    }\n  }, {\n    key: \"futureReservedWord\",\n    value: function futureReservedWord() {\n      return this.getTypedRuleContext(FutureReservedWordContext, 0);\n    }\n  }, {\n    key: \"NullLiteral\",\n    value: function NullLiteral() {\n      return this.getToken(ECMAScriptParser.NullLiteral, 0);\n    }\n  }, {\n    key: \"BooleanLiteral\",\n    value: function BooleanLiteral() {\n      return this.getToken(ECMAScriptParser.BooleanLiteral, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterReservedWord(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitReservedWord(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar KeywordContext = /*#__PURE__*/function (_antlr4$ParserRuleCon50) {\n  function KeywordContext(parser, parent, invokingState) {\n    var _this97;\n    _classCallCheck(this, KeywordContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this97 = _callSuper(this, KeywordContext, [parent, invokingState]);\n    _this97.parser = parser;\n    _this97.ruleIndex = ECMAScriptParser.RULE_keyword;\n    return _this97;\n  }\n  _inherits(KeywordContext, _antlr4$ParserRuleCon50);\n  return _createClass(KeywordContext, [{\n    key: \"Break\",\n    value: function Break() {\n      return this.getToken(ECMAScriptParser.Break, 0);\n    }\n  }, {\n    key: \"Do\",\n    value: function Do() {\n      return this.getToken(ECMAScriptParser.Do, 0);\n    }\n  }, {\n    key: \"Instanceof\",\n    value: function Instanceof() {\n      return this.getToken(ECMAScriptParser.Instanceof, 0);\n    }\n  }, {\n    key: \"Typeof\",\n    value: function Typeof() {\n      return this.getToken(ECMAScriptParser.Typeof, 0);\n    }\n  }, {\n    key: \"Case\",\n    value: function Case() {\n      return this.getToken(ECMAScriptParser.Case, 0);\n    }\n  }, {\n    key: \"Else\",\n    value: function Else() {\n      return this.getToken(ECMAScriptParser.Else, 0);\n    }\n  }, {\n    key: \"New\",\n    value: function New() {\n      return this.getToken(ECMAScriptParser.New, 0);\n    }\n  }, {\n    key: \"Var\",\n    value: function Var() {\n      return this.getToken(ECMAScriptParser.Var, 0);\n    }\n  }, {\n    key: \"Catch\",\n    value: function Catch() {\n      return this.getToken(ECMAScriptParser.Catch, 0);\n    }\n  }, {\n    key: \"Finally\",\n    value: function Finally() {\n      return this.getToken(ECMAScriptParser.Finally, 0);\n    }\n  }, {\n    key: \"Return\",\n    value: function Return() {\n      return this.getToken(ECMAScriptParser.Return, 0);\n    }\n  }, {\n    key: \"Void\",\n    value: function Void() {\n      return this.getToken(ECMAScriptParser.Void, 0);\n    }\n  }, {\n    key: \"Continue\",\n    value: function Continue() {\n      return this.getToken(ECMAScriptParser.Continue, 0);\n    }\n  }, {\n    key: \"For\",\n    value: function For() {\n      return this.getToken(ECMAScriptParser.For, 0);\n    }\n  }, {\n    key: \"Switch\",\n    value: function Switch() {\n      return this.getToken(ECMAScriptParser.Switch, 0);\n    }\n  }, {\n    key: \"While\",\n    value: function While() {\n      return this.getToken(ECMAScriptParser.While, 0);\n    }\n  }, {\n    key: \"Debugger\",\n    value: function Debugger() {\n      return this.getToken(ECMAScriptParser.Debugger, 0);\n    }\n  }, {\n    key: \"Function\",\n    value: function Function() {\n      return this.getToken(ECMAScriptParser.Function, 0);\n    }\n  }, {\n    key: \"This\",\n    value: function This() {\n      return this.getToken(ECMAScriptParser.This, 0);\n    }\n  }, {\n    key: \"With\",\n    value: function With() {\n      return this.getToken(ECMAScriptParser.With, 0);\n    }\n  }, {\n    key: \"Default\",\n    value: function Default() {\n      return this.getToken(ECMAScriptParser.Default, 0);\n    }\n  }, {\n    key: \"If\",\n    value: function If() {\n      return this.getToken(ECMAScriptParser.If, 0);\n    }\n  }, {\n    key: \"Throw\",\n    value: function Throw() {\n      return this.getToken(ECMAScriptParser.Throw, 0);\n    }\n  }, {\n    key: \"Delete\",\n    value: function Delete() {\n      return this.getToken(ECMAScriptParser.Delete, 0);\n    }\n  }, {\n    key: \"In\",\n    value: function In() {\n      return this.getToken(ECMAScriptParser.In, 0);\n    }\n  }, {\n    key: \"Try\",\n    value: function Try() {\n      return this.getToken(ECMAScriptParser.Try, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterKeyword(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitKeyword(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar FutureReservedWordContext = /*#__PURE__*/function (_antlr4$ParserRuleCon51) {\n  function FutureReservedWordContext(parser, parent, invokingState) {\n    var _this98;\n    _classCallCheck(this, FutureReservedWordContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this98 = _callSuper(this, FutureReservedWordContext, [parent, invokingState]);\n    _this98.parser = parser;\n    _this98.ruleIndex = ECMAScriptParser.RULE_futureReservedWord;\n    return _this98;\n  }\n  _inherits(FutureReservedWordContext, _antlr4$ParserRuleCon51);\n  return _createClass(FutureReservedWordContext, [{\n    key: \"Class\",\n    value: function Class() {\n      return this.getToken(ECMAScriptParser.Class, 0);\n    }\n  }, {\n    key: \"Enum\",\n    value: function Enum() {\n      return this.getToken(ECMAScriptParser.Enum, 0);\n    }\n  }, {\n    key: \"Extends\",\n    value: function Extends() {\n      return this.getToken(ECMAScriptParser.Extends, 0);\n    }\n  }, {\n    key: \"Super\",\n    value: function Super() {\n      return this.getToken(ECMAScriptParser.Super, 0);\n    }\n  }, {\n    key: \"Const\",\n    value: function Const() {\n      return this.getToken(ECMAScriptParser.Const, 0);\n    }\n  }, {\n    key: \"Export\",\n    value: function Export() {\n      return this.getToken(ECMAScriptParser.Export, 0);\n    }\n  }, {\n    key: \"Import\",\n    value: function Import() {\n      return this.getToken(ECMAScriptParser.Import, 0);\n    }\n  }, {\n    key: \"Implements\",\n    value: function Implements() {\n      return this.getToken(ECMAScriptParser.Implements, 0);\n    }\n  }, {\n    key: \"Let\",\n    value: function Let() {\n      return this.getToken(ECMAScriptParser.Let, 0);\n    }\n  }, {\n    key: \"Private\",\n    value: function Private() {\n      return this.getToken(ECMAScriptParser.Private, 0);\n    }\n  }, {\n    key: \"Public\",\n    value: function Public() {\n      return this.getToken(ECMAScriptParser.Public, 0);\n    }\n  }, {\n    key: \"Interface\",\n    value: function Interface() {\n      return this.getToken(ECMAScriptParser.Interface, 0);\n    }\n  }, {\n    key: \"Package\",\n    value: function Package() {\n      return this.getToken(ECMAScriptParser.Package, 0);\n    }\n  }, {\n    key: \"Protected\",\n    value: function Protected() {\n      return this.getToken(ECMAScriptParser.Protected, 0);\n    }\n  }, {\n    key: \"Static\",\n    value: function Static() {\n      return this.getToken(ECMAScriptParser.Static, 0);\n    }\n  }, {\n    key: \"Yield\",\n    value: function Yield() {\n      return this.getToken(ECMAScriptParser.Yield, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterFutureReservedWord(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitFutureReservedWord(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar GetterContext = /*#__PURE__*/function (_antlr4$ParserRuleCon52) {\n  function GetterContext(parser, parent, invokingState) {\n    var _this99;\n    _classCallCheck(this, GetterContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this99 = _callSuper(this, GetterContext, [parent, invokingState]);\n    _this99.parser = parser;\n    _this99.ruleIndex = ECMAScriptParser.RULE_getter;\n    return _this99;\n  }\n  _inherits(GetterContext, _antlr4$ParserRuleCon52);\n  return _createClass(GetterContext, [{\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"propertyName\",\n    value: function propertyName() {\n      return this.getTypedRuleContext(PropertyNameContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterGetter(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitGetter(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar SetterContext = /*#__PURE__*/function (_antlr4$ParserRuleCon53) {\n  function SetterContext(parser, parent, invokingState) {\n    var _this100;\n    _classCallCheck(this, SetterContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this100 = _callSuper(this, SetterContext, [parent, invokingState]);\n    _this100.parser = parser;\n    _this100.ruleIndex = ECMAScriptParser.RULE_setter;\n    return _this100;\n  }\n  _inherits(SetterContext, _antlr4$ParserRuleCon53);\n  return _createClass(SetterContext, [{\n    key: \"Identifier\",\n    value: function Identifier() {\n      return this.getToken(ECMAScriptParser.Identifier, 0);\n    }\n  }, {\n    key: \"propertyName\",\n    value: function propertyName() {\n      return this.getTypedRuleContext(PropertyNameContext, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterSetter(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitSetter(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar EosContext = /*#__PURE__*/function (_antlr4$ParserRuleCon54) {\n  function EosContext(parser, parent, invokingState) {\n    var _this101;\n    _classCallCheck(this, EosContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this101 = _callSuper(this, EosContext, [parent, invokingState]);\n    _this101.parser = parser;\n    _this101.ruleIndex = ECMAScriptParser.RULE_eos;\n    return _this101;\n  }\n  _inherits(EosContext, _antlr4$ParserRuleCon54);\n  return _createClass(EosContext, [{\n    key: \"SemiColon\",\n    value: function SemiColon() {\n      return this.getToken(ECMAScriptParser.SemiColon, 0);\n    }\n  }, {\n    key: \"EOF\",\n    value: function EOF() {\n      return this.getToken(ECMAScriptParser.EOF, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterEos(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitEos(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nvar EofContext = /*#__PURE__*/function (_antlr4$ParserRuleCon55) {\n  function EofContext(parser, parent, invokingState) {\n    var _this102;\n    _classCallCheck(this, EofContext);\n    if (parent === undefined) {\n      parent = null;\n    }\n    if (invokingState === undefined || invokingState === null) {\n      invokingState = -1;\n    }\n    _this102 = _callSuper(this, EofContext, [parent, invokingState]);\n    _this102.parser = parser;\n    _this102.ruleIndex = ECMAScriptParser.RULE_eof;\n    return _this102;\n  }\n  _inherits(EofContext, _antlr4$ParserRuleCon55);\n  return _createClass(EofContext, [{\n    key: \"EOF\",\n    value: function EOF() {\n      return this.getToken(ECMAScriptParser.EOF, 0);\n    }\n  }, {\n    key: \"enterRule\",\n    value: function enterRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.enterEof(this);\n      }\n    }\n  }, {\n    key: \"exitRule\",\n    value: function exitRule(listener) {\n      if (listener instanceof _ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n        listener.exitEof(this);\n      }\n    }\n  }]);\n}(antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ParserRuleContext);\nECMAScriptParser.ProgramContext = ProgramContext;\nECMAScriptParser.SourceElementsContext = SourceElementsContext;\nECMAScriptParser.SourceElementContext = SourceElementContext;\nECMAScriptParser.StatementContext = StatementContext;\nECMAScriptParser.BlockContext = BlockContext;\nECMAScriptParser.StatementListContext = StatementListContext;\nECMAScriptParser.VariableStatementContext = VariableStatementContext;\nECMAScriptParser.VariableDeclarationListContext = VariableDeclarationListContext;\nECMAScriptParser.VariableDeclarationContext = VariableDeclarationContext;\nECMAScriptParser.InitialiserContext = InitialiserContext;\nECMAScriptParser.EmptyStatement_Context = EmptyStatement_Context;\nECMAScriptParser.ExpressionStatementContext = ExpressionStatementContext;\nECMAScriptParser.IfStatementContext = IfStatementContext;\nECMAScriptParser.IterationStatementContext = IterationStatementContext;\nECMAScriptParser.ContinueStatementContext = ContinueStatementContext;\nECMAScriptParser.BreakStatementContext = BreakStatementContext;\nECMAScriptParser.ReturnStatementContext = ReturnStatementContext;\nECMAScriptParser.WithStatementContext = WithStatementContext;\nECMAScriptParser.SwitchStatementContext = SwitchStatementContext;\nECMAScriptParser.CaseBlockContext = CaseBlockContext;\nECMAScriptParser.CaseClausesContext = CaseClausesContext;\nECMAScriptParser.CaseClauseContext = CaseClauseContext;\nECMAScriptParser.DefaultClauseContext = DefaultClauseContext;\nECMAScriptParser.LabelledStatementContext = LabelledStatementContext;\nECMAScriptParser.ThrowStatementContext = ThrowStatementContext;\nECMAScriptParser.TryStatementContext = TryStatementContext;\nECMAScriptParser.CatchProductionContext = CatchProductionContext;\nECMAScriptParser.FinallyProductionContext = FinallyProductionContext;\nECMAScriptParser.DebuggerStatementContext = DebuggerStatementContext;\nECMAScriptParser.FunctionDeclarationContext = FunctionDeclarationContext;\nECMAScriptParser.FormalParameterListContext = FormalParameterListContext;\nECMAScriptParser.FunctionBodyContext = FunctionBodyContext;\nECMAScriptParser.ArrayLiteralContext = ArrayLiteralContext;\nECMAScriptParser.ElementListContext = ElementListContext;\nECMAScriptParser.ElisionContext = ElisionContext;\nECMAScriptParser.ObjectLiteralContext = ObjectLiteralContext;\nECMAScriptParser.PropertyNameAndValueListContext = PropertyNameAndValueListContext;\nECMAScriptParser.PropertyAssignmentContext = PropertyAssignmentContext;\nECMAScriptParser.PropertyNameContext = PropertyNameContext;\nECMAScriptParser.PropertySetParameterListContext = PropertySetParameterListContext;\nECMAScriptParser.ArgumentsContext = ArgumentsContext;\nECMAScriptParser.ArgumentListContext = ArgumentListContext;\nECMAScriptParser.ExpressionSequenceContext = ExpressionSequenceContext;\nECMAScriptParser.SingleExpressionContext = SingleExpressionContext;\nECMAScriptParser.AssignmentOperatorContext = AssignmentOperatorContext;\nECMAScriptParser.LiteralContext = LiteralContext;\nECMAScriptParser.NumericLiteralContext = NumericLiteralContext;\nECMAScriptParser.IdentifierNameContext = IdentifierNameContext;\nECMAScriptParser.ReservedWordContext = ReservedWordContext;\nECMAScriptParser.KeywordContext = KeywordContext;\nECMAScriptParser.FutureReservedWordContext = FutureReservedWordContext;\nECMAScriptParser.GetterContext = GetterContext;\nECMAScriptParser.SetterContext = SetterContext;\nECMAScriptParser.EosContext = EosContext;\nECMAScriptParser.EofContext = EofContext;\n\n//# sourceURL=webpack://my-webpack-project/./grammars/out/ECMAScriptParser.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/dist/antlr4.web.mjs\");\n/* harmony import */ var _grammars_out_ECMAScriptLexer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../grammars/out/ECMAScriptLexer.js */ \"./grammars/out/ECMAScriptLexer.js\");\n/* harmony import */ var _grammars_out_ECMAScriptParser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../grammars/out/ECMAScriptParser.js */ \"./grammars/out/ECMAScriptParser.js\");\n/* harmony import */ var _grammars_out_ECMAScriptListener_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../grammars/out/ECMAScriptListener.js */ \"./grammars/out/ECMAScriptListener.js\");\n\n\n\n\nvar input = \"\\nconst nar = 100;\\n\";\nvar chars = new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].InputStream(input);\nvar lexer = new _grammars_out_ECMAScriptLexer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](chars);\nvar tokens = new antlr4__WEBPACK_IMPORTED_MODULE_0__[\"default\"].CommonTokenStream(lexer);\nvar parser = new _grammars_out_ECMAScriptParser_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](tokens);\nglobalThis.myParser = parser;\n//const tree = parser.MyStartRule();\n\n//# sourceURL=webpack://my-webpack-project/./src/index.js?");

/***/ }),

/***/ "./node_modules/antlr4/dist/antlr4.web.mjs":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/dist/antlr4.web.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ATN: () => (/* binding */ i),\n/* harmony export */   ATNDeserializer: () => (/* binding */ r),\n/* harmony export */   BailErrorStrategy: () => (/* binding */ o),\n/* harmony export */   CharStream: () => (/* binding */ a),\n/* harmony export */   CharStreams: () => (/* binding */ l),\n/* harmony export */   CommonToken: () => (/* binding */ h),\n/* harmony export */   CommonTokenStream: () => (/* binding */ c),\n/* harmony export */   DFA: () => (/* binding */ u),\n/* harmony export */   DefaultErrorStrategy: () => (/* binding */ d),\n/* harmony export */   DiagnosticErrorListener: () => (/* binding */ p),\n/* harmony export */   ErrorListener: () => (/* binding */ g),\n/* harmony export */   FailedPredicateException: () => (/* binding */ f),\n/* harmony export */   InputStream: () => (/* binding */ x),\n/* harmony export */   Interval: () => (/* binding */ T),\n/* harmony export */   IntervalSet: () => (/* binding */ S),\n/* harmony export */   LL1Analyzer: () => (/* binding */ m),\n/* harmony export */   Lexer: () => (/* binding */ E),\n/* harmony export */   LexerATNSimulator: () => (/* binding */ _),\n/* harmony export */   NoViableAltException: () => (/* binding */ A),\n/* harmony export */   ParseTreeListener: () => (/* binding */ C),\n/* harmony export */   ParseTreeVisitor: () => (/* binding */ N),\n/* harmony export */   ParseTreeWalker: () => (/* binding */ y),\n/* harmony export */   Parser: () => (/* binding */ I),\n/* harmony export */   ParserATNSimulator: () => (/* binding */ k),\n/* harmony export */   ParserRuleContext: () => (/* binding */ L),\n/* harmony export */   PredictionContextCache: () => (/* binding */ O),\n/* harmony export */   PredictionMode: () => (/* binding */ v),\n/* harmony export */   RecognitionException: () => (/* binding */ R),\n/* harmony export */   RuleContext: () => (/* binding */ w),\n/* harmony export */   RuleNode: () => (/* binding */ P),\n/* harmony export */   TerminalNode: () => (/* binding */ b),\n/* harmony export */   Token: () => (/* binding */ D),\n/* harmony export */   arrayToString: () => (/* binding */ F),\n/* harmony export */   \"default\": () => (/* binding */ M)\n/* harmony export */ });\nvar t={92:()=>{}},e={};function n(s){var i=e[s];if(void 0!==i)return i.exports;var r=e[s]={exports:{}};return t[s](r,r.exports,n),r.exports}n.d=(t,e)=>{for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var s={};(()=>{n.d(s,{dx:()=>$,q2:()=>Lt,FO:()=>Ce,xf:()=>Ie,Gy:()=>ve,s4:()=>Pt,c7:()=>be,_7:()=>le,tx:()=>Ae,gp:()=>me,cK:()=>Ot,zs:()=>Te,AV:()=>Ie,Xp:()=>m,VS:()=>E,ul:()=>W,hW:()=>Ut,x1:()=>Xt,z5:()=>ee,oN:()=>de,TB:()=>pe,u1:()=>ge,_b:()=>Fe,$F:()=>se,_T:()=>Be,db:()=>ie,Zx:()=>te,_x:()=>Ft,r8:()=>M,JI:()=>w,TP:()=>P,WU:()=>t,Nj:()=>c,ZP:()=>We});class t{constructor(){this.source=null,this.type=null,this.channel=null,this.start=null,this.stop=null,this.tokenIndex=null,this.line=null,this.column=null,this._text=null}getTokenSource(){return this.source[0]}getInputStream(){return this.source[1]}get text(){return this._text}set text(t){this._text=t}}function e(t,e){if(!Array.isArray(t)||!Array.isArray(e))return!1;if(t===e)return!0;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(!(t[n]===e[n]||t[n].equals&&t[n].equals(e[n])))return!1;return!0}t.INVALID_TYPE=0,t.EPSILON=-2,t.MIN_USER_TOKEN_TYPE=1,t.EOF=-1,t.DEFAULT_CHANNEL=0,t.HIDDEN_CHANNEL=1;const i=Math.round(Math.random()*Math.pow(2,32));function r(t){if(!t)return 0;const e=typeof t,n=\"string\"===e?t:!(\"object\"!==e||!t.toString)&&t.toString();if(!n)return 0;let s,r;const o=3&n.length,a=n.length-o;let l=i;const h=3432918353,c=461845907;let u=0;for(;u<a;)r=255&n.charCodeAt(u)|(255&n.charCodeAt(++u))<<8|(255&n.charCodeAt(++u))<<16|(255&n.charCodeAt(++u))<<24,++u,r=(65535&r)*h+(((r>>>16)*h&65535)<<16)&4294967295,r=r<<15|r>>>17,r=(65535&r)*c+(((r>>>16)*c&65535)<<16)&4294967295,l^=r,l=l<<13|l>>>19,s=5*(65535&l)+((5*(l>>>16)&65535)<<16)&4294967295,l=27492+(65535&s)+((58964+(s>>>16)&65535)<<16);switch(r=0,o){case 3:r^=(255&n.charCodeAt(u+2))<<16;case 2:r^=(255&n.charCodeAt(u+1))<<8;case 1:r^=255&n.charCodeAt(u),r=(65535&r)*h+(((r>>>16)*h&65535)<<16)&4294967295,r=r<<15|r>>>17,r=(65535&r)*c+(((r>>>16)*c&65535)<<16)&4294967295,l^=r}return l^=n.length,l^=l>>>16,l=2246822507*(65535&l)+((2246822507*(l>>>16)&65535)<<16)&4294967295,l^=l>>>13,l=3266489909*(65535&l)+((3266489909*(l>>>16)&65535)<<16)&4294967295,l^=l>>>16,l>>>0}class o{constructor(){this.count=0,this.hash=0}update(){for(let t=0;t<arguments.length;t++){const e=arguments[t];if(null!=e)if(Array.isArray(e))this.update.apply(this,e);else{let t=0;switch(typeof e){case\"undefined\":case\"function\":continue;case\"number\":case\"boolean\":t=e;break;case\"string\":t=r(e);break;default:e.updateHashCode?e.updateHashCode(this):console.log(\"No updateHashCode for \"+e.toString());continue}t*=3432918353,t=t<<15|t>>>17,t*=461845907,this.count=this.count+1;let n=this.hash^t;n=n<<13|n>>>19,n=5*n+3864292196,this.hash=n}}}finish(){let t=this.hash^4*this.count;return t^=t>>>16,t*=2246822507,t^=t>>>13,t*=3266489909,t^=t>>>16,t}static hashStuff(){const t=new o;return t.update.apply(t,arguments),t.finish()}}function a(t){return t?\"string\"==typeof t?r(t):t.hashCode():-1}function l(t,e){return t?t.equals(e):t===e}function h(t){return null===t?\"null\":t}function c(t){return Array.isArray(t)?\"[\"+t.map(h).join(\", \")+\"]\":\"null\"}const u=\"h-\";class d{constructor(t,e){this.data={},this.hashFunction=t||a,this.equalsFunction=e||l}add(t){const e=u+this.hashFunction(t);if(e in this.data){const n=this.data[e];for(let e=0;e<n.length;e++)if(this.equalsFunction(t,n[e]))return n[e];return n.push(t),t}return this.data[e]=[t],t}has(t){return null!=this.get(t)}get(t){const e=u+this.hashFunction(t);if(e in this.data){const n=this.data[e];for(let e=0;e<n.length;e++)if(this.equalsFunction(t,n[e]))return n[e]}return null}values(){return Object.keys(this.data).filter((t=>t.startsWith(u))).flatMap((t=>this.data[t]),this)}toString(){return c(this.values())}get length(){return Object.keys(this.data).filter((t=>t.startsWith(u))).map((t=>this.data[t].length),this).reduce(((t,e)=>t+e),0)}}class p{hashCode(){const t=new o;return this.updateHashCode(t),t.finish()}evaluate(t,e){}evalPrecedence(t,e){return this}static andContext(t,e){if(null===t||t===p.NONE)return e;if(null===e||e===p.NONE)return t;const n=new g(t,e);return 1===n.opnds.length?n.opnds[0]:n}static orContext(t,e){if(null===t)return e;if(null===e)return t;if(t===p.NONE||e===p.NONE)return p.NONE;const n=new f(t,e);return 1===n.opnds.length?n.opnds[0]:n}}class g extends p{constructor(t,e){super();const n=new d;t instanceof g?t.opnds.map((function(t){n.add(t)})):n.add(t),e instanceof g?e.opnds.map((function(t){n.add(t)})):n.add(e);const s=x(n);if(s.length>0){let t=null;s.map((function(e){(null===t||e.precedence<t.precedence)&&(t=e)})),n.add(t)}this.opnds=Array.from(n.values())}equals(t){return this===t||t instanceof g&&e(this.opnds,t.opnds)}updateHashCode(t){t.update(this.opnds,\"AND\")}evaluate(t,e){for(let n=0;n<this.opnds.length;n++)if(!this.opnds[n].evaluate(t,e))return!1;return!0}evalPrecedence(t,e){let n=!1;const s=[];for(let i=0;i<this.opnds.length;i++){const r=this.opnds[i],o=r.evalPrecedence(t,e);if(n|=o!==r,null===o)return null;o!==p.NONE&&s.push(o)}if(!n)return this;if(0===s.length)return p.NONE;let i=null;return s.map((function(t){i=null===i?t:p.andContext(i,t)})),i}toString(){const t=this.opnds.map((t=>t.toString()));return(t.length>3?t.slice(3):t).join(\"&&\")}}class f extends p{constructor(t,e){super();const n=new d;t instanceof f?t.opnds.map((function(t){n.add(t)})):n.add(t),e instanceof f?e.opnds.map((function(t){n.add(t)})):n.add(e);const s=x(n);if(s.length>0){const t=s.sort((function(t,e){return t.compareTo(e)})),e=t[t.length-1];n.add(e)}this.opnds=Array.from(n.values())}equals(t){return this===t||t instanceof f&&e(this.opnds,t.opnds)}updateHashCode(t){t.update(this.opnds,\"OR\")}evaluate(t,e){for(let n=0;n<this.opnds.length;n++)if(this.opnds[n].evaluate(t,e))return!0;return!1}evalPrecedence(t,e){let n=!1;const s=[];for(let i=0;i<this.opnds.length;i++){const r=this.opnds[i],o=r.evalPrecedence(t,e);if(n|=o!==r,o===p.NONE)return p.NONE;null!==o&&s.push(o)}if(!n)return this;if(0===s.length)return null;return s.map((function(t){return t})),null}toString(){const t=this.opnds.map((t=>t.toString()));return(t.length>3?t.slice(3):t).join(\"||\")}}function x(t){const e=[];return t.values().map((function(t){t instanceof p.PrecedencePredicate&&e.push(t)})),e}function T(t,e){if(null===t){const t={state:null,alt:null,context:null,semanticContext:null};return e&&(t.reachesIntoOuterContext=0),t}{const n={};return n.state=t.state||null,n.alt=void 0===t.alt?null:t.alt,n.context=t.context||null,n.semanticContext=t.semanticContext||null,e&&(n.reachesIntoOuterContext=t.reachesIntoOuterContext||0,n.precedenceFilterSuppressed=t.precedenceFilterSuppressed||!1),n}}class S{constructor(t,e){this.checkContext(t,e),t=T(t),e=T(e,!0),this.state=null!==t.state?t.state:e.state,this.alt=null!==t.alt?t.alt:e.alt,this.context=null!==t.context?t.context:e.context,this.semanticContext=null!==t.semanticContext?t.semanticContext:null!==e.semanticContext?e.semanticContext:p.NONE,this.reachesIntoOuterContext=e.reachesIntoOuterContext,this.precedenceFilterSuppressed=e.precedenceFilterSuppressed}checkContext(t,e){null!==t.context&&void 0!==t.context||null!==e&&null!==e.context&&void 0!==e.context||(this.context=null)}hashCode(){const t=new o;return this.updateHashCode(t),t.finish()}updateHashCode(t){t.update(this.state.stateNumber,this.alt,this.context,this.semanticContext)}equals(t){return this===t||t instanceof S&&this.state.stateNumber===t.state.stateNumber&&this.alt===t.alt&&(null===this.context?null===t.context:this.context.equals(t.context))&&this.semanticContext.equals(t.semanticContext)&&this.precedenceFilterSuppressed===t.precedenceFilterSuppressed}hashCodeForConfigSet(){const t=new o;return t.update(this.state.stateNumber,this.alt,this.semanticContext),t.finish()}equalsForConfigSet(t){return this===t||t instanceof S&&this.state.stateNumber===t.state.stateNumber&&this.alt===t.alt&&this.semanticContext.equals(t.semanticContext)}toString(){return\"(\"+this.state+\",\"+this.alt+(null!==this.context?\",[\"+this.context.toString()+\"]\":\"\")+(this.semanticContext!==p.NONE?\",\"+this.semanticContext.toString():\"\")+(this.reachesIntoOuterContext>0?\",up=\"+this.reachesIntoOuterContext:\"\")+\")\"}}class m{constructor(t,e){this.start=t,this.stop=e}clone(){return new m(this.start,this.stop)}contains(t){return t>=this.start&&t<this.stop}toString(){return this.start===this.stop-1?this.start.toString():this.start.toString()+\"..\"+(this.stop-1).toString()}get length(){return this.stop-this.start}}m.INVALID_INTERVAL=new m(-1,-2);class E{constructor(){this.intervals=null,this.readOnly=!1}first(e){return null===this.intervals||0===this.intervals.length?t.INVALID_TYPE:this.intervals[0].start}addOne(t){this.addInterval(new m(t,t+1))}addRange(t,e){this.addInterval(new m(t,e+1))}addInterval(t){if(null===this.intervals)this.intervals=[],this.intervals.push(t.clone());else{for(let e=0;e<this.intervals.length;e++){const n=this.intervals[e];if(t.stop<n.start)return void this.intervals.splice(e,0,t);if(t.stop===n.start)return void(this.intervals[e]=new m(t.start,n.stop));if(t.start<=n.stop)return this.intervals[e]=new m(Math.min(n.start,t.start),Math.max(n.stop,t.stop)),void this.reduce(e)}this.intervals.push(t.clone())}}addSet(t){return null!==t.intervals&&t.intervals.forEach((t=>this.addInterval(t)),this),this}reduce(t){if(t<this.intervals.length-1){const e=this.intervals[t],n=this.intervals[t+1];e.stop>=n.stop?(this.intervals.splice(t+1,1),this.reduce(t)):e.stop>=n.start&&(this.intervals[t]=new m(e.start,n.stop),this.intervals.splice(t+1,1))}}complement(t,e){const n=new E;return n.addInterval(new m(t,e+1)),null!==this.intervals&&this.intervals.forEach((t=>n.removeRange(t))),n}contains(t){if(null===this.intervals)return!1;for(let e=0;e<this.intervals.length;e++)if(this.intervals[e].contains(t))return!0;return!1}removeRange(t){if(t.start===t.stop-1)this.removeOne(t.start);else if(null!==this.intervals){let e=0;for(let n=0;n<this.intervals.length;n++){const n=this.intervals[e];if(t.stop<=n.start)return;if(t.start>n.start&&t.stop<n.stop){this.intervals[e]=new m(n.start,t.start);const s=new m(t.stop,n.stop);return void this.intervals.splice(e,0,s)}t.start<=n.start&&t.stop>=n.stop?(this.intervals.splice(e,1),e-=1):t.start<n.stop?this.intervals[e]=new m(n.start,t.start):t.stop<n.stop&&(this.intervals[e]=new m(t.stop,n.stop)),e+=1}}}removeOne(t){if(null!==this.intervals)for(let e=0;e<this.intervals.length;e++){const n=this.intervals[e];if(t<n.start)return;if(t===n.start&&t===n.stop-1)return void this.intervals.splice(e,1);if(t===n.start)return void(this.intervals[e]=new m(n.start+1,n.stop));if(t===n.stop-1)return void(this.intervals[e]=new m(n.start,n.stop-1));if(t<n.stop-1){const s=new m(n.start,t);return n.start=t+1,void this.intervals.splice(e,0,s)}}}toString(t,e,n){return t=t||null,e=e||null,n=n||!1,null===this.intervals?\"{}\":null!==t||null!==e?this.toTokenString(t,e):n?this.toCharString():this.toIndexString()}toCharString(){const e=[];for(let n=0;n<this.intervals.length;n++){const s=this.intervals[n];s.stop===s.start+1?s.start===t.EOF?e.push(\"<EOF>\"):e.push(\"'\"+String.fromCharCode(s.start)+\"'\"):e.push(\"'\"+String.fromCharCode(s.start)+\"'..'\"+String.fromCharCode(s.stop-1)+\"'\")}return e.length>1?\"{\"+e.join(\", \")+\"}\":e[0]}toIndexString(){const e=[];for(let n=0;n<this.intervals.length;n++){const s=this.intervals[n];s.stop===s.start+1?s.start===t.EOF?e.push(\"<EOF>\"):e.push(s.start.toString()):e.push(s.start.toString()+\"..\"+(s.stop-1).toString())}return e.length>1?\"{\"+e.join(\", \")+\"}\":e[0]}toTokenString(t,e){const n=[];for(let s=0;s<this.intervals.length;s++){const i=this.intervals[s];for(let s=i.start;s<i.stop;s++)n.push(this.elementName(t,e,s))}return n.length>1?\"{\"+n.join(\", \")+\"}\":n[0]}elementName(e,n,s){return s===t.EOF?\"<EOF>\":s===t.EPSILON?\"<EPSILON>\":e[s]||n[s]}get length(){return this.intervals.map((t=>t.length)).reduce(((t,e)=>t+e))}}class _{constructor(){this.atn=null,this.stateNumber=_.INVALID_STATE_NUMBER,this.stateType=null,this.ruleIndex=0,this.epsilonOnlyTransitions=!1,this.transitions=[],this.nextTokenWithinRule=null}toString(){return this.stateNumber}equals(t){return t instanceof _&&this.stateNumber===t.stateNumber}isNonGreedyExitState(){return!1}addTransition(t,e){void 0===e&&(e=-1),0===this.transitions.length?this.epsilonOnlyTransitions=t.isEpsilon:this.epsilonOnlyTransitions!==t.isEpsilon&&(this.epsilonOnlyTransitions=!1),-1===e?this.transitions.push(t):this.transitions.splice(e,1,t)}}_.INVALID_TYPE=0,_.BASIC=1,_.RULE_START=2,_.BLOCK_START=3,_.PLUS_BLOCK_START=4,_.STAR_BLOCK_START=5,_.TOKEN_START=6,_.RULE_STOP=7,_.BLOCK_END=8,_.STAR_LOOP_BACK=9,_.STAR_LOOP_ENTRY=10,_.PLUS_LOOP_BACK=11,_.LOOP_END=12,_.serializationNames=[\"INVALID\",\"BASIC\",\"RULE_START\",\"BLOCK_START\",\"PLUS_BLOCK_START\",\"STAR_BLOCK_START\",\"TOKEN_START\",\"RULE_STOP\",\"BLOCK_END\",\"STAR_LOOP_BACK\",\"STAR_LOOP_ENTRY\",\"PLUS_LOOP_BACK\",\"LOOP_END\"],_.INVALID_STATE_NUMBER=-1;class A extends _{constructor(){return super(),this.stateType=_.RULE_STOP,this}}class C{constructor(t){if(null==t)throw\"target cannot be null.\";this.target=t,this.isEpsilon=!1,this.label=null}}C.EPSILON=1,C.RANGE=2,C.RULE=3,C.PREDICATE=4,C.ATOM=5,C.ACTION=6,C.SET=7,C.NOT_SET=8,C.WILDCARD=9,C.PRECEDENCE=10,C.serializationNames=[\"INVALID\",\"EPSILON\",\"RANGE\",\"RULE\",\"PREDICATE\",\"ATOM\",\"ACTION\",\"SET\",\"NOT_SET\",\"WILDCARD\",\"PRECEDENCE\"],C.serializationTypes={EpsilonTransition:C.EPSILON,RangeTransition:C.RANGE,RuleTransition:C.RULE,PredicateTransition:C.PREDICATE,AtomTransition:C.ATOM,ActionTransition:C.ACTION,SetTransition:C.SET,NotSetTransition:C.NOT_SET,WildcardTransition:C.WILDCARD,PrecedencePredicateTransition:C.PRECEDENCE};class N extends C{constructor(t,e,n,s){super(t),this.ruleIndex=e,this.precedence=n,this.followState=s,this.serializationType=C.RULE,this.isEpsilon=!0}matches(t,e,n){return!1}}class y extends C{constructor(e,n){super(e),this.serializationType=C.SET,null!=n?this.label=n:(this.label=new E,this.label.addOne(t.INVALID_TYPE))}matches(t,e,n){return this.label.contains(t)}toString(){return this.label.toString()}}class I extends y{constructor(t,e){super(t,e),this.serializationType=C.NOT_SET}matches(t,e,n){return t>=e&&t<=n&&!super.matches(t,e,n)}toString(){return\"~\"+super.toString()}}class k extends C{constructor(t){super(t),this.serializationType=C.WILDCARD}matches(t,e,n){return t>=e&&t<=n}toString(){return\".\"}}class L extends C{constructor(t){super(t)}}class O{}class v extends O{}class R extends v{}class w extends R{get ruleContext(){throw new Error(\"missing interface implementation\")}}class P extends R{}class b extends P{}const D={toStringTree:function(t,e,n){e=e||null,null!==(n=n||null)&&(e=n.ruleNames);let s=D.getNodeText(t,e);s=function(t,e){return t=t.replace(/\\t/g,\"\\\\t\").replace(/\\n/g,\"\\\\n\").replace(/\\r/g,\"\\\\r\")}(s);const i=t.getChildCount();if(0===i)return s;let r=\"(\"+s+\" \";i>0&&(s=D.toStringTree(t.getChild(0),e),r=r.concat(s));for(let n=1;n<i;n++)s=D.toStringTree(t.getChild(n),e),r=r.concat(\" \"+s);return r=r.concat(\")\"),r},getNodeText:function(e,n,s){if(n=n||null,null!==(s=s||null)&&(n=s.ruleNames),null!==n){if(e instanceof w){const t=e.ruleContext.getAltNumber();return 0!=t?n[e.ruleIndex]+\":\"+t:n[e.ruleIndex]}if(e instanceof b)return e.toString();if(e instanceof P&&null!==e.symbol)return e.symbol.text}const i=e.getPayload();return i instanceof t?i.text:e.getPayload().toString()},getChildren:function(t){const e=[];for(let n=0;n<t.getChildCount();n++)e.push(t.getChild(n));return e},getAncestors:function(t){let e=[];for(t=t.getParent();null!==t;)e=[t].concat(e),t=t.getParent();return e},findAllTokenNodes:function(t,e){return D.findAllNodes(t,e,!0)},findAllRuleNodes:function(t,e){return D.findAllNodes(t,e,!1)},findAllNodes:function(t,e,n){const s=[];return D._findAllNodes(t,e,n,s),s},_findAllNodes:function(t,e,n,s){n&&t instanceof P?t.symbol.type===e&&s.push(t):!n&&t instanceof w&&t.ruleIndex===e&&s.push(t);for(let i=0;i<t.getChildCount();i++)D._findAllNodes(t.getChild(i),e,n,s)},descendants:function(t){let e=[t];for(let n=0;n<t.getChildCount();n++)e=e.concat(D.descendants(t.getChild(n)));return e}},F=D;class M extends w{constructor(t,e){super(),this.parentCtx=t||null,this.invokingState=e||-1}depth(){let t=0,e=this;for(;null!==e;)e=e.parentCtx,t+=1;return t}isEmpty(){return-1===this.invokingState}getSourceInterval(){return m.INVALID_INTERVAL}get ruleContext(){return this}getPayload(){return this}getText(){return 0===this.getChildCount()?\"\":this.children.map((function(t){return t.getText()})).join(\"\")}getAltNumber(){return 0}setAltNumber(t){}getChild(t){return null}getChildCount(){return 0}accept(t){return t.visitChildren(this)}toStringTree(t,e){return F.toStringTree(this,t,e)}toString(t,e){t=t||null,e=e||null;let n=this,s=\"[\";for(;null!==n&&n!==e;){if(null===t)n.isEmpty()||(s+=n.invokingState);else{const e=n.ruleIndex;s+=e>=0&&e<t.length?t[e]:\"\"+e}null===n.parentCtx||null===t&&n.parentCtx.isEmpty()||(s+=\" \"),n=n.parentCtx}return s+=\"]\",s}}class U{constructor(t){this.cachedHashCode=t}isEmpty(){return this===U.EMPTY}hasEmptyPath(){return this.getReturnState(this.length-1)===U.EMPTY_RETURN_STATE}hashCode(){return this.cachedHashCode}updateHashCode(t){t.update(this.cachedHashCode)}}U.EMPTY=null,U.EMPTY_RETURN_STATE=2147483647,U.globalNodeCount=1,U.id=U.globalNodeCount,U.trace_atn_sim=!1;class B extends U{constructor(t,e){const n=new o;return n.update(t,e),super(n.finish()),this.parents=t,this.returnStates=e,this}isEmpty(){return this.returnStates[0]===U.EMPTY_RETURN_STATE}getParent(t){return this.parents[t]}getReturnState(t){return this.returnStates[t]}equals(t){return this===t||t instanceof B&&this.hashCode()===t.hashCode()&&e(this.returnStates,t.returnStates)&&e(this.parents,t.parents)}toString(){if(this.isEmpty())return\"[]\";{let t=\"[\";for(let e=0;e<this.returnStates.length;e++)e>0&&(t+=\", \"),this.returnStates[e]!==U.EMPTY_RETURN_STATE?(t+=this.returnStates[e],null!==this.parents[e]?t=t+\" \"+this.parents[e]:t+=\"null\"):t+=\"$\";return t+\"]\"}}get length(){return this.returnStates.length}}class V extends U{constructor(t,e){let n=0;const s=new o;null!==t?s.update(t,e):s.update(1),n=s.finish(),super(n),this.parentCtx=t,this.returnState=e}getParent(t){return this.parentCtx}getReturnState(t){return this.returnState}equals(t){return this===t||t instanceof V&&this.hashCode()===t.hashCode()&&this.returnState===t.returnState&&(null==this.parentCtx?null==t.parentCtx:this.parentCtx.equals(t.parentCtx))}toString(){const t=null===this.parentCtx?\"\":this.parentCtx.toString();return 0===t.length?this.returnState===U.EMPTY_RETURN_STATE?\"$\":\"\"+this.returnState:this.returnState+\" \"+t}get length(){return 1}static create(t,e){return e===U.EMPTY_RETURN_STATE&&null===t?U.EMPTY:new V(t,e)}}class z extends V{constructor(){super(null,U.EMPTY_RETURN_STATE)}isEmpty(){return!0}getParent(t){return null}getReturnState(t){return this.returnState}equals(t){return this===t}toString(){return\"$\"}}U.EMPTY=new z;const q=\"h-\";class H{constructor(t,e){this.data={},this.hashFunction=t||a,this.equalsFunction=e||l}set(t,e){const n=q+this.hashFunction(t);if(n in this.data){const s=this.data[n];for(let n=0;n<s.length;n++){const i=s[n];if(this.equalsFunction(t,i.key)){const t=i.value;return i.value=e,t}}return s.push({key:t,value:e}),e}return this.data[n]=[{key:t,value:e}],e}containsKey(t){const e=q+this.hashFunction(t);if(e in this.data){const n=this.data[e];for(let e=0;e<n.length;e++){const s=n[e];if(this.equalsFunction(t,s.key))return!0}}return!1}get(t){const e=q+this.hashFunction(t);if(e in this.data){const n=this.data[e];for(let e=0;e<n.length;e++){const s=n[e];if(this.equalsFunction(t,s.key))return s.value}}return null}entries(){return Object.keys(this.data).filter((t=>t.startsWith(q))).flatMap((t=>this.data[t]),this)}getKeys(){return this.entries().map((t=>t.key))}getValues(){return this.entries().map((t=>t.value))}toString(){return\"[\"+this.entries().map((t=>\"{\"+t.key+\":\"+t.value+\"}\")).join(\", \")+\"]\"}get length(){return Object.keys(this.data).filter((t=>t.startsWith(q))).map((t=>this.data[t].length),this).reduce(((t,e)=>t+e),0)}}function K(t,e){if(null==e&&(e=M.EMPTY),null===e.parentCtx||e===M.EMPTY)return U.EMPTY;const n=K(t,e.parentCtx),s=t.states[e.invokingState].transitions[0];return V.create(n,s.followState.stateNumber)}function Y(t,e,n){if(t.isEmpty())return t;let s=n.get(t)||null;if(null!==s)return s;if(s=e.get(t),null!==s)return n.set(t,s),s;let i=!1,r=[];for(let s=0;s<r.length;s++){const o=Y(t.getParent(s),e,n);if(i||o!==t.getParent(s)){if(!i){r=[];for(let e=0;e<t.length;e++)r[e]=t.getParent(e);i=!0}r[s]=o}}if(!i)return e.add(t),n.set(t,t),t;let o=null;return o=0===r.length?U.EMPTY:1===r.length?V.create(r[0],t.getReturnState(0)):new B(r,t.returnStates),e.add(o),n.set(o,o),n.set(t,o),o}function G(t,e,n,s){if(t===e)return t;if(t instanceof V&&e instanceof V)return function(t,e,n,s){if(null!==s){let n=s.get(t,e);if(null!==n)return n;if(n=s.get(e,t),null!==n)return n}const i=function(t,e,n){if(n){if(t===U.EMPTY)return U.EMPTY;if(e===U.EMPTY)return U.EMPTY}else{if(t===U.EMPTY&&e===U.EMPTY)return U.EMPTY;if(t===U.EMPTY){const t=[e.returnState,U.EMPTY_RETURN_STATE],n=[e.parentCtx,null];return new B(n,t)}if(e===U.EMPTY){const e=[t.returnState,U.EMPTY_RETURN_STATE],n=[t.parentCtx,null];return new B(n,e)}}return null}(t,e,n);if(null!==i)return null!==s&&s.set(t,e,i),i;if(t.returnState===e.returnState){const i=G(t.parentCtx,e.parentCtx,n,s);if(i===t.parentCtx)return t;if(i===e.parentCtx)return e;const r=V.create(i,t.returnState);return null!==s&&s.set(t,e,r),r}{let n=null;if((t===e||null!==t.parentCtx&&t.parentCtx===e.parentCtx)&&(n=t.parentCtx),null!==n){const i=[t.returnState,e.returnState];t.returnState>e.returnState&&(i[0]=e.returnState,i[1]=t.returnState);const r=new B([n,n],i);return null!==s&&s.set(t,e,r),r}const i=[t.returnState,e.returnState];let r=[t.parentCtx,e.parentCtx];t.returnState>e.returnState&&(i[0]=e.returnState,i[1]=t.returnState,r=[e.parentCtx,t.parentCtx]);const o=new B(r,i);return null!==s&&s.set(t,e,o),o}}(t,e,n,s);if(n){if(t instanceof z)return t;if(e instanceof z)return e}return t instanceof V&&(t=new B([t.getParent()],[t.returnState])),e instanceof V&&(e=new B([e.getParent()],[e.returnState])),function(t,e,n,s){if(null!==s){let n=s.get(t,e);if(null!==n)return U.trace_atn_sim&&console.log(\"mergeArrays a=\"+t+\",b=\"+e+\" -> previous\"),n;if(n=s.get(e,t),null!==n)return U.trace_atn_sim&&console.log(\"mergeArrays a=\"+t+\",b=\"+e+\" -> previous\"),n}let i=0,r=0,o=0,a=new Array(t.returnStates.length+e.returnStates.length).fill(0),l=new Array(t.returnStates.length+e.returnStates.length).fill(null);for(;i<t.returnStates.length&&r<e.returnStates.length;){const h=t.parents[i],c=e.parents[r];if(t.returnStates[i]===e.returnStates[r]){const e=t.returnStates[i];e===U.EMPTY_RETURN_STATE&&null===h&&null===c||null!==h&&null!==c&&h===c?(l[o]=h,a[o]=e):(l[o]=G(h,c,n,s),a[o]=e),i+=1,r+=1}else t.returnStates[i]<e.returnStates[r]?(l[o]=h,a[o]=t.returnStates[i],i+=1):(l[o]=c,a[o]=e.returnStates[r],r+=1);o+=1}if(i<t.returnStates.length)for(let e=i;e<t.returnStates.length;e++)l[o]=t.parents[e],a[o]=t.returnStates[e],o+=1;else for(let t=r;t<e.returnStates.length;t++)l[o]=e.parents[t],a[o]=e.returnStates[t],o+=1;if(o<l.length){if(1===o){const n=V.create(l[0],a[0]);return null!==s&&s.set(t,e,n),n}l=l.slice(0,o),a=a.slice(0,o)}const h=new B(l,a);return h.equals(t)?(null!==s&&s.set(t,e,t),U.trace_atn_sim&&console.log(\"mergeArrays a=\"+t+\",b=\"+e+\" -> a\"),t):h.equals(e)?(null!==s&&s.set(t,e,e),U.trace_atn_sim&&console.log(\"mergeArrays a=\"+t+\",b=\"+e+\" -> b\"),e):(function(t){const e=new H;for(let n=0;n<t.length;n++){const s=t[n];e.containsKey(s)||e.set(s,s)}for(let n=0;n<t.length;n++)t[n]=e.get(t[n])}(l),null!==s&&s.set(t,e,h),U.trace_atn_sim&&console.log(\"mergeArrays a=\"+t+\",b=\"+e+\" -> \"+h),h)}(t,e,n,s)}class j{constructor(){this.data=[]}add(t){this.data[t]=!0}or(t){Object.keys(t.data).map((t=>this.add(t)),this)}remove(t){delete this.data[t]}has(t){return!0===this.data[t]}values(){return Object.keys(this.data)}minValue(){return Math.min.apply(null,this.values())}hashCode(){return o.hashStuff(this.values())}equals(t){return t instanceof j&&e(this.data,t.data)}toString(){return\"{\"+this.values().join(\", \")+\"}\"}get length(){return this.values().length}}class W{constructor(t){this.atn=t}getDecisionLookahead(t){if(null===t)return null;const e=t.transitions.length,n=[];for(let s=0;s<e;s++){n[s]=new E;const e=new d,i=!1;this._LOOK(t.transition(s).target,null,U.EMPTY,n[s],e,new j,i,!1),(0===n[s].length||n[s].contains(W.HIT_PRED))&&(n[s]=null)}return n}LOOK(t,e,n){const s=new E,i=null!==(n=n||null)?K(t.atn,n):null;return this._LOOK(t,e,i,s,new d,new j,!0,!0),s}_LOOK(e,n,s,i,r,o,a,l){const h=new S({state:e,alt:0,context:s},null);if(!r.has(h)){if(r.add(h),e===n){if(null===s)return void i.addOne(t.EPSILON);if(s.isEmpty()&&l)return void i.addOne(t.EOF)}if(e instanceof A){if(null===s)return void i.addOne(t.EPSILON);if(s.isEmpty()&&l)return void i.addOne(t.EOF);if(s!==U.EMPTY){const t=o.has(e.ruleIndex);try{o.remove(e.ruleIndex);for(let t=0;t<s.length;t++){const e=this.atn.states[s.getReturnState(t)];this._LOOK(e,n,s.getParent(t),i,r,o,a,l)}}finally{t&&o.add(e.ruleIndex)}return}}for(let h=0;h<e.transitions.length;h++){const c=e.transitions[h];if(c.constructor===N){if(o.has(c.target.ruleIndex))continue;const t=V.create(s,c.followState.stateNumber);try{o.add(c.target.ruleIndex),this._LOOK(c.target,n,t,i,r,o,a,l)}finally{o.remove(c.target.ruleIndex)}}else if(c instanceof L)a?this._LOOK(c.target,n,s,i,r,o,a,l):i.addOne(W.HIT_PRED);else if(c.isEpsilon)this._LOOK(c.target,n,s,i,r,o,a,l);else if(c.constructor===k)i.addRange(t.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType);else{let e=c.label;null!==e&&(c instanceof I&&(e=e.complement(t.MIN_USER_TOKEN_TYPE,this.atn.maxTokenType)),i.addSet(e))}}}}}W.HIT_PRED=t.INVALID_TYPE;class ${constructor(t,e){this.grammarType=t,this.maxTokenType=e,this.states=[],this.decisionToState=[],this.ruleToStartState=[],this.ruleToStopState=null,this.modeNameToStartState={},this.ruleToTokenType=null,this.lexerActions=null,this.modeToStartState=[]}nextTokensInContext(t,e){return new W(this).LOOK(t,null,e)}nextTokensNoContext(t){return null!==t.nextTokenWithinRule||(t.nextTokenWithinRule=this.nextTokensInContext(t,null),t.nextTokenWithinRule.readOnly=!0),t.nextTokenWithinRule}nextTokens(t,e){return void 0===e?this.nextTokensNoContext(t):this.nextTokensInContext(t,e)}addState(t){null!==t&&(t.atn=this,t.stateNumber=this.states.length),this.states.push(t)}removeState(t){this.states[t.stateNumber]=null}defineDecisionState(t){return this.decisionToState.push(t),t.decision=this.decisionToState.length-1,t.decision}getDecisionState(t){return 0===this.decisionToState.length?null:this.decisionToState[t]}getExpectedTokens(e,n){if(e<0||e>=this.states.length)throw\"Invalid state number.\";const s=this.states[e];let i=this.nextTokens(s);if(!i.contains(t.EPSILON))return i;const r=new E;for(r.addSet(i),r.removeOne(t.EPSILON);null!==n&&n.invokingState>=0&&i.contains(t.EPSILON);){const e=this.states[n.invokingState].transitions[0];i=this.nextTokens(e.followState),r.addSet(i),r.removeOne(t.EPSILON),n=n.parentCtx}return i.contains(t.EPSILON)&&r.addOne(t.EOF),r}}$.INVALID_ALT_NUMBER=0;class X extends _{constructor(){super(),this.stateType=_.BASIC}}class J extends _{constructor(){return super(),this.decision=-1,this.nonGreedy=!1,this}}class Z extends J{constructor(){return super(),this.endState=null,this}}class Q extends _{constructor(){return super(),this.stateType=_.BLOCK_END,this.startState=null,this}}class tt extends _{constructor(){return super(),this.stateType=_.LOOP_END,this.loopBackState=null,this}}class et extends _{constructor(){return super(),this.stateType=_.RULE_START,this.stopState=null,this.isPrecedenceRule=!1,this}}class nt extends J{constructor(){return super(),this.stateType=_.TOKEN_START,this}}class st extends J{constructor(){return super(),this.stateType=_.PLUS_LOOP_BACK,this}}class it extends _{constructor(){return super(),this.stateType=_.STAR_LOOP_BACK,this}}class rt extends J{constructor(){return super(),this.stateType=_.STAR_LOOP_ENTRY,this.loopBackState=null,this.isPrecedenceDecision=null,this}}class ot extends Z{constructor(){return super(),this.stateType=_.PLUS_BLOCK_START,this.loopBackState=null,this}}class at extends Z{constructor(){return super(),this.stateType=_.STAR_BLOCK_START,this}}class lt extends Z{constructor(){return super(),this.stateType=_.BLOCK_START,this}}class ht extends C{constructor(t,e){super(t),this.label_=e,this.label=this.makeLabel(),this.serializationType=C.ATOM}makeLabel(){const t=new E;return t.addOne(this.label_),t}matches(t,e,n){return this.label_===t}toString(){return this.label_}}class ct extends C{constructor(t,e,n){super(t),this.serializationType=C.RANGE,this.start=e,this.stop=n,this.label=this.makeLabel()}makeLabel(){const t=new E;return t.addRange(this.start,this.stop),t}matches(t,e,n){return t>=this.start&&t<=this.stop}toString(){return\"'\"+String.fromCharCode(this.start)+\"'..'\"+String.fromCharCode(this.stop)+\"'\"}}class ut extends C{constructor(t,e,n,s){super(t),this.serializationType=C.ACTION,this.ruleIndex=e,this.actionIndex=void 0===n?-1:n,this.isCtxDependent=void 0!==s&&s,this.isEpsilon=!0}matches(t,e,n){return!1}toString(){return\"action_\"+this.ruleIndex+\":\"+this.actionIndex}}class dt extends C{constructor(t,e){super(t),this.serializationType=C.EPSILON,this.isEpsilon=!0,this.outermostPrecedenceReturn=e}matches(t,e,n){return!1}toString(){return\"epsilon\"}}class pt extends p{constructor(t,e,n){super(),this.ruleIndex=void 0===t?-1:t,this.predIndex=void 0===e?-1:e,this.isCtxDependent=void 0!==n&&n}evaluate(t,e){const n=this.isCtxDependent?e:null;return t.sempred(n,this.ruleIndex,this.predIndex)}updateHashCode(t){t.update(this.ruleIndex,this.predIndex,this.isCtxDependent)}equals(t){return this===t||t instanceof pt&&this.ruleIndex===t.ruleIndex&&this.predIndex===t.predIndex&&this.isCtxDependent===t.isCtxDependent}toString(){return\"{\"+this.ruleIndex+\":\"+this.predIndex+\"}?\"}}p.NONE=new pt;class gt extends L{constructor(t,e,n,s){super(t),this.serializationType=C.PREDICATE,this.ruleIndex=e,this.predIndex=n,this.isCtxDependent=s,this.isEpsilon=!0}matches(t,e,n){return!1}getPredicate(){return new pt(this.ruleIndex,this.predIndex,this.isCtxDependent)}toString(){return\"pred_\"+this.ruleIndex+\":\"+this.predIndex}}class ft extends p{constructor(t){super(),this.precedence=void 0===t?0:t}evaluate(t,e){return t.precpred(e,this.precedence)}evalPrecedence(t,e){return t.precpred(e,this.precedence)?p.NONE:null}compareTo(t){return this.precedence-t.precedence}updateHashCode(t){t.update(this.precedence)}equals(t){return this===t||t instanceof ft&&this.precedence===t.precedence}toString(){return\"{\"+this.precedence+\">=prec}?\"}}p.PrecedencePredicate=ft;class xt extends L{constructor(t,e){super(t),this.serializationType=C.PRECEDENCE,this.precedence=e,this.isEpsilon=!0}matches(t,e,n){return!1}getPredicate(){return new ft(this.precedence)}toString(){return this.precedence+\" >= _p\"}}class Tt{constructor(t){void 0===t&&(t=null),this.readOnly=!1,this.verifyATN=null===t||t.verifyATN,this.generateRuleBypassTransitions=null!==t&&t.generateRuleBypassTransitions}}Tt.defaultOptions=new Tt,Tt.defaultOptions.readOnly=!0;class St{constructor(t){this.actionType=t,this.isPositionDependent=!1}hashCode(){const t=new o;return this.updateHashCode(t),t.finish()}updateHashCode(t){t.update(this.actionType)}equals(t){return this===t}}class mt extends St{constructor(){super(6)}execute(t){t.skip()}toString(){return\"skip\"}}mt.INSTANCE=new mt;class Et extends St{constructor(t){super(0),this.channel=t}execute(t){t._channel=this.channel}updateHashCode(t){t.update(this.actionType,this.channel)}equals(t){return this===t||t instanceof Et&&this.channel===t.channel}toString(){return\"channel(\"+this.channel+\")\"}}class _t extends St{constructor(t,e){super(1),this.ruleIndex=t,this.actionIndex=e,this.isPositionDependent=!0}execute(t){t.action(null,this.ruleIndex,this.actionIndex)}updateHashCode(t){t.update(this.actionType,this.ruleIndex,this.actionIndex)}equals(t){return this===t||t instanceof _t&&this.ruleIndex===t.ruleIndex&&this.actionIndex===t.actionIndex}}class At extends St{constructor(){super(3)}execute(t){t.more()}toString(){return\"more\"}}At.INSTANCE=new At;class Ct extends St{constructor(t){super(7),this.type=t}execute(t){t.type=this.type}updateHashCode(t){t.update(this.actionType,this.type)}equals(t){return this===t||t instanceof Ct&&this.type===t.type}toString(){return\"type(\"+this.type+\")\"}}class Nt extends St{constructor(t){super(5),this.mode=t}execute(t){t.pushMode(this.mode)}updateHashCode(t){t.update(this.actionType,this.mode)}equals(t){return this===t||t instanceof Nt&&this.mode===t.mode}toString(){return\"pushMode(\"+this.mode+\")\"}}class yt extends St{constructor(){super(4)}execute(t){t.popMode()}toString(){return\"popMode\"}}yt.INSTANCE=new yt;class It extends St{constructor(t){super(2),this.mode=t}execute(t){t.mode(this.mode)}updateHashCode(t){t.update(this.actionType,this.mode)}equals(t){return this===t||t instanceof It&&this.mode===t.mode}toString(){return\"mode(\"+this.mode+\")\"}}function kt(t,e){const n=[];return n[t-1]=e,n.map((function(t){return e}))}class Lt{constructor(t){null==t&&(t=Tt.defaultOptions),this.deserializationOptions=t,this.stateFactories=null,this.actionFactories=null}deserialize(t){const e=this.reset(t);this.checkVersion(e),e&&this.skipUUID();const n=this.readATN();this.readStates(n,e),this.readRules(n,e),this.readModes(n);const s=[];return this.readSets(n,s,this.readInt.bind(this)),e&&this.readSets(n,s,this.readInt32.bind(this)),this.readEdges(n,s),this.readDecisions(n),this.readLexerActions(n,e),this.markPrecedenceDecisions(n),this.verifyATN(n),this.deserializationOptions.generateRuleBypassTransitions&&1===n.grammarType&&(this.generateRuleBypassTransitions(n),this.verifyATN(n)),n}reset(t){if(3===(t.charCodeAt?t.charCodeAt(0):t[0])){const e=function(t){const e=t.charCodeAt(0);return e>1?e-2:e+65534},n=t.split(\"\").map(e);return n[0]=t.charCodeAt(0),this.data=n,this.pos=0,!0}return this.data=t,this.pos=0,!1}skipUUID(){let t=0;for(;t++<8;)this.readInt()}checkVersion(t){const e=this.readInt();if(!t&&4!==e)throw\"Could not deserialize ATN with version \"+e+\" (expected 4).\"}readATN(){const t=this.readInt(),e=this.readInt();return new $(t,e)}readStates(t,e){let n,s,i;const r=[],o=[],a=this.readInt();for(let n=0;n<a;n++){const n=this.readInt();if(n===_.INVALID_TYPE){t.addState(null);continue}let s=this.readInt();e&&65535===s&&(s=-1);const i=this.stateFactory(n,s);if(n===_.LOOP_END){const t=this.readInt();r.push([i,t])}else if(i instanceof Z){const t=this.readInt();o.push([i,t])}t.addState(i)}for(n=0;n<r.length;n++)s=r[n],s[0].loopBackState=t.states[s[1]];for(n=0;n<o.length;n++)s=o[n],s[0].endState=t.states[s[1]];let l=this.readInt();for(n=0;n<l;n++)i=this.readInt(),t.states[i].nonGreedy=!0;let h=this.readInt();for(n=0;n<h;n++)i=this.readInt(),t.states[i].isPrecedenceRule=!0}readRules(e,n){let s;const i=this.readInt();for(0===e.grammarType&&(e.ruleToTokenType=kt(i,0)),e.ruleToStartState=kt(i,0),s=0;s<i;s++){const i=this.readInt();if(e.ruleToStartState[s]=e.states[i],0===e.grammarType){let i=this.readInt();n&&65535===i&&(i=t.EOF),e.ruleToTokenType[s]=i}}for(e.ruleToStopState=kt(i,0),s=0;s<e.states.length;s++){const t=e.states[s];t instanceof A&&(e.ruleToStopState[t.ruleIndex]=t,e.ruleToStartState[t.ruleIndex].stopState=t)}}readModes(t){const e=this.readInt();for(let n=0;n<e;n++){let e=this.readInt();t.modeToStartState.push(t.states[e])}}readSets(t,e,n){const s=this.readInt();for(let t=0;t<s;t++){const t=new E;e.push(t);const s=this.readInt();0!==this.readInt()&&t.addOne(-1);for(let e=0;e<s;e++){const e=n(),s=n();t.addRange(e,s)}}}readEdges(t,e){let n,s,i,r,o;const a=this.readInt();for(n=0;n<a;n++){const n=this.readInt(),s=this.readInt(),i=this.readInt(),o=this.readInt(),a=this.readInt(),l=this.readInt();r=this.edgeFactory(t,i,n,s,o,a,l,e),t.states[n].addTransition(r)}for(n=0;n<t.states.length;n++)for(i=t.states[n],s=0;s<i.transitions.length;s++){const e=i.transitions[s];if(!(e instanceof N))continue;let n=-1;t.ruleToStartState[e.target.ruleIndex].isPrecedenceRule&&0===e.precedence&&(n=e.target.ruleIndex),r=new dt(e.followState,n),t.ruleToStopState[e.target.ruleIndex].addTransition(r)}for(n=0;n<t.states.length;n++){if(i=t.states[n],i instanceof Z){if(null===i.endState)throw\"IllegalState\";if(null!==i.endState.startState)throw\"IllegalState\";i.endState.startState=i}if(i instanceof st)for(s=0;s<i.transitions.length;s++)o=i.transitions[s].target,o instanceof ot&&(o.loopBackState=i);else if(i instanceof it)for(s=0;s<i.transitions.length;s++)o=i.transitions[s].target,o instanceof rt&&(o.loopBackState=i)}}readDecisions(t){const e=this.readInt();for(let n=0;n<e;n++){const e=this.readInt(),s=t.states[e];t.decisionToState.push(s),s.decision=n}}readLexerActions(t,e){if(0===t.grammarType){const n=this.readInt();t.lexerActions=kt(n,null);for(let s=0;s<n;s++){const n=this.readInt();let i=this.readInt();e&&65535===i&&(i=-1);let r=this.readInt();e&&65535===r&&(r=-1),t.lexerActions[s]=this.lexerActionFactory(n,i,r)}}}generateRuleBypassTransitions(t){let e;const n=t.ruleToStartState.length;for(e=0;e<n;e++)t.ruleToTokenType[e]=t.maxTokenType+e+1;for(e=0;e<n;e++)this.generateRuleBypassTransition(t,e)}generateRuleBypassTransition(t,e){let n,s;const i=new lt;i.ruleIndex=e,t.addState(i);const r=new Q;r.ruleIndex=e,t.addState(r),i.endState=r,t.defineDecisionState(i),r.startState=i;let o=null,a=null;if(t.ruleToStartState[e].isPrecedenceRule){for(a=null,n=0;n<t.states.length;n++)if(s=t.states[n],this.stateIsEndStateFor(s,e)){a=s,o=s.loopBackState.transitions[0];break}if(null===o)throw\"Couldn't identify final state of the precedence rule prefix section.\"}else a=t.ruleToStopState[e];for(n=0;n<t.states.length;n++){s=t.states[n];for(let t=0;t<s.transitions.length;t++){const e=s.transitions[t];e!==o&&e.target===a&&(e.target=r)}}const l=t.ruleToStartState[e],h=l.transitions.length;for(;h>0;)i.addTransition(l.transitions[h-1]),l.transitions=l.transitions.slice(-1);t.ruleToStartState[e].addTransition(new dt(i)),r.addTransition(new dt(a));const c=new X;t.addState(c),c.addTransition(new ht(r,t.ruleToTokenType[e])),i.addTransition(new dt(c))}stateIsEndStateFor(t,e){if(t.ruleIndex!==e)return null;if(!(t instanceof rt))return null;const n=t.transitions[t.transitions.length-1].target;return n instanceof tt&&n.epsilonOnlyTransitions&&n.transitions[0].target instanceof A?t:null}markPrecedenceDecisions(t){for(let e=0;e<t.states.length;e++){const n=t.states[e];if(n instanceof rt&&t.ruleToStartState[n.ruleIndex].isPrecedenceRule){const t=n.transitions[n.transitions.length-1].target;t instanceof tt&&t.epsilonOnlyTransitions&&t.transitions[0].target instanceof A&&(n.isPrecedenceDecision=!0)}}}verifyATN(t){if(this.deserializationOptions.verifyATN)for(let e=0;e<t.states.length;e++){const n=t.states[e];if(null!==n)if(this.checkCondition(n.epsilonOnlyTransitions||n.transitions.length<=1),n instanceof ot)this.checkCondition(null!==n.loopBackState);else if(n instanceof rt)if(this.checkCondition(null!==n.loopBackState),this.checkCondition(2===n.transitions.length),n.transitions[0].target instanceof at)this.checkCondition(n.transitions[1].target instanceof tt),this.checkCondition(!n.nonGreedy);else{if(!(n.transitions[0].target instanceof tt))throw\"IllegalState\";this.checkCondition(n.transitions[1].target instanceof at),this.checkCondition(n.nonGreedy)}else n instanceof it?(this.checkCondition(1===n.transitions.length),this.checkCondition(n.transitions[0].target instanceof rt)):n instanceof tt?this.checkCondition(null!==n.loopBackState):n instanceof et?this.checkCondition(null!==n.stopState):n instanceof Z?this.checkCondition(null!==n.endState):n instanceof Q?this.checkCondition(null!==n.startState):n instanceof J?this.checkCondition(n.transitions.length<=1||n.decision>=0):this.checkCondition(n.transitions.length<=1||n instanceof A)}}checkCondition(t,e){if(!t)throw null==e&&(e=\"IllegalState\"),e}readInt(){return this.data[this.pos++]}readInt32(){return this.readInt()|this.readInt()<<16}edgeFactory(e,n,s,i,r,o,a,l){const h=e.states[i];switch(n){case C.EPSILON:return new dt(h);case C.RANGE:return new ct(h,0!==a?t.EOF:r,o);case C.RULE:return new N(e.states[r],o,a,h);case C.PREDICATE:return new gt(h,r,o,0!==a);case C.PRECEDENCE:return new xt(h,r);case C.ATOM:return new ht(h,0!==a?t.EOF:r);case C.ACTION:return new ut(h,r,o,0!==a);case C.SET:return new y(h,l[r]);case C.NOT_SET:return new I(h,l[r]);case C.WILDCARD:return new k(h);default:throw\"The specified transition type: \"+n+\" is not valid.\"}}stateFactory(t,e){if(null===this.stateFactories){const t=[];t[_.INVALID_TYPE]=null,t[_.BASIC]=()=>new X,t[_.RULE_START]=()=>new et,t[_.BLOCK_START]=()=>new lt,t[_.PLUS_BLOCK_START]=()=>new ot,t[_.STAR_BLOCK_START]=()=>new at,t[_.TOKEN_START]=()=>new nt,t[_.RULE_STOP]=()=>new A,t[_.BLOCK_END]=()=>new Q,t[_.STAR_LOOP_BACK]=()=>new it,t[_.STAR_LOOP_ENTRY]=()=>new rt,t[_.PLUS_LOOP_BACK]=()=>new st,t[_.LOOP_END]=()=>new tt,this.stateFactories=t}if(t>this.stateFactories.length||null===this.stateFactories[t])throw\"The specified state type \"+t+\" is not valid.\";{const n=this.stateFactories[t]();if(null!==n)return n.ruleIndex=e,n}}lexerActionFactory(t,e,n){if(null===this.actionFactories){const t=[];t[0]=(t,e)=>new Et(t),t[1]=(t,e)=>new _t(t,e),t[2]=(t,e)=>new It(t),t[3]=(t,e)=>At.INSTANCE,t[4]=(t,e)=>yt.INSTANCE,t[5]=(t,e)=>new Nt(t),t[6]=(t,e)=>mt.INSTANCE,t[7]=(t,e)=>new Ct(t),this.actionFactories=t}if(t>this.actionFactories.length||null===this.actionFactories[t])throw\"The specified lexer action type \"+t+\" is not valid.\";return this.actionFactories[t](e,n)}}class Ot{syntaxError(t,e,n,s,i,r){}reportAmbiguity(t,e,n,s,i,r,o){}reportAttemptingFullContext(t,e,n,s,i,r){}reportContextSensitivity(t,e,n,s,i,r){}}class vt extends Ot{constructor(){super()}syntaxError(t,e,n,s,i,r){console.error(\"line \"+n+\":\"+s+\" \"+i)}}vt.INSTANCE=new vt;class Rt extends Ot{constructor(t){if(super(),null===t)throw\"delegates\";return this.delegates=t,this}syntaxError(t,e,n,s,i,r){this.delegates.map((o=>o.syntaxError(t,e,n,s,i,r)))}reportAmbiguity(t,e,n,s,i,r,o){this.delegates.map((a=>a.reportAmbiguity(t,e,n,s,i,r,o)))}reportAttemptingFullContext(t,e,n,s,i,r){this.delegates.map((o=>o.reportAttemptingFullContext(t,e,n,s,i,r)))}reportContextSensitivity(t,e,n,s,i,r){this.delegates.map((o=>o.reportContextSensitivity(t,e,n,s,i,r)))}}class wt{constructor(){this._listeners=[vt.INSTANCE],this._interp=null,this._stateNumber=-1}checkVersion(t){const e=\"4.13.1\";e!==t&&console.log(\"ANTLR runtime and generated code versions disagree: \"+e+\"!=\"+t)}addErrorListener(t){this._listeners.push(t)}removeErrorListeners(){this._listeners=[]}getLiteralNames(){return Object.getPrototypeOf(this).constructor.literalNames||[]}getSymbolicNames(){return Object.getPrototypeOf(this).constructor.symbolicNames||[]}getTokenNames(){if(!this.tokenNames){const t=this.getLiteralNames(),e=this.getSymbolicNames(),n=t.length>e.length?t.length:e.length;this.tokenNames=[];for(let s=0;s<n;s++)this.tokenNames[s]=t[s]||e[s]||\"<INVALID\"}return this.tokenNames}getTokenTypeMap(){const e=this.getTokenNames();if(null===e)throw\"The current recognizer does not provide a list of token names.\";let n=this.tokenTypeMapCache[e];return void 0===n&&(n=e.reduce((function(t,e,n){t[e]=n})),n.EOF=t.EOF,this.tokenTypeMapCache[e]=n),n}getRuleIndexMap(){const t=this.ruleNames;if(null===t)throw\"The current recognizer does not provide a list of rule names.\";let e=this.ruleIndexMapCache[t];return void 0===e&&(e=t.reduce((function(t,e,n){t[e]=n})),this.ruleIndexMapCache[t]=e),e}getTokenType(e){const n=this.getTokenTypeMap()[e];return void 0!==n?n:t.INVALID_TYPE}getErrorHeader(t){return\"line \"+t.getOffendingToken().line+\":\"+t.getOffendingToken().column}getTokenErrorDisplay(e){if(null===e)return\"<no token>\";let n=e.text;return null===n&&(n=e.type===t.EOF?\"<EOF>\":\"<\"+e.type+\">\"),n=n.replace(\"\\n\",\"\\\\n\").replace(\"\\r\",\"\\\\r\").replace(\"\\t\",\"\\\\t\"),\"'\"+n+\"'\"}getErrorListenerDispatch(){return new Rt(this._listeners)}sempred(t,e,n){return!0}precpred(t,e){return!0}get atn(){return this._interp.atn}get state(){return this._stateNumber}set state(t){this._stateNumber=t}}wt.tokenTypeMapCache={},wt.ruleIndexMapCache={};class Pt extends t{constructor(e,n,s,i,r){super(),this.source=void 0!==e?e:Pt.EMPTY_SOURCE,this.type=void 0!==n?n:null,this.channel=void 0!==s?s:t.DEFAULT_CHANNEL,this.start=void 0!==i?i:-1,this.stop=void 0!==r?r:-1,this.tokenIndex=-1,null!==this.source[0]?(this.line=e[0].line,this.column=e[0].column):this.column=-1}clone(){const t=new Pt(this.source,this.type,this.channel,this.start,this.stop);return t.tokenIndex=this.tokenIndex,t.line=this.line,t.column=this.column,t.text=this.text,t}cloneWithType(e){const n=new Pt(this.source,e,this.channel,this.start,this.stop);return n.tokenIndex=this.tokenIndex,n.line=this.line,n.column=this.column,e===t.EOF&&(n.text=\"\"),n}toString(){let t=this.text;return t=null!==t?t.replace(/\\n/g,\"\\\\n\").replace(/\\r/g,\"\\\\r\").replace(/\\t/g,\"\\\\t\"):\"<no text>\",\"[@\"+this.tokenIndex+\",\"+this.start+\":\"+this.stop+\"='\"+t+\"',<\"+this.type+\">\"+(this.channel>0?\",channel=\"+this.channel:\"\")+\",\"+this.line+\":\"+this.column+\"]\"}get text(){if(null!==this._text)return this._text;const t=this.getInputStream();if(null===t)return null;const e=t.size;return this.start<e&&this.stop<e?t.getText(this.start,this.stop):\"<EOF>\"}set text(t){this._text=t}}Pt.EMPTY_SOURCE=[null,null];class bt{}class Dt extends bt{constructor(t){super(),this.copyText=void 0!==t&&t}create(t,e,n,s,i,r,o,a){const l=new Pt(t,e,s,i,r);return l.line=o,l.column=a,null!==n?l.text=n:this.copyText&&null!==t[1]&&(l.text=t[1].getText(i,r)),l}createThin(t,e){const n=new Pt(null,t);return n.text=e,n}}Dt.DEFAULT=new Dt;class Ft extends Error{constructor(t){super(t.message),Error.captureStackTrace&&Error.captureStackTrace(this,Ft),this.message=t.message,this.recognizer=t.recognizer,this.input=t.input,this.ctx=t.ctx,this.offendingToken=null,this.offendingState=-1,null!==this.recognizer&&(this.offendingState=this.recognizer.state)}getExpectedTokens(){return null!==this.recognizer?this.recognizer.atn.getExpectedTokens(this.offendingState,this.ctx):null}toString(){return this.message}}class Mt extends Ft{constructor(t,e,n,s){super({message:\"\",recognizer:t,input:e,ctx:null}),this.startIndex=n,this.deadEndConfigs=s}toString(){let t=\"\";return this.startIndex>=0&&this.startIndex<this.input.size&&(t=this.input.getText(new m(this.startIndex,this.startIndex))),\"LexerNoViableAltException\"+t}}class Ut extends wt{constructor(e){super(),this._input=e,this._factory=Dt.DEFAULT,this._tokenFactorySourcePair=[this,e],this._interp=null,this._token=null,this._tokenStartCharIndex=-1,this._tokenStartLine=-1,this._tokenStartColumn=-1,this._hitEOF=!1,this._channel=t.DEFAULT_CHANNEL,this._type=t.INVALID_TYPE,this._modeStack=[],this._mode=Ut.DEFAULT_MODE,this._text=null}reset(){null!==this._input&&this._input.seek(0),this._token=null,this._type=t.INVALID_TYPE,this._channel=t.DEFAULT_CHANNEL,this._tokenStartCharIndex=-1,this._tokenStartColumn=-1,this._tokenStartLine=-1,this._text=null,this._hitEOF=!1,this._mode=Ut.DEFAULT_MODE,this._modeStack=[],this._interp.reset()}nextToken(){if(null===this._input)throw\"nextToken requires a non-null input stream.\";const e=this._input.mark();try{for(;;){if(this._hitEOF)return this.emitEOF(),this._token;this._token=null,this._channel=t.DEFAULT_CHANNEL,this._tokenStartCharIndex=this._input.index,this._tokenStartColumn=this._interp.column,this._tokenStartLine=this._interp.line,this._text=null;let e=!1;for(;;){this._type=t.INVALID_TYPE;let n=Ut.SKIP;try{n=this._interp.match(this._input,this._mode)}catch(t){if(!(t instanceof Ft))throw console.log(t.stack),t;this.notifyListeners(t),this.recover(t)}if(this._input.LA(1)===t.EOF&&(this._hitEOF=!0),this._type===t.INVALID_TYPE&&(this._type=n),this._type===Ut.SKIP){e=!0;break}if(this._type!==Ut.MORE)break}if(!e)return null===this._token&&this.emit(),this._token}}finally{this._input.release(e)}}skip(){this._type=Ut.SKIP}more(){this._type=Ut.MORE}mode(t){this._mode=t}pushMode(t){this._interp.debug&&console.log(\"pushMode \"+t),this._modeStack.push(this._mode),this.mode(t)}popMode(){if(0===this._modeStack.length)throw\"Empty Stack\";return this._interp.debug&&console.log(\"popMode back to \"+this._modeStack.slice(0,-1)),this.mode(this._modeStack.pop()),this._mode}emitToken(t){this._token=t}emit(){const t=this._factory.create(this._tokenFactorySourcePair,this._type,this._text,this._channel,this._tokenStartCharIndex,this.getCharIndex()-1,this._tokenStartLine,this._tokenStartColumn);return this.emitToken(t),t}emitEOF(){const e=this.column,n=this.line,s=this._factory.create(this._tokenFactorySourcePair,t.EOF,null,t.DEFAULT_CHANNEL,this._input.index,this._input.index-1,n,e);return this.emitToken(s),s}getCharIndex(){return this._input.index}getAllTokens(){const e=[];let n=this.nextToken();for(;n.type!==t.EOF;)e.push(n),n=this.nextToken();return e}notifyListeners(t){const e=this._tokenStartCharIndex,n=this._input.index,s=this._input.getText(e,n),i=\"token recognition error at: '\"+this.getErrorDisplay(s)+\"'\";this.getErrorListenerDispatch().syntaxError(this,null,this._tokenStartLine,this._tokenStartColumn,i,t)}getErrorDisplay(t){const e=[];for(let n=0;n<t.length;n++)e.push(t[n]);return e.join(\"\")}getErrorDisplayForChar(e){return e.charCodeAt(0)===t.EOF?\"<EOF>\":\"\\n\"===e?\"\\\\n\":\"\\t\"===e?\"\\\\t\":\"\\r\"===e?\"\\\\r\":e}getCharErrorDisplay(t){return\"'\"+this.getErrorDisplayForChar(t)+\"'\"}recover(e){this._input.LA(1)!==t.EOF&&(e instanceof Mt?this._interp.consume(this._input):this._input.consume())}get inputStream(){return this._input}set inputStream(t){this._input=null,this._tokenFactorySourcePair=[this,this._input],this.reset(),this._input=t,this._tokenFactorySourcePair=[this,this._input]}get sourceName(){return this._input.sourceName}get type(){return this._type}set type(t){this._type=t}get line(){return this._interp.line}set line(t){this._interp.line=t}get column(){return this._interp.column}set column(t){this._interp.column=t}get text(){return null!==this._text?this._text:this._interp.getText(this._input)}set text(t){this._text=t}}function Bt(t){return t.hashCodeForConfigSet()}function Vt(t,e){return t===e||null!==t&&null!==e&&t.equalsForConfigSet(e)}Ut.DEFAULT_MODE=0,Ut.MORE=-2,Ut.SKIP=-3,Ut.DEFAULT_TOKEN_CHANNEL=t.DEFAULT_CHANNEL,Ut.HIDDEN=t.HIDDEN_CHANNEL,Ut.MIN_CHAR_VALUE=0,Ut.MAX_CHAR_VALUE=1114111;class zt{constructor(t){this.configLookup=new d(Bt,Vt),this.fullCtx=void 0===t||t,this.readOnly=!1,this.configs=[],this.uniqueAlt=0,this.conflictingAlts=null,this.hasSemanticContext=!1,this.dipsIntoOuterContext=!1,this.cachedHashCode=-1}add(t,e){if(void 0===e&&(e=null),this.readOnly)throw\"This set is readonly\";t.semanticContext!==p.NONE&&(this.hasSemanticContext=!0),t.reachesIntoOuterContext>0&&(this.dipsIntoOuterContext=!0);const n=this.configLookup.add(t);if(n===t)return this.cachedHashCode=-1,this.configs.push(t),!0;const s=!this.fullCtx,i=G(n.context,t.context,s,e);return n.reachesIntoOuterContext=Math.max(n.reachesIntoOuterContext,t.reachesIntoOuterContext),t.precedenceFilterSuppressed&&(n.precedenceFilterSuppressed=!0),n.context=i,!0}getStates(){const t=new d;for(let e=0;e<this.configs.length;e++)t.add(this.configs[e].state);return t}getPredicates(){const t=[];for(let e=0;e<this.configs.length;e++){const n=this.configs[e].semanticContext;n!==p.NONE&&t.push(n.semanticContext)}return t}optimizeConfigs(t){if(this.readOnly)throw\"This set is readonly\";if(0!==this.configLookup.length)for(let e=0;e<this.configs.length;e++){const n=this.configs[e];n.context=t.getCachedContext(n.context)}}addAll(t){for(let e=0;e<t.length;e++)this.add(t[e]);return!1}equals(t){return this===t||t instanceof zt&&e(this.configs,t.configs)&&this.fullCtx===t.fullCtx&&this.uniqueAlt===t.uniqueAlt&&this.conflictingAlts===t.conflictingAlts&&this.hasSemanticContext===t.hasSemanticContext&&this.dipsIntoOuterContext===t.dipsIntoOuterContext}hashCode(){const t=new o;return t.update(this.configs),t.finish()}updateHashCode(t){this.readOnly?(-1===this.cachedHashCode&&(this.cachedHashCode=this.hashCode()),t.update(this.cachedHashCode)):t.update(this.hashCode())}isEmpty(){return 0===this.configs.length}contains(t){if(null===this.configLookup)throw\"This method is not implemented for readonly sets.\";return this.configLookup.contains(t)}containsFast(t){if(null===this.configLookup)throw\"This method is not implemented for readonly sets.\";return this.configLookup.containsFast(t)}clear(){if(this.readOnly)throw\"This set is readonly\";this.configs=[],this.cachedHashCode=-1,this.configLookup=new d}setReadonly(t){this.readOnly=t,t&&(this.configLookup=null)}toString(){return c(this.configs)+(this.hasSemanticContext?\",hasSemanticContext=\"+this.hasSemanticContext:\"\")+(this.uniqueAlt!==$.INVALID_ALT_NUMBER?\",uniqueAlt=\"+this.uniqueAlt:\"\")+(null!==this.conflictingAlts?\",conflictingAlts=\"+this.conflictingAlts:\"\")+(this.dipsIntoOuterContext?\",dipsIntoOuterContext\":\"\")}get items(){return this.configs}get length(){return this.configs.length}}class qt{constructor(t,e){return null===t&&(t=-1),null===e&&(e=new zt),this.stateNumber=t,this.configs=e,this.edges=null,this.isAcceptState=!1,this.prediction=0,this.lexerActionExecutor=null,this.requiresFullContext=!1,this.predicates=null,this}getAltSet(){const t=new d;if(null!==this.configs)for(let e=0;e<this.configs.length;e++){const n=this.configs[e];t.add(n.alt)}return 0===t.length?null:t}equals(t){return this===t||t instanceof qt&&this.configs.equals(t.configs)}toString(){let t=this.stateNumber+\":\"+this.configs;return this.isAcceptState&&(t+=\"=>\",null!==this.predicates?t+=this.predicates:t+=this.prediction),t}hashCode(){const t=new o;return t.update(this.configs),t.finish()}}class Ht{constructor(t,e){return this.atn=t,this.sharedContextCache=e,this}getCachedContext(t){if(null===this.sharedContextCache)return t;const e=new H;return Y(t,this.sharedContextCache,e)}}Ht.ERROR=new qt(2147483647,new zt);class Kt extends zt{constructor(){super(),this.configLookup=new d}}class Yt extends S{constructor(t,e){super(t,e);const n=t.lexerActionExecutor||null;return this.lexerActionExecutor=n||(null!==e?e.lexerActionExecutor:null),this.passedThroughNonGreedyDecision=null!==e&&this.checkNonGreedyDecision(e,this.state),this.hashCodeForConfigSet=Yt.prototype.hashCode,this.equalsForConfigSet=Yt.prototype.equals,this}updateHashCode(t){t.update(this.state.stateNumber,this.alt,this.context,this.semanticContext,this.passedThroughNonGreedyDecision,this.lexerActionExecutor)}equals(t){return this===t||t instanceof Yt&&this.passedThroughNonGreedyDecision===t.passedThroughNonGreedyDecision&&(this.lexerActionExecutor?this.lexerActionExecutor.equals(t.lexerActionExecutor):!t.lexerActionExecutor)&&super.equals(t)}checkNonGreedyDecision(t,e){return t.passedThroughNonGreedyDecision||e instanceof J&&e.nonGreedy}}class Gt extends St{constructor(t,e){super(e.actionType),this.offset=t,this.action=e,this.isPositionDependent=!0}execute(t){this.action.execute(t)}updateHashCode(t){t.update(this.actionType,this.offset,this.action)}equals(t){return this===t||t instanceof Gt&&this.offset===t.offset&&this.action===t.action}}class jt{constructor(t){return this.lexerActions=null===t?[]:t,this.cachedHashCode=o.hashStuff(t),this}fixOffsetBeforeMatch(t){let e=null;for(let n=0;n<this.lexerActions.length;n++)!this.lexerActions[n].isPositionDependent||this.lexerActions[n]instanceof Gt||(null===e&&(e=this.lexerActions.concat([])),e[n]=new Gt(t,this.lexerActions[n]));return null===e?this:new jt(e)}execute(t,e,n){let s=!1;const i=e.index;try{for(let r=0;r<this.lexerActions.length;r++){let o=this.lexerActions[r];if(o instanceof Gt){const t=o.offset;e.seek(n+t),o=o.action,s=n+t!==i}else o.isPositionDependent&&(e.seek(i),s=!1);o.execute(t)}}finally{s&&e.seek(i)}}hashCode(){return this.cachedHashCode}updateHashCode(t){t.update(this.cachedHashCode)}equals(t){if(this===t)return!0;if(t instanceof jt){if(this.cachedHashCode!=t.cachedHashCode)return!1;if(this.lexerActions.length!=t.lexerActions.length)return!1;{const e=this.lexerActions.length;for(let n=0;n<e;++n)if(!this.lexerActions[n].equals(t.lexerActions[n]))return!1;return!0}}return!1}static append(t,e){if(null===t)return new jt([e]);const n=t.lexerActions.concat([e]);return new jt(n)}}function Wt(t){t.index=-1,t.line=0,t.column=-1,t.dfaState=null}class $t{constructor(){Wt(this)}reset(){Wt(this)}}class Xt extends Ht{constructor(t,e,n,s){super(e,s),this.decisionToDFA=n,this.recog=t,this.startIndex=-1,this.line=1,this.column=0,this.mode=Ut.DEFAULT_MODE,this.prevAccept=new $t}copyState(t){this.column=t.column,this.line=t.line,this.mode=t.mode,this.startIndex=t.startIndex}match(t,e){this.mode=e;const n=t.mark();try{this.startIndex=t.index,this.prevAccept.reset();const n=this.decisionToDFA[e];return null===n.s0?this.matchATN(t):this.execATN(t,n.s0)}finally{t.release(n)}}reset(){this.prevAccept.reset(),this.startIndex=-1,this.line=1,this.column=0,this.mode=Ut.DEFAULT_MODE}matchATN(t){const e=this.atn.modeToStartState[this.mode];Xt.debug&&console.log(\"matchATN mode \"+this.mode+\" start: \"+e);const n=this.mode,s=this.computeStartState(t,e),i=s.hasSemanticContext;s.hasSemanticContext=!1;const r=this.addDFAState(s);i||(this.decisionToDFA[this.mode].s0=r);const o=this.execATN(t,r);return Xt.debug&&console.log(\"DFA after matchATN: \"+this.decisionToDFA[n].toLexerString()),o}execATN(e,n){Xt.debug&&console.log(\"start state closure=\"+n.configs),n.isAcceptState&&this.captureSimState(this.prevAccept,e,n);let s=e.LA(1),i=n;for(;;){Xt.debug&&console.log(\"execATN loop starting closure: \"+i.configs);let n=this.getExistingTargetState(i,s);if(null===n&&(n=this.computeTargetState(e,i,s)),n===Ht.ERROR)break;if(s!==t.EOF&&this.consume(e),n.isAcceptState&&(this.captureSimState(this.prevAccept,e,n),s===t.EOF))break;s=e.LA(1),i=n}return this.failOrAccept(this.prevAccept,e,i.configs,s)}getExistingTargetState(t,e){if(null===t.edges||e<Xt.MIN_DFA_EDGE||e>Xt.MAX_DFA_EDGE)return null;let n=t.edges[e-Xt.MIN_DFA_EDGE];return void 0===n&&(n=null),Xt.debug&&null!==n&&console.log(\"reuse state \"+t.stateNumber+\" edge to \"+n.stateNumber),n}computeTargetState(t,e,n){const s=new Kt;return this.getReachableConfigSet(t,e.configs,s,n),0===s.items.length?(s.hasSemanticContext||this.addDFAEdge(e,n,Ht.ERROR),Ht.ERROR):this.addDFAEdge(e,n,null,s)}failOrAccept(e,n,s,i){if(null!==this.prevAccept.dfaState){const t=e.dfaState.lexerActionExecutor;return this.accept(n,t,this.startIndex,e.index,e.line,e.column),e.dfaState.prediction}if(i===t.EOF&&n.index===this.startIndex)return t.EOF;throw new Mt(this.recog,n,this.startIndex,s)}getReachableConfigSet(e,n,s,i){let r=$.INVALID_ALT_NUMBER;for(let o=0;o<n.items.length;o++){const a=n.items[o],l=a.alt===r;if(!l||!a.passedThroughNonGreedyDecision){Xt.debug&&console.log(\"testing %s at %s\\n\",this.getTokenName(i),a.toString(this.recog,!0));for(let n=0;n<a.state.transitions.length;n++){const o=a.state.transitions[n],h=this.getReachableTarget(o,i);if(null!==h){let n=a.lexerActionExecutor;null!==n&&(n=n.fixOffsetBeforeMatch(e.index-this.startIndex));const o=i===t.EOF,c=new Yt({state:h,lexerActionExecutor:n},a);this.closure(e,c,s,l,!0,o)&&(r=a.alt)}}}}}accept(t,e,n,s,i,r){Xt.debug&&console.log(\"ACTION %s\\n\",e),t.seek(s),this.line=i,this.column=r,null!==e&&null!==this.recog&&e.execute(this.recog,t,n)}getReachableTarget(t,e){return t.matches(e,0,Ut.MAX_CHAR_VALUE)?t.target:null}computeStartState(t,e){const n=U.EMPTY,s=new Kt;for(let i=0;i<e.transitions.length;i++){const r=e.transitions[i].target,o=new Yt({state:r,alt:i+1,context:n},null);this.closure(t,o,s,!1,!1,!1)}return s}closure(t,e,n,s,i,r){let o=null;if(Xt.debug&&console.log(\"closure(\"+e.toString(this.recog,!0)+\")\"),e.state instanceof A){if(Xt.debug&&(null!==this.recog?console.log(\"closure at %s rule stop %s\\n\",this.recog.ruleNames[e.state.ruleIndex],e):console.log(\"closure at rule stop %s\\n\",e)),null===e.context||e.context.hasEmptyPath()){if(null===e.context||e.context.isEmpty())return n.add(e),!0;n.add(new Yt({state:e.state,context:U.EMPTY},e)),s=!0}if(null!==e.context&&!e.context.isEmpty())for(let a=0;a<e.context.length;a++)if(e.context.getReturnState(a)!==U.EMPTY_RETURN_STATE){const l=e.context.getParent(a),h=this.atn.states[e.context.getReturnState(a)];o=new Yt({state:h,context:l},e),s=this.closure(t,o,n,s,i,r)}return s}e.state.epsilonOnlyTransitions||s&&e.passedThroughNonGreedyDecision||n.add(e);for(let a=0;a<e.state.transitions.length;a++){const l=e.state.transitions[a];o=this.getEpsilonTarget(t,e,l,n,i,r),null!==o&&(s=this.closure(t,o,n,s,i,r))}return s}getEpsilonTarget(e,n,s,i,r,o){let a=null;if(s.serializationType===C.RULE){const t=V.create(n.context,s.followState.stateNumber);a=new Yt({state:s.target,context:t},n)}else{if(s.serializationType===C.PRECEDENCE)throw\"Precedence predicates are not supported in lexers.\";if(s.serializationType===C.PREDICATE)Xt.debug&&console.log(\"EVAL rule \"+s.ruleIndex+\":\"+s.predIndex),i.hasSemanticContext=!0,this.evaluatePredicate(e,s.ruleIndex,s.predIndex,r)&&(a=new Yt({state:s.target},n));else if(s.serializationType===C.ACTION)if(null===n.context||n.context.hasEmptyPath()){const t=jt.append(n.lexerActionExecutor,this.atn.lexerActions[s.actionIndex]);a=new Yt({state:s.target,lexerActionExecutor:t},n)}else a=new Yt({state:s.target},n);else s.serializationType===C.EPSILON?a=new Yt({state:s.target},n):s.serializationType!==C.ATOM&&s.serializationType!==C.RANGE&&s.serializationType!==C.SET||o&&s.matches(t.EOF,0,Ut.MAX_CHAR_VALUE)&&(a=new Yt({state:s.target},n))}return a}evaluatePredicate(t,e,n,s){if(null===this.recog)return!0;if(!s)return this.recog.sempred(null,e,n);const i=this.column,r=this.line,o=t.index,a=t.mark();try{return this.consume(t),this.recog.sempred(null,e,n)}finally{this.column=i,this.line=r,t.seek(o),t.release(a)}}captureSimState(t,e,n){t.index=e.index,t.line=this.line,t.column=this.column,t.dfaState=n}addDFAEdge(t,e,n,s){if(void 0===n&&(n=null),void 0===s&&(s=null),null===n&&null!==s){const t=s.hasSemanticContext;if(s.hasSemanticContext=!1,n=this.addDFAState(s),t)return n}return e<Xt.MIN_DFA_EDGE||e>Xt.MAX_DFA_EDGE||(Xt.debug&&console.log(\"EDGE \"+t+\" -> \"+n+\" upon \"+e),null===t.edges&&(t.edges=[]),t.edges[e-Xt.MIN_DFA_EDGE]=n),n}addDFAState(t){const e=new qt(null,t);let n=null;for(let e=0;e<t.items.length;e++){const s=t.items[e];if(s.state instanceof A){n=s;break}}null!==n&&(e.isAcceptState=!0,e.lexerActionExecutor=n.lexerActionExecutor,e.prediction=this.atn.ruleToTokenType[n.state.ruleIndex]);const s=this.decisionToDFA[this.mode],i=s.states.get(e);if(null!==i)return i;const r=e;return r.stateNumber=s.states.length,t.setReadonly(!0),r.configs=t,s.states.add(r),r}getDFA(t){return this.decisionToDFA[t]}getText(t){return t.getText(this.startIndex,t.index-1)}consume(t){t.LA(1)===\"\\n\".charCodeAt(0)?(this.line+=1,this.column=0):this.column+=1,t.consume()}getTokenName(t){return-1===t?\"EOF\":\"'\"+String.fromCharCode(t)+\"'\"}}Xt.debug=!1,Xt.dfa_debug=!1,Xt.MIN_DFA_EDGE=0,Xt.MAX_DFA_EDGE=127;class Jt{constructor(t,e){this.alt=e,this.pred=t}toString(){return\"(\"+this.pred+\", \"+this.alt+\")\"}}class Zt{constructor(){this.data={}}get(t){return this.data[\"k-\"+t]||null}set(t,e){this.data[\"k-\"+t]=e}values(){return Object.keys(this.data).filter((t=>t.startsWith(\"k-\"))).map((t=>this.data[t]),this)}}const Qt={SLL:0,LL:1,LL_EXACT_AMBIG_DETECTION:2,hasSLLConflictTerminatingPrediction:function(t,e){if(Qt.allConfigsInRuleStopStates(e))return!0;if(t===Qt.SLL&&e.hasSemanticContext){const t=new zt;for(let n=0;n<e.items.length;n++){let s=e.items[n];s=new S({semanticContext:p.NONE},s),t.add(s)}e=t}const n=Qt.getConflictingAltSubsets(e);return Qt.hasConflictingAltSet(n)&&!Qt.hasStateAssociatedWithOneAlt(e)},hasConfigInRuleStopState:function(t){for(let e=0;e<t.items.length;e++)if(t.items[e].state instanceof A)return!0;return!1},allConfigsInRuleStopStates:function(t){for(let e=0;e<t.items.length;e++)if(!(t.items[e].state instanceof A))return!1;return!0},resolvesToJustOneViableAlt:function(t){return Qt.getSingleViableAlt(t)},allSubsetsConflict:function(t){return!Qt.hasNonConflictingAltSet(t)},hasNonConflictingAltSet:function(t){for(let e=0;e<t.length;e++)if(1===t[e].length)return!0;return!1},hasConflictingAltSet:function(t){for(let e=0;e<t.length;e++)if(t[e].length>1)return!0;return!1},allSubsetsEqual:function(t){let e=null;for(let n=0;n<t.length;n++){const s=t[n];if(null===e)e=s;else if(s!==e)return!1}return!0},getUniqueAlt:function(t){const e=Qt.getAlts(t);return 1===e.length?e.minValue():$.INVALID_ALT_NUMBER},getAlts:function(t){const e=new j;return t.map((function(t){e.or(t)})),e},getConflictingAltSubsets:function(t){const e=new H;return e.hashFunction=function(t){o.hashStuff(t.state.stateNumber,t.context)},e.equalsFunction=function(t,e){return t.state.stateNumber===e.state.stateNumber&&t.context.equals(e.context)},t.items.map((function(t){let n=e.get(t);null===n&&(n=new j,e.set(t,n)),n.add(t.alt)})),e.getValues()},getStateToAltMap:function(t){const e=new Zt;return t.items.map((function(t){let n=e.get(t.state);null===n&&(n=new j,e.set(t.state,n)),n.add(t.alt)})),e},hasStateAssociatedWithOneAlt:function(t){const e=Qt.getStateToAltMap(t).values();for(let t=0;t<e.length;t++)if(1===e[t].length)return!0;return!1},getSingleViableAlt:function(t){let e=null;for(let n=0;n<t.length;n++){const s=t[n].minValue();if(null===e)e=s;else if(e!==s)return $.INVALID_ALT_NUMBER}return e}},te=Qt;class ee extends Ft{constructor(t,e,n,s,i,r){r=r||t._ctx,s=s||t.getCurrentToken(),n=n||t.getCurrentToken(),e=e||t.getInputStream(),super({message:\"\",recognizer:t,input:e,ctx:r}),this.deadEndConfigs=i,this.startToken=n,this.offendingToken=s}}class ne{constructor(t){this.defaultMapCtor=t||H,this.cacheMap=new this.defaultMapCtor}get(t,e){const n=this.cacheMap.get(t)||null;return null===n?null:n.get(e)||null}set(t,e,n){let s=this.cacheMap.get(t)||null;null===s&&(s=new this.defaultMapCtor,this.cacheMap.set(t,s)),s.set(e,n)}}class se extends Ht{constructor(t,e,n,s){super(e,s),this.parser=t,this.decisionToDFA=n,this.predictionMode=te.LL,this._input=null,this._startIndex=0,this._outerContext=null,this._dfa=null,this.mergeCache=null,this.debug=!1,this.debug_closure=!1,this.debug_add=!1,this.trace_atn_sim=!1,this.dfa_debug=!1,this.retry_debug=!1}reset(){}adaptivePredict(t,e,n){(this.debug||this.trace_atn_sim)&&console.log(\"adaptivePredict decision \"+e+\" exec LA(1)==\"+this.getLookaheadName(t)+\" line \"+t.LT(1).line+\":\"+t.LT(1).column),this._input=t,this._startIndex=t.index,this._outerContext=n;const s=this.decisionToDFA[e];this._dfa=s;const i=t.mark(),r=t.index;try{let e;if(e=s.precedenceDfa?s.getPrecedenceStartState(this.parser.getPrecedence()):s.s0,null===e){null===n&&(n=M.EMPTY),this.debug&&console.log(\"predictATN decision \"+s.decision+\" exec LA(1)==\"+this.getLookaheadName(t)+\", outerContext=\"+n.toString(this.parser.ruleNames));const i=!1;let r=this.computeStartState(s.atnStartState,M.EMPTY,i);s.precedenceDfa?(s.s0.configs=r,r=this.applyPrecedenceFilter(r),e=this.addDFAState(s,new qt(null,r)),s.setPrecedenceStartState(this.parser.getPrecedence(),e)):(e=this.addDFAState(s,new qt(null,r)),s.s0=e)}const i=this.execATN(s,e,t,r,n);return this.debug&&console.log(\"DFA after predictATN: \"+s.toString(this.parser.literalNames,this.parser.symbolicNames)),i}finally{this._dfa=null,this.mergeCache=null,t.seek(r),t.release(i)}}execATN(e,n,s,i,r){let o;(this.debug||this.trace_atn_sim)&&console.log(\"execATN decision \"+e.decision+\", DFA state \"+n+\", LA(1)==\"+this.getLookaheadName(s)+\" line \"+s.LT(1).line+\":\"+s.LT(1).column);let a=n;this.debug&&console.log(\"s0 = \"+n);let l=s.LA(1);for(;;){let n=this.getExistingTargetState(a,l);if(null===n&&(n=this.computeTargetState(e,a,l)),n===Ht.ERROR){const t=this.noViableAlt(s,r,a.configs,i);if(s.seek(i),o=this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(a.configs,r),o!==$.INVALID_ALT_NUMBER)return o;throw t}if(n.requiresFullContext&&this.predictionMode!==te.SLL){let t=null;if(null!==n.predicates){this.debug&&console.log(\"DFA state has preds in DFA sim LL failover\");const e=s.index;if(e!==i&&s.seek(i),t=this.evalSemanticContext(n.predicates,r,!0),1===t.length)return this.debug&&console.log(\"Full LL avoided\"),t.minValue();e!==i&&s.seek(e)}this.dfa_debug&&console.log(\"ctx sensitive state \"+r+\" in \"+n);const a=!0,l=this.computeStartState(e.atnStartState,r,a);return this.reportAttemptingFullContext(e,t,n.configs,i,s.index),o=this.execATNWithFullContext(e,n,l,s,i,r),o}if(n.isAcceptState){if(null===n.predicates)return n.prediction;const t=s.index;s.seek(i);const o=this.evalSemanticContext(n.predicates,r,!0);if(0===o.length)throw this.noViableAlt(s,r,n.configs,i);return 1===o.length||this.reportAmbiguity(e,n,i,t,!1,o,n.configs),o.minValue()}a=n,l!==t.EOF&&(s.consume(),l=s.LA(1))}}getExistingTargetState(t,e){const n=t.edges;return null===n?null:n[e+1]||null}computeTargetState(t,e,n){const s=this.computeReachSet(e.configs,n,!1);if(null===s)return this.addDFAEdge(t,e,n,Ht.ERROR),Ht.ERROR;let i=new qt(null,s);const r=this.getUniqueAlt(s);if(this.debug){const t=te.getConflictingAltSubsets(s);console.log(\"SLL altSubSets=\"+c(t)+\", configs=\"+s+\", predict=\"+r+\", allSubsetsConflict=\"+te.allSubsetsConflict(t)+\", conflictingAlts=\"+this.getConflictingAlts(s))}return r!==$.INVALID_ALT_NUMBER?(i.isAcceptState=!0,i.configs.uniqueAlt=r,i.prediction=r):te.hasSLLConflictTerminatingPrediction(this.predictionMode,s)&&(i.configs.conflictingAlts=this.getConflictingAlts(s),i.requiresFullContext=!0,i.isAcceptState=!0,i.prediction=i.configs.conflictingAlts.minValue()),i.isAcceptState&&i.configs.hasSemanticContext&&(this.predicateDFAState(i,this.atn.getDecisionState(t.decision)),null!==i.predicates&&(i.prediction=$.INVALID_ALT_NUMBER)),i=this.addDFAEdge(t,e,n,i),i}predicateDFAState(t,e){const n=e.transitions.length,s=this.getConflictingAltsOrUniqueAlt(t.configs),i=this.getPredsForAmbigAlts(s,t.configs,n);null!==i?(t.predicates=this.getPredicatePredictions(s,i),t.prediction=$.INVALID_ALT_NUMBER):t.prediction=s.minValue()}execATNWithFullContext(e,n,s,i,r,o){(this.debug||this.trace_atn_sim)&&console.log(\"execATNWithFullContext \"+s);let a,l=!1,h=s;i.seek(r);let c=i.LA(1),u=-1;for(;;){if(a=this.computeReachSet(h,c,!0),null===a){const t=this.noViableAlt(i,o,h,r);i.seek(r);const e=this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(h,o);if(e!==$.INVALID_ALT_NUMBER)return e;throw t}const e=te.getConflictingAltSubsets(a);if(this.debug&&console.log(\"LL altSubSets=\"+e+\", predict=\"+te.getUniqueAlt(e)+\", resolvesToJustOneViableAlt=\"+te.resolvesToJustOneViableAlt(e)),a.uniqueAlt=this.getUniqueAlt(a),a.uniqueAlt!==$.INVALID_ALT_NUMBER){u=a.uniqueAlt;break}if(this.predictionMode!==te.LL_EXACT_AMBIG_DETECTION){if(u=te.resolvesToJustOneViableAlt(e),u!==$.INVALID_ALT_NUMBER)break}else if(te.allSubsetsConflict(e)&&te.allSubsetsEqual(e)){l=!0,u=te.getSingleViableAlt(e);break}h=a,c!==t.EOF&&(i.consume(),c=i.LA(1))}return a.uniqueAlt!==$.INVALID_ALT_NUMBER?(this.reportContextSensitivity(e,u,a,r,i.index),u):(this.reportAmbiguity(e,n,r,i.index,l,null,a),u)}computeReachSet(e,n,s){this.debug&&console.log(\"in computeReachSet, starting closure: \"+e),null===this.mergeCache&&(this.mergeCache=new ne);const i=new zt(s);let r=null;for(let o=0;o<e.items.length;o++){const a=e.items[o];if(this.debug&&console.log(\"testing \"+this.getTokenName(n)+\" at \"+a),a.state instanceof A)(s||n===t.EOF)&&(null===r&&(r=[]),r.push(a),this.debug_add&&console.log(\"added \"+a+\" to skippedStopStates\"));else for(let t=0;t<a.state.transitions.length;t++){const e=a.state.transitions[t],s=this.getReachableTarget(e,n);if(null!==s){const t=new S({state:s},a);i.add(t,this.mergeCache),this.debug_add&&console.log(\"added \"+t+\" to intermediate\")}}}let o=null;if(null===r&&n!==t.EOF&&(1===i.items.length||this.getUniqueAlt(i)!==$.INVALID_ALT_NUMBER)&&(o=i),null===o){o=new zt(s);const e=new d,r=n===t.EOF;for(let t=0;t<i.items.length;t++)this.closure(i.items[t],o,e,!1,s,r)}if(n===t.EOF&&(o=this.removeAllConfigsNotInRuleStopState(o,o===i)),!(null===r||s&&te.hasConfigInRuleStopState(o)))for(let t=0;t<r.length;t++)o.add(r[t],this.mergeCache);return this.trace_atn_sim&&console.log(\"computeReachSet \"+e+\" -> \"+o),0===o.items.length?null:o}removeAllConfigsNotInRuleStopState(e,n){if(te.allConfigsInRuleStopStates(e))return e;const s=new zt(e.fullCtx);for(let i=0;i<e.items.length;i++){const r=e.items[i];if(r.state instanceof A)s.add(r,this.mergeCache);else if(n&&r.state.epsilonOnlyTransitions&&this.atn.nextTokens(r.state).contains(t.EPSILON)){const t=this.atn.ruleToStopState[r.state.ruleIndex];s.add(new S({state:t},r),this.mergeCache)}}return s}computeStartState(t,e,n){const s=K(this.atn,e),i=new zt(n);this.trace_atn_sim&&console.log(\"computeStartState from ATN state \"+t+\" initialContext=\"+s.toString(this.parser));for(let e=0;e<t.transitions.length;e++){const r=t.transitions[e].target,o=new S({state:r,alt:e+1,context:s},null),a=new d;this.closure(o,i,a,!0,n,!1)}return i}applyPrecedenceFilter(t){let e;const n=[],s=new zt(t.fullCtx);for(let i=0;i<t.items.length;i++){if(e=t.items[i],1!==e.alt)continue;const r=e.semanticContext.evalPrecedence(this.parser,this._outerContext);null!==r&&(n[e.state.stateNumber]=e.context,r!==e.semanticContext?s.add(new S({semanticContext:r},e),this.mergeCache):s.add(e,this.mergeCache))}for(let i=0;i<t.items.length;i++)if(e=t.items[i],1!==e.alt){if(!e.precedenceFilterSuppressed){const t=n[e.state.stateNumber]||null;if(null!==t&&t.equals(e.context))continue}s.add(e,this.mergeCache)}return s}getReachableTarget(t,e){return t.matches(e,0,this.atn.maxTokenType)?t.target:null}getPredsForAmbigAlts(t,e,n){let s=[];for(let n=0;n<e.items.length;n++){const i=e.items[n];t.has(i.alt)&&(s[i.alt]=p.orContext(s[i.alt]||null,i.semanticContext))}let i=0;for(let t=1;t<n+1;t++){const e=s[t]||null;null===e?s[t]=p.NONE:e!==p.NONE&&(i+=1)}return 0===i&&(s=null),this.debug&&console.log(\"getPredsForAmbigAlts result \"+c(s)),s}getPredicatePredictions(t,e){const n=[];let s=!1;for(let i=1;i<e.length;i++){const r=e[i];null!==t&&t.has(i)&&n.push(new Jt(r,i)),r!==p.NONE&&(s=!0)}return s?n:null}getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(t,e){const n=this.splitAccordingToSemanticValidity(t,e),s=n[0],i=n[1];let r=this.getAltThatFinishedDecisionEntryRule(s);return r!==$.INVALID_ALT_NUMBER||i.items.length>0&&(r=this.getAltThatFinishedDecisionEntryRule(i),r!==$.INVALID_ALT_NUMBER)?r:$.INVALID_ALT_NUMBER}getAltThatFinishedDecisionEntryRule(t){const e=[];for(let n=0;n<t.items.length;n++){const s=t.items[n];(s.reachesIntoOuterContext>0||s.state instanceof A&&s.context.hasEmptyPath())&&e.indexOf(s.alt)<0&&e.push(s.alt)}return 0===e.length?$.INVALID_ALT_NUMBER:Math.min.apply(null,e)}splitAccordingToSemanticValidity(t,e){const n=new zt(t.fullCtx),s=new zt(t.fullCtx);for(let i=0;i<t.items.length;i++){const r=t.items[i];r.semanticContext!==p.NONE?r.semanticContext.evaluate(this.parser,e)?n.add(r):s.add(r):n.add(r)}return[n,s]}evalSemanticContext(t,e,n){const s=new j;for(let i=0;i<t.length;i++){const r=t[i];if(r.pred===p.NONE){if(s.add(r.alt),!n)break;continue}const o=r.pred.evaluate(this.parser,e);if((this.debug||this.dfa_debug)&&console.log(\"eval pred \"+r+\"=\"+o),o&&((this.debug||this.dfa_debug)&&console.log(\"PREDICT \"+r.alt),s.add(r.alt),!n))break}return s}closure(t,e,n,s,i,r){this.closureCheckingStopState(t,e,n,s,i,0,r)}closureCheckingStopState(t,e,n,s,i,r,o){if((this.trace_atn_sim||this.debug_closure)&&console.log(\"closure(\"+t.toString(this.parser,!0)+\")\"),t.state instanceof A){if(!t.context.isEmpty()){for(let a=0;a<t.context.length;a++){if(t.context.getReturnState(a)===U.EMPTY_RETURN_STATE){if(i){e.add(new S({state:t.state,context:U.EMPTY},t),this.mergeCache);continue}this.debug&&console.log(\"FALLING off rule \"+this.getRuleName(t.state.ruleIndex)),this.closure_(t,e,n,s,i,r,o);continue}const l=this.atn.states[t.context.getReturnState(a)],h=t.context.getParent(a),c={state:l,alt:t.alt,context:h,semanticContext:t.semanticContext},u=new S(c,null);u.reachesIntoOuterContext=t.reachesIntoOuterContext,this.closureCheckingStopState(u,e,n,s,i,r-1,o)}return}if(i)return void e.add(t,this.mergeCache);this.debug&&console.log(\"FALLING off rule \"+this.getRuleName(t.state.ruleIndex))}this.closure_(t,e,n,s,i,r,o)}closure_(t,e,n,s,i,r,o){const a=t.state;a.epsilonOnlyTransitions||e.add(t,this.mergeCache);for(let l=0;l<a.transitions.length;l++){if(0===l&&this.canDropLoopEntryEdgeInLeftRecursiveRule(t))continue;const h=a.transitions[l],c=s&&!(h instanceof ut),u=this.getEpsilonTarget(t,h,c,0===r,i,o);if(null!==u){let s=r;if(t.state instanceof A){if(null!==this._dfa&&this._dfa.precedenceDfa&&h.outermostPrecedenceReturn===this._dfa.atnStartState.ruleIndex&&(u.precedenceFilterSuppressed=!0),u.reachesIntoOuterContext+=1,n.add(u)!==u)continue;e.dipsIntoOuterContext=!0,s-=1,this.debug&&console.log(\"dips into outer ctx: \"+u)}else{if(!h.isEpsilon&&n.add(u)!==u)continue;h instanceof N&&s>=0&&(s+=1)}this.closureCheckingStopState(u,e,n,c,i,s,o)}}}canDropLoopEntryEdgeInLeftRecursiveRule(t){const e=t.state;if(e.stateType!==_.STAR_LOOP_ENTRY)return!1;if(e.stateType!==_.STAR_LOOP_ENTRY||!e.isPrecedenceDecision||t.context.isEmpty()||t.context.hasEmptyPath())return!1;const n=t.context.length;for(let s=0;s<n;s++)if(this.atn.states[t.context.getReturnState(s)].ruleIndex!==e.ruleIndex)return!1;const s=e.transitions[0].target.endState.stateNumber,i=this.atn.states[s];for(let s=0;s<n;s++){const n=t.context.getReturnState(s),r=this.atn.states[n];if(1!==r.transitions.length||!r.transitions[0].isEpsilon)return!1;const o=r.transitions[0].target;if(!(r.stateType===_.BLOCK_END&&o===e||r===i||o===i||o.stateType===_.BLOCK_END&&1===o.transitions.length&&o.transitions[0].isEpsilon&&o.transitions[0].target===e))return!1}return!0}getRuleName(t){return null!==this.parser&&t>=0?this.parser.ruleNames[t]:\"<rule \"+t+\">\"}getEpsilonTarget(e,n,s,i,r,o){switch(n.serializationType){case C.RULE:return this.ruleTransition(e,n);case C.PRECEDENCE:return this.precedenceTransition(e,n,s,i,r);case C.PREDICATE:return this.predTransition(e,n,s,i,r);case C.ACTION:return this.actionTransition(e,n);case C.EPSILON:return new S({state:n.target},e);case C.ATOM:case C.RANGE:case C.SET:return o&&n.matches(t.EOF,0,1)?new S({state:n.target},e):null;default:return null}}actionTransition(t,e){if(this.debug){const t=-1===e.actionIndex?65535:e.actionIndex;console.log(\"ACTION edge \"+e.ruleIndex+\":\"+t)}return new S({state:e.target},t)}precedenceTransition(t,e,n,s,i){this.debug&&(console.log(\"PRED (collectPredicates=\"+n+\") \"+e.precedence+\">=_p, ctx dependent=true\"),null!==this.parser&&console.log(\"context surrounding pred is \"+c(this.parser.getRuleInvocationStack())));let r=null;if(n&&s)if(i){const n=this._input.index;this._input.seek(this._startIndex);const s=e.getPredicate().evaluate(this.parser,this._outerContext);this._input.seek(n),s&&(r=new S({state:e.target},t))}else{const n=p.andContext(t.semanticContext,e.getPredicate());r=new S({state:e.target,semanticContext:n},t)}else r=new S({state:e.target},t);return this.debug&&console.log(\"config from pred transition=\"+r),r}predTransition(t,e,n,s,i){this.debug&&(console.log(\"PRED (collectPredicates=\"+n+\") \"+e.ruleIndex+\":\"+e.predIndex+\", ctx dependent=\"+e.isCtxDependent),null!==this.parser&&console.log(\"context surrounding pred is \"+c(this.parser.getRuleInvocationStack())));let r=null;if(n&&(e.isCtxDependent&&s||!e.isCtxDependent))if(i){const n=this._input.index;this._input.seek(this._startIndex);const s=e.getPredicate().evaluate(this.parser,this._outerContext);this._input.seek(n),s&&(r=new S({state:e.target},t))}else{const n=p.andContext(t.semanticContext,e.getPredicate());r=new S({state:e.target,semanticContext:n},t)}else r=new S({state:e.target},t);return this.debug&&console.log(\"config from pred transition=\"+r),r}ruleTransition(t,e){this.debug&&console.log(\"CALL rule \"+this.getRuleName(e.target.ruleIndex)+\", ctx=\"+t.context);const n=e.followState,s=V.create(t.context,n.stateNumber);return new S({state:e.target,context:s},t)}getConflictingAlts(t){const e=te.getConflictingAltSubsets(t);return te.getAlts(e)}getConflictingAltsOrUniqueAlt(t){let e=null;return t.uniqueAlt!==$.INVALID_ALT_NUMBER?(e=new j,e.add(t.uniqueAlt)):e=t.conflictingAlts,e}getTokenName(e){if(e===t.EOF)return\"EOF\";if(null!==this.parser&&null!==this.parser.literalNames){if(!(e>=this.parser.literalNames.length&&e>=this.parser.symbolicNames.length))return(this.parser.literalNames[e]||this.parser.symbolicNames[e])+\"<\"+e+\">\";console.log(e+\" ttype out of range: \"+this.parser.literalNames),console.log(\"\"+this.parser.getInputStream().getTokens())}return\"\"+e}getLookaheadName(t){return this.getTokenName(t.LA(1))}dumpDeadEndConfigs(t){console.log(\"dead end configs: \");const e=t.getDeadEndConfigs();for(let t=0;t<e.length;t++){const n=e[t];let s=\"no edges\";if(n.state.transitions.length>0){const t=n.state.transitions[0];t instanceof ht?s=\"Atom \"+this.getTokenName(t.label):t instanceof y&&(s=(t instanceof I?\"~\":\"\")+\"Set \"+t.set)}console.error(n.toString(this.parser,!0)+\":\"+s)}}noViableAlt(t,e,n,s){return new ee(this.parser,t,t.get(s),t.LT(1),n,e)}getUniqueAlt(t){let e=$.INVALID_ALT_NUMBER;for(let n=0;n<t.items.length;n++){const s=t.items[n];if(e===$.INVALID_ALT_NUMBER)e=s.alt;else if(s.alt!==e)return $.INVALID_ALT_NUMBER}return e}addDFAEdge(t,e,n,s){if(this.debug&&console.log(\"EDGE \"+e+\" -> \"+s+\" upon \"+this.getTokenName(n)),null===s)return null;if(s=this.addDFAState(t,s),null===e||n<-1||n>this.atn.maxTokenType)return s;if(null===e.edges&&(e.edges=[]),e.edges[n+1]=s,this.debug){const e=null===this.parser?null:this.parser.literalNames,n=null===this.parser?null:this.parser.symbolicNames;console.log(\"DFA=\\n\"+t.toString(e,n))}return s}addDFAState(t,e){if(e===Ht.ERROR)return e;const n=t.states.get(e);return null!==n?(this.trace_atn_sim&&console.log(\"addDFAState \"+e+\" exists\"),n):(e.stateNumber=t.states.length,e.configs.readOnly||(e.configs.optimizeConfigs(this),e.configs.setReadonly(!0)),this.trace_atn_sim&&console.log(\"addDFAState new \"+e),t.states.add(e),this.debug&&console.log(\"adding new DFA state: \"+e),e)}reportAttemptingFullContext(t,e,n,s,i){if(this.debug||this.retry_debug){const e=new m(s,i+1);console.log(\"reportAttemptingFullContext decision=\"+t.decision+\":\"+n+\", input=\"+this.parser.getTokenStream().getText(e))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser,t,s,i,e,n)}reportContextSensitivity(t,e,n,s,i){if(this.debug||this.retry_debug){const e=new m(s,i+1);console.log(\"reportContextSensitivity decision=\"+t.decision+\":\"+n+\", input=\"+this.parser.getTokenStream().getText(e))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser,t,s,i,e,n)}reportAmbiguity(t,e,n,s,i,r,o){if(this.debug||this.retry_debug){const t=new m(n,s+1);console.log(\"reportAmbiguity \"+r+\":\"+o+\", input=\"+this.parser.getTokenStream().getText(t))}null!==this.parser&&this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser,t,n,s,i,r,o)}}class ie{constructor(){this.cache=new H}add(t){if(t===U.EMPTY)return U.EMPTY;const e=this.cache.get(t)||null;return null!==e?e:(this.cache.set(t,t),t)}get(t){return this.cache.get(t)||null}get length(){return this.cache.length}}const re={ATN:$,ATNDeserializer:Lt,LexerATNSimulator:Xt,ParserATNSimulator:se,PredictionMode:te,PredictionContextCache:ie};class oe{constructor(t,e,n){this.dfa=t,this.literalNames=e||[],this.symbolicNames=n||[]}toString(){if(null===this.dfa.s0)return null;let t=\"\";const e=this.dfa.sortedStates();for(let n=0;n<e.length;n++){const s=e[n];if(null!==s.edges){const e=s.edges.length;for(let n=0;n<e;n++){const e=s.edges[n]||null;null!==e&&2147483647!==e.stateNumber&&(t=t.concat(this.getStateString(s)),t=t.concat(\"-\"),t=t.concat(this.getEdgeLabel(n)),t=t.concat(\"->\"),t=t.concat(this.getStateString(e)),t=t.concat(\"\\n\"))}}}return 0===t.length?null:t}getEdgeLabel(t){return 0===t?\"EOF\":null!==this.literalNames||null!==this.symbolicNames?this.literalNames[t-1]||this.symbolicNames[t-1]:String.fromCharCode(t-1)}getStateString(t){const e=(t.isAcceptState?\":\":\"\")+\"s\"+t.stateNumber+(t.requiresFullContext?\"^\":\"\");return t.isAcceptState?null!==t.predicates?e+\"=>\"+c(t.predicates):e+\"=>\"+t.prediction.toString():e}}class ae extends oe{constructor(t){super(t,null)}getEdgeLabel(t){return\"'\"+String.fromCharCode(t)+\"'\"}}class le{constructor(t,e){if(void 0===e&&(e=0),this.atnStartState=t,this.decision=e,this._states=new d,this.s0=null,this.precedenceDfa=!1,t instanceof rt&&t.isPrecedenceDecision){this.precedenceDfa=!0;const t=new qt(null,new zt);t.edges=[],t.isAcceptState=!1,t.requiresFullContext=!1,this.s0=t}}getPrecedenceStartState(t){if(!this.precedenceDfa)throw\"Only precedence DFAs may contain a precedence start state.\";return t<0||t>=this.s0.edges.length?null:this.s0.edges[t]||null}setPrecedenceStartState(t,e){if(!this.precedenceDfa)throw\"Only precedence DFAs may contain a precedence start state.\";t<0||(this.s0.edges[t]=e)}setPrecedenceDfa(t){if(this.precedenceDfa!==t){if(this._states=new d,t){const t=new qt(null,new zt);t.edges=[],t.isAcceptState=!1,t.requiresFullContext=!1,this.s0=t}else this.s0=null;this.precedenceDfa=t}}sortedStates(){return this._states.values().sort((function(t,e){return t.stateNumber-e.stateNumber}))}toString(t,e){return t=t||null,e=e||null,null===this.s0?\"\":new oe(this,t,e).toString()}toLexerString(){return null===this.s0?\"\":new ae(this).toString()}get states(){return this._states}}const he={DFA:le,DFASerializer:oe,LexerDFASerializer:ae,PredPrediction:Jt},ce={PredictionContext:U},ue={Interval:m,IntervalSet:E};class de{visitTerminal(t){}visitErrorNode(t){}enterEveryRule(t){}exitEveryRule(t){}}class pe{visit(t){return Array.isArray(t)?t.map((function(t){return t.accept(this)}),this):t.accept(this)}visitChildren(t){return t.children?this.visit(t.children):null}visitTerminal(t){}visitErrorNode(t){}}class ge{walk(t,e){if(e instanceof b||void 0!==e.isErrorNode&&e.isErrorNode())t.visitErrorNode(e);else if(e instanceof P)t.visitTerminal(e);else{this.enterRule(t,e);for(let n=0;n<e.getChildCount();n++){const s=e.getChild(n);this.walk(t,s)}this.exitRule(t,e)}}enterRule(t,e){const n=e.ruleContext;t.enterEveryRule(n),n.enterRule(t)}exitRule(t,e){const n=e.ruleContext;n.exitRule(t),t.exitEveryRule(n)}}ge.DEFAULT=new ge;const fe={Trees:F,RuleNode:w,ErrorNode:b,TerminalNode:P,ParseTreeListener:de,ParseTreeVisitor:pe,ParseTreeWalker:ge};class xe extends Ft{constructor(t){super({message:\"\",recognizer:t,input:t.getInputStream(),ctx:t._ctx}),this.offendingToken=t.getCurrentToken()}}class Te extends Ft{constructor(t,e,n){super({message:Se(e,n||null),recognizer:t,input:t.getInputStream(),ctx:t._ctx});const s=t._interp.atn.states[t.state].transitions[0];s instanceof gt?(this.ruleIndex=s.ruleIndex,this.predicateIndex=s.predIndex):(this.ruleIndex=0,this.predicateIndex=0),this.predicate=e,this.offendingToken=t.getCurrentToken()}}function Se(t,e){return null!==e?e:\"failed predicate: {\"+t+\"}?\"}class me extends Ot{constructor(t){super(),t=t||!0,this.exactOnly=t}reportAmbiguity(t,e,n,s,i,r,o){if(this.exactOnly&&!i)return;const a=\"reportAmbiguity d=\"+this.getDecisionDescription(t,e)+\": ambigAlts=\"+this.getConflictingAlts(r,o)+\", input='\"+t.getTokenStream().getText(new m(n,s))+\"'\";t.notifyErrorListeners(a)}reportAttemptingFullContext(t,e,n,s,i,r){const o=\"reportAttemptingFullContext d=\"+this.getDecisionDescription(t,e)+\", input='\"+t.getTokenStream().getText(new m(n,s))+\"'\";t.notifyErrorListeners(o)}reportContextSensitivity(t,e,n,s,i,r){const o=\"reportContextSensitivity d=\"+this.getDecisionDescription(t,e)+\", input='\"+t.getTokenStream().getText(new m(n,s))+\"'\";t.notifyErrorListeners(o)}getDecisionDescription(t,e){const n=e.decision,s=e.atnStartState.ruleIndex,i=t.ruleNames;if(s<0||s>=i.length)return\"\"+n;const r=i[s]||null;return null===r||0===r.length?\"\"+n:`${n} (${r})`}getConflictingAlts(t,e){if(null!==t)return t;const n=new j;for(let t=0;t<e.items.length;t++)n.add(e.items[t].alt);return`{${n.values().join(\", \")}}`}}class Ee extends Error{constructor(){super(),Error.captureStackTrace(this,Ee)}}class _e{reset(t){}recoverInline(t){}recover(t,e){}sync(t){}inErrorRecoveryMode(t){}reportError(t){}}class Ae extends _e{constructor(){super(),this.errorRecoveryMode=!1,this.lastErrorIndex=-1,this.lastErrorStates=null,this.nextTokensContext=null,this.nextTokenState=0}reset(t){this.endErrorCondition(t)}beginErrorCondition(t){this.errorRecoveryMode=!0}inErrorRecoveryMode(t){return this.errorRecoveryMode}endErrorCondition(t){this.errorRecoveryMode=!1,this.lastErrorStates=null,this.lastErrorIndex=-1}reportMatch(t){this.endErrorCondition(t)}reportError(t,e){this.inErrorRecoveryMode(t)||(this.beginErrorCondition(t),e instanceof ee?this.reportNoViableAlternative(t,e):e instanceof xe?this.reportInputMismatch(t,e):e instanceof Te?this.reportFailedPredicate(t,e):(console.log(\"unknown recognition error type: \"+e.constructor.name),console.log(e.stack),t.notifyErrorListeners(e.getOffendingToken(),e.getMessage(),e)))}recover(t,e){this.lastErrorIndex===t.getInputStream().index&&null!==this.lastErrorStates&&this.lastErrorStates.indexOf(t.state)>=0&&t.consume(),this.lastErrorIndex=t._input.index,null===this.lastErrorStates&&(this.lastErrorStates=[]),this.lastErrorStates.push(t.state);const n=this.getErrorRecoverySet(t);this.consumeUntil(t,n)}sync(e){if(this.inErrorRecoveryMode(e))return;const n=e._interp.atn.states[e.state],s=e.getTokenStream().LA(1),i=e.atn.nextTokens(n);if(i.contains(s))return this.nextTokensContext=null,void(this.nextTokenState=_.INVALID_STATE_NUMBER);if(i.contains(t.EPSILON))null===this.nextTokensContext&&(this.nextTokensContext=e._ctx,this.nextTokensState=e._stateNumber);else switch(n.stateType){case _.BLOCK_START:case _.STAR_BLOCK_START:case _.PLUS_BLOCK_START:case _.STAR_LOOP_ENTRY:if(null!==this.singleTokenDeletion(e))return;throw new xe(e);case _.PLUS_LOOP_BACK:case _.STAR_LOOP_BACK:{this.reportUnwantedToken(e);const t=new E;t.addSet(e.getExpectedTokens());const n=t.addSet(this.getErrorRecoverySet(e));this.consumeUntil(e,n)}}}reportNoViableAlternative(e,n){const s=e.getTokenStream();let i;i=null!==s?n.startToken.type===t.EOF?\"<EOF>\":s.getText(new m(n.startToken.tokenIndex,n.offendingToken.tokenIndex)):\"<unknown input>\";const r=\"no viable alternative at input \"+this.escapeWSAndQuote(i);e.notifyErrorListeners(r,n.offendingToken,n)}reportInputMismatch(t,e){const n=\"mismatched input \"+this.getTokenErrorDisplay(e.offendingToken)+\" expecting \"+e.getExpectedTokens().toString(t.literalNames,t.symbolicNames);t.notifyErrorListeners(n,e.offendingToken,e)}reportFailedPredicate(t,e){const n=\"rule \"+t.ruleNames[t._ctx.ruleIndex]+\" \"+e.message;t.notifyErrorListeners(n,e.offendingToken,e)}reportUnwantedToken(t){if(this.inErrorRecoveryMode(t))return;this.beginErrorCondition(t);const e=t.getCurrentToken(),n=\"extraneous input \"+this.getTokenErrorDisplay(e)+\" expecting \"+this.getExpectedTokens(t).toString(t.literalNames,t.symbolicNames);t.notifyErrorListeners(n,e,null)}reportMissingToken(t){if(this.inErrorRecoveryMode(t))return;this.beginErrorCondition(t);const e=t.getCurrentToken(),n=\"missing \"+this.getExpectedTokens(t).toString(t.literalNames,t.symbolicNames)+\" at \"+this.getTokenErrorDisplay(e);t.notifyErrorListeners(n,e,null)}recoverInline(t){const e=this.singleTokenDeletion(t);if(null!==e)return t.consume(),e;if(this.singleTokenInsertion(t))return this.getMissingSymbol(t);throw new xe(t)}singleTokenInsertion(t){const e=t.getTokenStream().LA(1),n=t._interp.atn,s=n.states[t.state].transitions[0].target;return!!n.nextTokens(s,t._ctx).contains(e)&&(this.reportMissingToken(t),!0)}singleTokenDeletion(t){const e=t.getTokenStream().LA(2);if(this.getExpectedTokens(t).contains(e)){this.reportUnwantedToken(t),t.consume();const e=t.getCurrentToken();return this.reportMatch(t),e}return null}getMissingSymbol(e){const n=e.getCurrentToken(),s=this.getExpectedTokens(e).first();let i;i=s===t.EOF?\"<missing EOF>\":\"<missing \"+e.literalNames[s]+\">\";let r=n;const o=e.getTokenStream().LT(-1);return r.type===t.EOF&&null!==o&&(r=o),e.getTokenFactory().create(r.source,s,i,t.DEFAULT_CHANNEL,-1,-1,r.line,r.column)}getExpectedTokens(t){return t.getExpectedTokens()}getTokenErrorDisplay(e){if(null===e)return\"<no token>\";let n=e.text;return null===n&&(n=e.type===t.EOF?\"<EOF>\":\"<\"+e.type+\">\"),this.escapeWSAndQuote(n)}escapeWSAndQuote(t){return\"'\"+(t=(t=(t=t.replace(/\\n/g,\"\\\\n\")).replace(/\\r/g,\"\\\\r\")).replace(/\\t/g,\"\\\\t\"))+\"'\"}getErrorRecoverySet(e){const n=e._interp.atn;let s=e._ctx;const i=new E;for(;null!==s&&s.invokingState>=0;){const t=n.states[s.invokingState].transitions[0],e=n.nextTokens(t.followState);i.addSet(e),s=s.parentCtx}return i.removeOne(t.EPSILON),i}consumeUntil(e,n){let s=e.getTokenStream().LA(1);for(;s!==t.EOF&&!n.contains(s);)e.consume(),s=e.getTokenStream().LA(1)}}class Ce extends Ae{constructor(){super()}recover(t,e){let n=t._ctx;for(;null!==n;)n.exception=e,n=n.parentCtx;throw new Ee(e)}recoverInline(t){this.recover(t,new xe(t))}sync(t){}}const Ne={RecognitionException:Ft,NoViableAltException:ee,LexerNoViableAltException:Mt,InputMismatchException:xe,FailedPredicateException:Te,DiagnosticErrorListener:me,BailErrorStrategy:Ce,DefaultErrorStrategy:Ae,ErrorListener:Ot};class ye{constructor(t,e){if(this.name=\"<empty>\",this.strdata=t,this.decodeToUnicodeCodePoints=e||!1,this._index=0,this.data=[],this.decodeToUnicodeCodePoints)for(let t=0;t<this.strdata.length;){const e=this.strdata.codePointAt(t);this.data.push(e),t+=e<=65535?1:2}else{this.data=new Array(this.strdata.length);for(let t=0;t<this.strdata.length;t++)this.data[t]=this.strdata.charCodeAt(t)}this._size=this.data.length}reset(){this._index=0}consume(){if(this._index>=this._size)throw\"cannot consume EOF\";this._index+=1}LA(e){if(0===e)return 0;e<0&&(e+=1);const n=this._index+e-1;return n<0||n>=this._size?t.EOF:this.data[n]}LT(t){return this.LA(t)}mark(){return-1}release(t){}seek(t){t<=this._index?this._index=t:this._index=Math.min(t,this._size)}getText(t,e){if(e>=this._size&&(e=this._size-1),t>=this._size)return\"\";if(this.decodeToUnicodeCodePoints){let n=\"\";for(let s=t;s<=e;s++)n+=String.fromCodePoint(this.data[s]);return n}return this.strdata.slice(t,e+1)}toString(){return this.strdata}get index(){return this._index}get size(){return this._size}}class Ie extends ye{constructor(t,e){super(t,e)}}var ke=n(92);const Le=\"undefined\"!=typeof process&&null!=process.versions&&null!=process.versions.node;class Oe extends Ie{static fromPath(t,e,n){if(!Le)throw new Error(\"FileStream is only available when running in Node!\");ke.readFile(t,e,(function(t,e){let s=null;null!==e&&(s=new ye(e,!0)),n(t,s)}))}constructor(t,e,n){if(!Le)throw new Error(\"FileStream is only available when running in Node!\");super(ke.readFileSync(t,e||\"utf-8\"),n),this.fileName=t}}const ve={fromString:function(t){return new ye(t,!0)},fromBlob:function(t,e,n,s){const i=new window.FileReader;i.onload=function(t){const e=new ye(t.target.result,!0);n(e)},i.onerror=s,i.readAsText(t,e)},fromBuffer:function(t,e){return new ye(t.toString(e),!0)},fromPath:function(t,e,n){Oe.fromPath(t,e,n)},fromPathSync:function(t,e){return new Oe(t,e)}},Re={arrayToString:c,stringToCharArray:function(t){let e=new Uint16Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}};class we{}class Pe extends we{constructor(t){super(),this.tokenSource=t,this.tokens=[],this.index=-1,this.fetchedEOF=!1}mark(){return 0}release(t){}reset(){this.seek(0)}seek(t){this.lazyInit(),this.index=this.adjustSeekIndex(t)}get size(){return this.tokens.length}get(t){return this.lazyInit(),this.tokens[t]}consume(){let e=!1;if(e=this.index>=0&&(this.fetchedEOF?this.index<this.tokens.length-1:this.index<this.tokens.length),!e&&this.LA(1)===t.EOF)throw\"cannot consume EOF\";this.sync(this.index+1)&&(this.index=this.adjustSeekIndex(this.index+1))}sync(t){const e=t-this.tokens.length+1;return!(e>0)||this.fetch(e)>=e}fetch(e){if(this.fetchedEOF)return 0;for(let n=0;n<e;n++){const e=this.tokenSource.nextToken();if(e.tokenIndex=this.tokens.length,this.tokens.push(e),e.type===t.EOF)return this.fetchedEOF=!0,n+1}return e}getTokens(e,n,s){if(void 0===s&&(s=null),e<0||n<0)return null;this.lazyInit();const i=[];n>=this.tokens.length&&(n=this.tokens.length-1);for(let r=e;r<n;r++){const e=this.tokens[r];if(e.type===t.EOF)break;(null===s||s.contains(e.type))&&i.push(e)}return i}LA(t){return this.LT(t).type}LB(t){return this.index-t<0?null:this.tokens[this.index-t]}LT(t){if(this.lazyInit(),0===t)return null;if(t<0)return this.LB(-t);const e=this.index+t-1;return this.sync(e),e>=this.tokens.length?this.tokens[this.tokens.length-1]:this.tokens[e]}adjustSeekIndex(t){return t}lazyInit(){-1===this.index&&this.setup()}setup(){this.sync(0),this.index=this.adjustSeekIndex(0)}setTokenSource(t){this.tokenSource=t,this.tokens=[],this.index=-1,this.fetchedEOF=!1}nextTokenOnChannel(e,n){if(this.sync(e),e>=this.tokens.length)return-1;let s=this.tokens[e];for(;s.channel!==this.channel;){if(s.type===t.EOF)return-1;e+=1,this.sync(e),s=this.tokens[e]}return e}previousTokenOnChannel(t,e){for(;t>=0&&this.tokens[t].channel!==e;)t-=1;return t}getHiddenTokensToRight(t,e){if(void 0===e&&(e=-1),this.lazyInit(),t<0||t>=this.tokens.length)throw t+\" not in 0..\"+this.tokens.length-1;const n=this.nextTokenOnChannel(t+1,Ut.DEFAULT_TOKEN_CHANNEL),s=t+1,i=-1===n?this.tokens.length-1:n;return this.filterForChannel(s,i,e)}getHiddenTokensToLeft(t,e){if(void 0===e&&(e=-1),this.lazyInit(),t<0||t>=this.tokens.length)throw t+\" not in 0..\"+this.tokens.length-1;const n=this.previousTokenOnChannel(t-1,Ut.DEFAULT_TOKEN_CHANNEL);if(n===t-1)return null;const s=n+1,i=t-1;return this.filterForChannel(s,i,e)}filterForChannel(t,e,n){const s=[];for(let i=t;i<e+1;i++){const t=this.tokens[i];-1===n?t.channel!==Ut.DEFAULT_TOKEN_CHANNEL&&s.push(t):t.channel===n&&s.push(t)}return 0===s.length?null:s}getSourceName(){return this.tokenSource.getSourceName()}getText(e){this.lazyInit(),this.fill(),e||(e=new m(0,this.tokens.length-1));let n=e.start;n instanceof t&&(n=n.tokenIndex);let s=e.stop;if(s instanceof t&&(s=s.tokenIndex),null===n||null===s||n<0||s<0)return\"\";s>=this.tokens.length&&(s=this.tokens.length-1);let i=\"\";for(let e=n;e<s+1;e++){const n=this.tokens[e];if(n.type===t.EOF)break;i+=n.text}return i}fill(){for(this.lazyInit();1e3===this.fetch(1e3););}}Object.defineProperty(Pe,\"size\",{get:function(){return this.tokens.length}});class be extends Pe{constructor(e,n){super(e),this.channel=void 0===n?t.DEFAULT_CHANNEL:n}adjustSeekIndex(t){return this.nextTokenOnChannel(t,this.channel)}LB(t){if(0===t||this.index-t<0)return null;let e=this.index,n=1;for(;n<=t;)e=this.previousTokenOnChannel(e-1,this.channel),n+=1;return e<0?null:this.tokens[e]}LT(t){if(this.lazyInit(),0===t)return null;if(t<0)return this.LB(-t);let e=this.index,n=1;for(;n<t;)this.sync(e+1)&&(e=this.nextTokenOnChannel(e+1,this.channel)),n+=1;return this.tokens[e]}getNumberOfOnChannelTokens(){let e=0;this.fill();for(let n=0;n<this.tokens.length;n++){const s=this.tokens[n];if(s.channel===this.channel&&(e+=1),s.type===t.EOF)break}return e}}class De extends de{constructor(t){super(),this.parser=t}enterEveryRule(t){console.log(\"enter   \"+this.parser.ruleNames[t.ruleIndex]+\", LT(1)=\"+this.parser._input.LT(1).text)}visitTerminal(t){console.log(\"consume \"+t.symbol+\" rule \"+this.parser.ruleNames[this.parser._ctx.ruleIndex])}exitEveryRule(t){console.log(\"exit    \"+this.parser.ruleNames[t.ruleIndex]+\", LT(1)=\"+this.parser._input.LT(1).text)}}class Fe extends wt{constructor(t){super(),this._input=null,this._errHandler=new Ae,this._precedenceStack=[],this._precedenceStack.push(0),this._ctx=null,this.buildParseTrees=!0,this._tracer=null,this._parseListeners=null,this._syntaxErrors=0,this.setInputStream(t)}reset(){null!==this._input&&this._input.seek(0),this._errHandler.reset(this),this._ctx=null,this._syntaxErrors=0,this.setTrace(!1),this._precedenceStack=[],this._precedenceStack.push(0),null!==this._interp&&this._interp.reset()}match(t){let e=this.getCurrentToken();return e.type===t?(this._errHandler.reportMatch(this),this.consume()):(e=this._errHandler.recoverInline(this),this.buildParseTrees&&-1===e.tokenIndex&&this._ctx.addErrorNode(e)),e}matchWildcard(){let t=this.getCurrentToken();return t.type>0?(this._errHandler.reportMatch(this),this.consume()):(t=this._errHandler.recoverInline(this),this.buildParseTrees&&-1===t.tokenIndex&&this._ctx.addErrorNode(t)),t}getParseListeners(){return this._parseListeners||[]}addParseListener(t){if(null===t)throw\"listener\";null===this._parseListeners&&(this._parseListeners=[]),this._parseListeners.push(t)}removeParseListener(t){if(null!==this._parseListeners){const e=this._parseListeners.indexOf(t);e>=0&&this._parseListeners.splice(e,1),0===this._parseListeners.length&&(this._parseListeners=null)}}removeParseListeners(){this._parseListeners=null}triggerEnterRuleEvent(){if(null!==this._parseListeners){const t=this._ctx;this._parseListeners.forEach((function(e){e.enterEveryRule(t),t.enterRule(e)}))}}triggerExitRuleEvent(){if(null!==this._parseListeners){const t=this._ctx;this._parseListeners.slice(0).reverse().forEach((function(e){t.exitRule(e),e.exitEveryRule(t)}))}}getTokenFactory(){return this._input.tokenSource._factory}setTokenFactory(t){this._input.tokenSource._factory=t}getATNWithBypassAlts(){const t=this.getSerializedATN();if(null===t)throw\"The current parser does not support an ATN with bypass alternatives.\";let e=this.bypassAltsAtnCache[t];if(null===e){const n=new Tt;n.generateRuleBypassTransitions=!0,e=new Lt(n).deserialize(t),this.bypassAltsAtnCache[t]=e}return e}getInputStream(){return this.getTokenStream()}setInputStream(t){this.setTokenStream(t)}getTokenStream(){return this._input}setTokenStream(t){this._input=null,this.reset(),this._input=t}get syntaxErrorsCount(){return this._syntaxErrors}getCurrentToken(){return this._input.LT(1)}notifyErrorListeners(t,e,n){n=n||null,null===(e=e||null)&&(e=this.getCurrentToken()),this._syntaxErrors+=1;const s=e.line,i=e.column;this.getErrorListenerDispatch().syntaxError(this,e,s,i,t,n)}consume(){const e=this.getCurrentToken();e.type!==t.EOF&&this.getInputStream().consume();const n=null!==this._parseListeners&&this._parseListeners.length>0;if(this.buildParseTrees||n){let t;t=this._errHandler.inErrorRecoveryMode(this)?this._ctx.addErrorNode(e):this._ctx.addTokenNode(e),t.invokingState=this.state,n&&this._parseListeners.forEach((function(e){t instanceof b||void 0!==t.isErrorNode&&t.isErrorNode()?e.visitErrorNode(t):t instanceof P&&e.visitTerminal(t)}))}return e}addContextToParseTree(){null!==this._ctx.parentCtx&&this._ctx.parentCtx.addChild(this._ctx)}enterRule(t,e,n){this.state=e,this._ctx=t,this._ctx.start=this._input.LT(1),this.buildParseTrees&&this.addContextToParseTree(),this.triggerEnterRuleEvent()}exitRule(){this._ctx.stop=this._input.LT(-1),this.triggerExitRuleEvent(),this.state=this._ctx.invokingState,this._ctx=this._ctx.parentCtx}enterOuterAlt(t,e){t.setAltNumber(e),this.buildParseTrees&&this._ctx!==t&&null!==this._ctx.parentCtx&&(this._ctx.parentCtx.removeLastChild(),this._ctx.parentCtx.addChild(t)),this._ctx=t}getPrecedence(){return 0===this._precedenceStack.length?-1:this._precedenceStack[this._precedenceStack.length-1]}enterRecursionRule(t,e,n,s){this.state=e,this._precedenceStack.push(s),this._ctx=t,this._ctx.start=this._input.LT(1),this.triggerEnterRuleEvent()}pushNewRecursionContext(t,e,n){const s=this._ctx;s.parentCtx=t,s.invokingState=e,s.stop=this._input.LT(-1),this._ctx=t,this._ctx.start=s.start,this.buildParseTrees&&this._ctx.addChild(s),this.triggerEnterRuleEvent()}unrollRecursionContexts(t){this._precedenceStack.pop(),this._ctx.stop=this._input.LT(-1);const e=this._ctx,n=this.getParseListeners();if(null!==n&&n.length>0)for(;this._ctx!==t;)this.triggerExitRuleEvent(),this._ctx=this._ctx.parentCtx;else this._ctx=t;e.parentCtx=t,this.buildParseTrees&&null!==t&&t.addChild(e)}getInvokingContext(t){let e=this._ctx;for(;null!==e;){if(e.ruleIndex===t)return e;e=e.parentCtx}return null}precpred(t,e){return e>=this._precedenceStack[this._precedenceStack.length-1]}inContext(t){return!1}isExpectedToken(e){const n=this._interp.atn;let s=this._ctx;const i=n.states[this.state];let r=n.nextTokens(i);if(r.contains(e))return!0;if(!r.contains(t.EPSILON))return!1;for(;null!==s&&s.invokingState>=0&&r.contains(t.EPSILON);){const t=n.states[s.invokingState].transitions[0];if(r=n.nextTokens(t.followState),r.contains(e))return!0;s=s.parentCtx}return!(!r.contains(t.EPSILON)||e!==t.EOF)}getExpectedTokens(){return this._interp.atn.getExpectedTokens(this.state,this._ctx)}getExpectedTokensWithinCurrentRule(){const t=this._interp.atn,e=t.states[this.state];return t.nextTokens(e)}getRuleIndex(t){const e=this.getRuleIndexMap()[t];return null!==e?e:-1}getRuleInvocationStack(t){null===(t=t||null)&&(t=this._ctx);const e=[];for(;null!==t;){const n=t.ruleIndex;n<0?e.push(\"n/a\"):e.push(this.ruleNames[n]),t=t.parentCtx}return e}getDFAStrings(){return this._interp.decisionToDFA.toString()}dumpDFA(){let t=!1;for(let e=0;e<this._interp.decisionToDFA.length;e++){const n=this._interp.decisionToDFA[e];n.states.length>0&&(t&&console.log(),this.printer.println(\"Decision \"+n.decision+\":\"),this.printer.print(n.toString(this.literalNames,this.symbolicNames)),t=!0)}}getSourceName(){return this._input.sourceName}setTrace(t){t?(null!==this._tracer&&this.removeParseListener(this._tracer),this._tracer=new De(this),this.addParseListener(this._tracer)):(this.removeParseListener(this._tracer),this._tracer=null)}}Fe.bypassAltsAtnCache={};class Me extends P{constructor(t){super(),this.parentCtx=null,this.symbol=t}getChild(t){return null}getSymbol(){return this.symbol}getParent(){return this.parentCtx}getPayload(){return this.symbol}getSourceInterval(){if(null===this.symbol)return m.INVALID_INTERVAL;const t=this.symbol.tokenIndex;return new m(t,t)}getChildCount(){return 0}accept(t){return t.visitTerminal(this)}getText(){return this.symbol.text}toString(){return this.symbol.type===t.EOF?\"<EOF>\":this.symbol.text}}class Ue extends Me{constructor(t){super(t)}isErrorNode(){return!0}accept(t){return t.visitErrorNode(this)}}class Be extends M{constructor(t,e){super(t,e),this.children=null,this.start=null,this.stop=null,this.exception=null}copyFrom(t){this.parentCtx=t.parentCtx,this.invokingState=t.invokingState,this.children=null,this.start=t.start,this.stop=t.stop,t.children&&(this.children=[],t.children.map((function(t){t instanceof Ue&&(this.children.push(t),t.parentCtx=this)}),this))}enterRule(t){}exitRule(t){}addChild(t){return null===this.children&&(this.children=[]),this.children.push(t),t}removeLastChild(){null!==this.children&&this.children.pop()}addTokenNode(t){const e=new Me(t);return this.addChild(e),e.parentCtx=this,e}addErrorNode(t){const e=new Ue(t);return this.addChild(e),e.parentCtx=this,e}getChild(t,e){if(e=e||null,null===this.children||t<0||t>=this.children.length)return null;if(null===e)return this.children[t];for(let n=0;n<this.children.length;n++){const s=this.children[n];if(s instanceof e){if(0===t)return s;t-=1}}return null}getToken(t,e){if(null===this.children||e<0||e>=this.children.length)return null;for(let n=0;n<this.children.length;n++){const s=this.children[n];if(s instanceof P&&s.symbol.type===t){if(0===e)return s;e-=1}}return null}getTokens(t){if(null===this.children)return[];{const e=[];for(let n=0;n<this.children.length;n++){const s=this.children[n];s instanceof P&&s.symbol.type===t&&e.push(s)}return e}}getTypedRuleContext(t,e){return this.getChild(e,t)}getTypedRuleContexts(t){if(null===this.children)return[];{const e=[];for(let n=0;n<this.children.length;n++){const s=this.children[n];s instanceof t&&e.push(s)}return e}}getChildCount(){return null===this.children?0:this.children.length}getSourceInterval(){return null===this.start||null===this.stop?m.INVALID_INTERVAL:new m(this.start.tokenIndex,this.stop.tokenIndex)}}M.EMPTY=new Be;class Ve{constructor(t){this.tokens=t,this.programs=new Map}getTokenStream(){return this.tokens}insertAfter(t,e){let n,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ve.DEFAULT_PROGRAM_NAME;n=\"number\"==typeof t?t:t.tokenIndex;let i=this.getProgram(s),r=new Ge(this.tokens,n,i.length,e);i.push(r)}insertBefore(t,e){let n,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ve.DEFAULT_PROGRAM_NAME;n=\"number\"==typeof t?t:t.tokenIndex;const i=this.getProgram(s),r=new Ye(this.tokens,n,i.length,e);i.push(r)}replaceSingle(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ve.DEFAULT_PROGRAM_NAME;this.replace(t,t,e,n)}replace(t,e,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Ve.DEFAULT_PROGRAM_NAME;if(\"number\"!=typeof t&&(t=t.tokenIndex),\"number\"!=typeof e&&(e=e.tokenIndex),t>e||t<0||e<0||e>=this.tokens.size)throw new RangeError(`replace: range invalid: ${t}..${e}(size=${this.tokens.size})`);let i=this.getProgram(s),r=new je(this.tokens,t,e,i.length,n);i.push(r)}delete(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ve.DEFAULT_PROGRAM_NAME;void 0===e&&(e=t),this.replace(t,e,null,n)}getProgram(t){let e=this.programs.get(t);return null==e&&(e=this.initializeProgram(t)),e}initializeProgram(t){const e=[];return this.programs.set(t,e),e}getText(e){let n,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Ve.DEFAULT_PROGRAM_NAME;n=e instanceof m?e:new m(0,this.tokens.size-1),\"string\"==typeof e&&(s=e);const i=this.programs.get(s);let r=n.start,o=n.stop;if(o>this.tokens.size-1&&(o=this.tokens.size-1),r<0&&(r=0),null==i||0===i.length)return this.tokens.getText(new m(r,o));let a=[],l=this.reduceToSingleOperationPerIndex(i),h=r;for(;h<=o&&h<this.tokens.size;){let e=l.get(h);l.delete(h);let n=this.tokens.get(h);null==e?(n.type!==t.EOF&&a.push(String(n.text)),h++):h=e.execute(a)}if(o===this.tokens.size-1)for(const t of l.values())t.index>=this.tokens.size-1&&a.push(t.text.toString());return a.join(\"\")}reduceToSingleOperationPerIndex(t){for(let e=0;e<t.length;e++){let n=t[e];if(null==n)continue;if(!(n instanceof je))continue;let s=n,i=this.getKindOfOps(t,Ye,e);for(let e of i)e.index===s.index?(t[e.instructionIndex]=void 0,s.text=e.text.toString()+(null!=s.text?s.text.toString():\"\")):e.index>s.index&&e.index<=s.lastIndex&&(t[e.instructionIndex]=void 0);let r=this.getKindOfOps(t,je,e);for(let e of r){if(e.index>=s.index&&e.lastIndex<=s.lastIndex){t[e.instructionIndex]=void 0;continue}let n=e.lastIndex<s.index||e.index>s.lastIndex;if(null!=e.text||null!=s.text||n){if(!n)throw new Error(`replace op boundaries of ${s} overlap with previous ${e}`)}else t[e.instructionIndex]=void 0,s.index=Math.min(e.index,s.index),s.lastIndex=Math.max(e.lastIndex,s.lastIndex)}}for(let e=0;e<t.length;e++){let n=t[e];if(null==n)continue;if(!(n instanceof Ye))continue;let s=n,i=this.getKindOfOps(t,Ye,e);for(let e of i)e.index===s.index&&(e instanceof Ge?(s.text=this.catOpText(e.text,s.text),t[e.instructionIndex]=void 0):e instanceof Ye&&(s.text=this.catOpText(s.text,e.text),t[e.instructionIndex]=void 0));let r=this.getKindOfOps(t,je,e);for(let n of r)if(s.index!==n.index){if(s.index>=n.index&&s.index<=n.lastIndex)throw new Error(`insert op ${s} within boundaries of previous ${n}`)}else n.text=this.catOpText(s.text,n.text),t[e]=void 0}let e=new Map;for(let n of t)if(null!=n){if(null!=e.get(n.index))throw new Error(\"should only be one op per index\");e.set(n.index,n)}return e}catOpText(t,e){let n=\"\",s=\"\";return null!=t&&(n=t.toString()),null!=e&&(s=e.toString()),n+s}getKindOfOps(t,e,n){return t.slice(0,n).filter((t=>t&&t instanceof e))}}var ze,qe,He;ze=Ve,He=\"default\",(qe=function(t){var e=function(t,e){if(\"object\"!=typeof t||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var s=n.call(t,\"string\");if(\"object\"!=typeof s)return s;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return String(t)}(t);return\"symbol\"==typeof e?e:String(e)}(qe=\"DEFAULT_PROGRAM_NAME\"))in ze?Object.defineProperty(ze,qe,{value:He,enumerable:!0,configurable:!0,writable:!0}):ze[qe]=He;class Ke{constructor(t,e,n,s){this.tokens=t,this.instructionIndex=n,this.index=e,this.text=void 0===s?\"\":s}toString(){let t=this.constructor.name;const e=t.indexOf(\"$\");return t=t.substring(e+1,t.length),\"<\"+t+\"@\"+this.tokens.get(this.index)+':\"'+this.text+'\">'}}class Ye extends Ke{constructor(t,e,n,s){super(t,e,n,s)}execute(e){return this.text&&e.push(this.text.toString()),this.tokens.get(this.index).type!==t.EOF&&e.push(String(this.tokens.get(this.index).text)),this.index+1}}class Ge extends Ye{constructor(t,e,n,s){super(t,e+1,n,s)}}class je extends Ke{constructor(t,e,n,s,i){super(t,e,s,i),this.lastIndex=n}execute(t){return this.text&&t.push(this.text.toString()),this.lastIndex+1}toString(){return null==this.text?\"<DeleteOp@\"+this.tokens.get(this.index)+\"..\"+this.tokens.get(this.lastIndex)+\">\":\"<ReplaceOp@\"+this.tokens.get(this.index)+\"..\"+this.tokens.get(this.lastIndex)+':\"'+this.text+'\">'}}const We={atn:re,dfa:he,context:ce,misc:ue,tree:fe,error:Ne,Token:t,CommonToken:Pt,CharStreams:ve,CharStream:Ie,InputStream:Ie,CommonTokenStream:be,Lexer:Ut,Parser:Fe,ParserRuleContext:Be,Interval:m,IntervalSet:E,LL1Analyzer:W,Utils:Re,TokenStreamRewriter:Ve}})();var i=s.dx,r=s.q2,o=s.FO,a=s.xf,l=s.Gy,h=s.s4,c=s.c7,u=s._7,d=s.tx,p=s.gp,g=s.cK,f=s.zs,x=s.AV,T=s.Xp,S=s.VS,m=s.ul,E=s.hW,_=s.x1,A=s.z5,C=s.oN,N=s.TB,y=s.u1,I=s._b,k=s.$F,L=s._T,O=s.db,v=s.Zx,R=s._x,w=s.r8,P=s.JI,b=s.TP,D=s.WU,F=s.Nj,M=s.ZP;\n//# sourceMappingURL=antlr4.web.mjs.map\n\n//# sourceURL=webpack://my-webpack-project/./node_modules/antlr4/dist/antlr4.web.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;